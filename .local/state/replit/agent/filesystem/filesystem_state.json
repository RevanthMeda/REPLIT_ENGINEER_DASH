{"file_contents":{"README.md":{"content":"# SAT Report Generator - Cully Automation (Phase 1b)\n\nA comprehensive Flask-based web application for generating System Acceptance Testing (SAT) reports with **complete user account system, admin approvals, role-based dashboards, and database persistence**.\n\n## 🚀 New Features (Phase 1b)\n\n### User Account System\n- **User Registration**: New users can register with role requests (Engineer/TM/PM)\n- **Admin Approval Workflow**: Pending users await admin approval before activation\n- **Role-Based Access Control**: Admin, Engineer, Technical Manager, Project Manager roles\n- **Secure Authentication**: Password hashing, session management, CSRF protection\n- **Database Persistence**: User accounts and settings stored in PostgreSQL/SQLite\n\n### Role-Based Dashboards\n- **Admin Dashboard**: User management, system settings, database status monitoring\n- **Engineer Dashboard**: Create reports, view personal reports (placeholder)\n- **Technical Manager Dashboard**: Assigned reviews (placeholder)\n- **Project Manager Dashboard**: Final approvals (placeholder)\n\n### User Management (Admin Only)\n- **User Approval**: Approve pending registrations and assign roles\n- **User Control**: Enable/disable user accounts\n- **Role Assignment**: Change user roles (Admin/Engineer/TM/PM)\n- **User Filtering**: Filter by status (All/Pending/Active/Disabled)\n\n### System Settings (Admin Only)\n- **Company Logo Management**: View current logo (update coming soon)\n- **Storage Configuration**: Set default report storage location\n- **Database Status**: Real-time connection monitoring\n- **Theme Consistency**: Maintains existing visual design\n\n## 📋 Table of Contents\n\n1. [Installation & Setup](#installation--setup)\n2. [Configuration](#configuration)\n3. [User Roles & Permissions](#user-roles--permissions)\n4. [User Journey](#user-journey)\n5. [Database Schema](#database-schema)\n6. [Application Structure](#application-structure)\n7. [Security Features](#security-features)\n8. [API Endpoints](#api-endpoints)\n9. [Deployment](#deployment)\n\n## 🛠 Installation & Setup\n\n### Prerequisites\n- Python 3.7+\n- PostgreSQL (recommended) or SQLite (development)\n- Windows (for PDF export functionality)\n- SMTP email account for notifications\n\n### Quick Start\n```bash\n# Clone the repository\ngit clone <your-repo-url>\ncd sat-report-generator\n\n# Install dependencies\npip install -r requirements.txt\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your configurations\n\n# Run the application\npython app.py\n```\n\n### Dependencies\n```\nFlask==2.3.3\nFlask-WTF==1.1.1\nFlask-SQLAlchemy==3.0.5\nFlask-Login==0.6.2\nWerkzeug==2.3.7\npsycopg2-binary==2.9.7\npython-docx==0.8.11\ndocxtpl==0.16.7\nPillow==10.0.1\npython-dotenv==1.0.0\npywin32==306  # Windows only\n```\n\n## ⚙️ Configuration\n\n### Environment Variables (.env)\n```env\n# Flask Configuration\nSECRET_KEY=your-secret-key-here\nCSRF_SECRET_KEY=your-csrf-secret-key\nFLASK_DEBUG=True\n\n# Database Configuration\nDATABASE_URL=postgresql://postgres:password@host:5432/database\n# For development: DATABASE_URL=sqlite:///sat_reports.db\n\n# Email Configuration\nSMTP_SERVER=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USERNAME=your-email@gmail.com\nSMTP_PASSWORD=your-app-password\nDEFAULT_SENDER=your-email@gmail.com\n\n# Default Approvers\nAPPROVER_1=techlead@company.com\nAPPROVER_2=projectmanager@company.com\n\n# Optional Features\nENABLE_PDF_EXPORT=True\nENABLE_EMAIL_NOTIFICATIONS=True\n```\n\n## 👥 User Roles & Permissions\n\n### Admin\n- **Full Access**: User management, system settings, database monitoring\n- **User Approval**: Approve/disable users, assign roles\n- **System Configuration**: Company logo, storage settings\n- **Database Status**: Monitor connection health\n\n### Engineer\n- **Report Creation**: Access to SAT report generator\n- **Personal Reports**: View own reports (placeholder)\n- **Limited Access**: Cannot access admin or other users' content\n\n### Technical Manager (TM)\n- **Review Access**: Reports assigned for technical review (placeholder)\n- **Limited Scope**: Only assigned items visible\n\n### Project Manager (PM)\n- **Final Approvals**: Reports assigned for final approval (placeholder)\n- **Project Oversight**: Limited to assigned projects\n\n## 🔄 User Journey\n\n### 1. Welcome Page\n- New users see \"Welcome to Cully SAT Report Generator\"\n- Options: Register or Log In\n- Features overview\n\n### 2. Registration Process\n```\nUser fills registration form → \nRequest submitted → \nAdmin receives notification → \nAdmin approves & assigns role → \nUser can log in → \nRedirected to role dashboard\n```\n\n### 3. Login Process\n```\nUser enters credentials → \nStatus check:\n├── Pending → Pending approval page\n├── Disabled → Error message\n└── Active → Role-based dashboard\n```\n\n### 4. Role-Based Experience\n- **Admin**: User management, system configuration\n- **Engineer**: Report creation, personal dashboard\n- **TM**: Review assignments (placeholder)\n- **PM**: Final approvals (placeholder)\n\n## 🗄 Database Schema\n\n### Users Table\n```sql\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(120) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    role VARCHAR(20),  -- Admin, Engineer, TM, PM\n    status VARCHAR(20) DEFAULT 'Pending',  -- Pending, Active, Disabled\n    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    requested_role VARCHAR(20)\n);\n```\n\n### System Settings Table\n```sql\nCREATE TABLE system_settings (\n    id INTEGER PRIMARY KEY,\n    key VARCHAR(50) UNIQUE NOT NULL,\n    value TEXT,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### Default Data\n- **Admin User**: admin@cully.ie / admin123 (created automatically)\n- **Default Settings**: Company logo, storage location\n\n## 🏗 Application Structure\n\n### Flask Application (app.py)\n- **Database Integration**: SQLAlchemy with PostgreSQL/SQLite\n- **Authentication**: Flask-Login with role-based access\n- **CSRF Protection**: Global CSRF token management\n- **Blueprint Architecture**: Modular route organization\n\n### File Structure\n```\nSAT_Report_App/\n├── app.py                    # Main Flask application with auth\n├── models.py                 # Database models (User, SystemSettings)\n├── auth.py                   # Authentication utilities\n├── config.py                 # Configuration with database settings\n├── routes/                   # Blueprint routes\n│   ├── auth.py              # Authentication routes\n│   ├── dashboard.py         # Role-based dashboards\n│   ├── main.py              # SAT form (protected)\n│   ├── approval.py          # Approval workflow\n│   └── status.py            # Status tracking\n├── templates/               # HTML templates\n│   ├── welcome.html         # Welcome page\n│   ├── register.html        # User registration\n│   ├── login.html           # User login\n│   ├── admin_dashboard.html # Admin dashboard\n│   ├── engineer_dashboard.html # Engineer dashboard\n│   ├── tm_dashboard.html    # TM dashboard\n│   ├── pm_dashboard.html    # PM dashboard\n│   ├── user_management.html # User management\n│   ├── system_settings.html # System settings\n│   └── ... (existing templates)\n└── ... (existing structure)\n```\n\n### Navigation System\n- **Top Bar**: Logo, app title, user info, database status, logout\n- **Role-Aware Sidebar**: \n  - Admin: Home, User Management, System Settings, All Reports\n  - Engineer: Home, My Reports, Create Report\n  - TM: Home, Assigned Reviews\n  - PM: Home, Final Approvals\n\n## 🔒 Security Features\n\n### Authentication & Authorization\n- **Password Hashing**: Werkzeug secure password hashing\n- **Session Management**: Flask-Login user sessions\n- **Role-Based Access**: Decorators for route protection\n- **CSRF Protection**: Comprehensive form protection\n\n### Database Security\n- **Connection Pooling**: SQLAlchemy engine configuration\n- **SQL Injection Protection**: ORM-based queries\n- **Environment Variables**: Sensitive data in .env\n\n### Access Control\n- **Login Required**: Protected routes require authentication\n- **Role Validation**: Role-specific route access\n- **Status Checking**: Active user validation\n- **Admin Protection**: Admin-only functionality secured\n\n## 🌐 API Endpoints\n\n### Authentication Routes\n```\nGET  /auth/welcome           - Welcome page\nGET  /auth/register         - Registration form\nPOST /auth/register         - Process registration\nGET  /auth/login           - Login form\nPOST /auth/login           - Process login\nGET  /auth/logout          - User logout\nGET  /auth/pending         - Pending approval page\n```\n\n### Dashboard Routes\n```\nGET  /dashboard/           - Role-based dashboard redirect\nGET  /dashboard/admin      - Admin dashboard\nGET  /dashboard/engineer   - Engineer dashboard\nGET  /dashboard/technical-manager - TM dashboard\nGET  /dashboard/project-manager   - PM dashboard\n```\n\n### Admin Routes\n```\nGET  /dashboard/user-management   - User management page\nPOST /dashboard/approve-user/<id> - Approve user\nPOST /dashboard/disable-user/<id> - Disable user\nPOST /dashboard/enable-user/<id>  - Enable user\nGET  /dashboard/system-settings   - System settings page\nPOST /dashboard/update-settings   - Update settings\n```\n\n### Protected SAT Routes\n```\nGET  /form                 - SAT form (login required)\nPOST /generate            - Generate report (login required)\n```\n\n## 📊 Database Status Monitoring\n\n### Connection Health\n- **Real-time Status**: Database connectivity check\n- **Admin Dashboard**: Visual status indicator\n- **Error Handling**: Graceful degradation when disconnected\n\n### Status Indicators\n- **Connected** (Green): Database operational\n- **Not Connected** (Amber): Database unavailable\n- **Warning Banner**: Configuration guidance\n\n## 🎨 Visual Design Consistency\n\n### Design Principles\n- **Preserved Styling**: Maintains existing color scheme, fonts, spacing\n- **Component Reuse**: Same buttons, inputs, cards, navigation\n- **Theme Compatibility**: Light/dark mode support maintained\n- **Responsive Design**: Mobile-friendly layouts\n\n### UI Components\n- **Buttons**: Primary, secondary, success, danger variants\n- **Forms**: Consistent input styling and validation\n- **Cards**: Section cards, stat cards, action cards\n- **Navigation**: Top bar, sidebar, breadcrumbs\n- **Status Badges**: Color-coded status indicators\n\n## 🚀 Deployment\n\n### Environment Setup\n1. **Database**: Configure PostgreSQL connection\n2. **Environment Variables**: Set production values\n3. **Static Files**: Ensure proper asset serving\n4. **Security**: Enable HTTPS, secure cookies\n\n### Production Configuration\n```python\n# config.py - ProductionConfig\nDEBUG = False\nSESSION_COOKIE_SECURE = True\nDATABASE_URL = 'postgresql://...'  # Production database\n```\n\n### Health Checks\n- Database connectivity monitoring\n- User authentication validation\n- Role-based access verification\n\n## 🔄 Migration from Phase 1a\n\n### Backward Compatibility\n- **Existing Reports**: All previous SAT reports preserved\n- **Approval Workflow**: Previous approval system intact\n- **File Structure**: No breaking changes to existing files\n\n### New Requirements\n- Users must register and be approved by admin\n- SAT form access requires login\n- Role assignment determines dashboard access\n\n## 🎯 Phase 1b Acceptance Criteria ✅\n\n- ✅ Registration creates Pending user with confirmation page\n- ✅ Admin can approve, assign roles, disable/enable users\n- ✅ Pending users cannot log in; Active users can\n- ✅ Users land on correct role dashboard after login\n- ✅ Navigation is role-aware with access control\n- ✅ System settings store logo and storage location\n- ✅ Database status badge reflects connection state\n- ✅ All pages match existing site colors, fonts, spacing\n\n## 📞 Support & Contact\n\nFor technical support or questions about the SAT Report Generator:\n- **Development Team**: Cully Automation\n- **Documentation**: This README file\n- **Issue Reporting**: Contact your system administrator\n\n---\n\n**Note**: This Phase 1b implementation adds complete user management while preserving all existing SAT report functionality. The visual design remains identical to maintain consistency across the application.","size_bytes":12264},"app.py":{"content":"import os\nimport sys\nimport signal\nimport logging\nimport traceback\nfrom flask import Flask, g, request, render_template, jsonify, make_response, redirect, url_for\nfrom flask_wtf.csrf import CSRFProtect, generate_csrf, CSRFError\nfrom flask_login import current_user, login_required\nfrom config import Config\n\n# Initialize CSRF protection globally\ncsrf = CSRFProtect()\n\n# Import only essential modules - lazy load others\ntry:\n    from models import db, User, init_db\n    from auth import init_auth\n    # Lazy import blueprints to reduce startup time\nexcept ImportError as e:\n    print(f\"❌ Import error: {e}\")\n    sys.exit(1)\n\ndef create_app(config_class=Config):\n    \"\"\"Create and configure Flask application\"\"\"\n    app = Flask(__name__)\n    app.config.from_object(config_class)\n\n    # Initialize extensions\n    csrf.init_app(app)\n\n    # Initialize database and auth\n    try:\n        db_initialized = init_db(app)\n        if not db_initialized:\n            app.logger.warning(\"Database initialization returned False\")\n\n        init_auth(app)\n        app.logger.info(\"Database and auth initialized\")\n    except Exception as e:\n        app.logger.error(f\"Failed to initialize database or auth: {e}\")\n        traceback.print_exc()\n        db_initialized = False\n\n    # Simplified logging for better performance\n    logging.basicConfig(level=logging.WARNING)\n\n    # Add CSRF token to g for access in templates\n    @app.before_request\n    def add_csrf_token():\n        token = generate_csrf()\n        g.csrf_token = token\n\n    # Inject CSRF token into all responses\n    @app.after_request\n    def set_csrf_cookie(response):\n        if response.mimetype == 'text/html':\n            response.set_cookie(\n                'csrf_token', g.csrf_token,\n                httponly=False, samesite='Lax'\n            )\n        return response\n\n    # Make CSRF token available in all templates\n    @app.context_processor\n    def inject_csrf():\n        return dict(csrf_token=getattr(g, 'csrf_token', generate_csrf()))\n\n    # CSRF token refresh endpoint\n    @app.route('/refresh_csrf')\n    def refresh_csrf():\n        \"\"\"Refresh CSRF token via AJAX\"\"\"\n        return jsonify({'csrf_token': generate_csrf()})\n\n    # API endpoint for getting users by role\n    @app.route('/api/get-users-by-role')\n    @login_required\n    def get_users_by_role():\n        \"\"\"API endpoint to get users grouped by role for dropdowns\"\"\"\n        try:\n            # Only get active users\n            users = User.query.filter_by(status='Active').all()\n            users_by_role = {\n                'Admin': [],\n                'Engineer': [],\n                'TM': [],\n                'PM': []\n            }\n\n            for user in users:\n                user_data = {\n                    'name': user.full_name,\n                    'email': user.email\n                }\n                \n                # Map database roles to frontend role categories\n                if user.role == 'Admin':\n                    users_by_role['Admin'].append(user_data)\n                elif user.role == 'Engineer':\n                    users_by_role['Engineer'].append(user_data)\n                elif user.role in ['TM', 'Technical Manager', 'Tech Manager', 'Automation Manager']:\n                    users_by_role['TM'].append(user_data)\n                elif user.role in ['PM', 'Project Manager', 'Project_Manager']:\n                    users_by_role['PM'].append(user_data)\n\n            app.logger.info(f\"Found {len(users)} total users\")\n            app.logger.info(f\"Users by role: TM={len(users_by_role['TM'])}, PM={len(users_by_role['PM'])}, Admin={len(users_by_role['Admin'])}, Engineer={len(users_by_role['Engineer'])}\")\n            \n            return jsonify({'success': True, 'users': users_by_role})\n        except Exception as e:\n            app.logger.error(f\"Error in get_users_by_role endpoint: {e}\")\n            return jsonify({'success': False, 'error': 'Unable to fetch users at this time'}), 500\n\n    # Custom CSRF error handler\n    @app.errorhandler(CSRFError)\n    def handle_csrf_error(e):\n        app.logger.error(f\"CSRF Error occurred: {str(e)}\")\n        app.logger.error(f\"Request Method: {request.method}\")\n        app.logger.error(f\"Request Form Keys: {list(request.form.keys()) if request.form else []}\")\n        app.logger.error(f\"CSRF Token Submitted: {request.form.get('csrf_token') if request.form else 'No form data'}\")\n\n        # For AJAX requests, return JSON error\n        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n            return jsonify({\n                'error': 'CSRF token expired',\n                'message': 'Please refresh the page and try again',\n                'csrf_token': generate_csrf()\n            }), 400\n\n        # Ensure we have a CSRF token for the error page\n        if not hasattr(g, 'csrf_token'):\n            g.csrf_token = generate_csrf()\n\n        return render_template('csrf_error.html', reason=str(e)), 400\n\n    # Root route - redirect to welcome or dashboard\n    @app.route('/')\n    def index():\n        if current_user.is_authenticated:\n            return redirect(url_for('dashboard.home'))\n        return redirect(url_for('auth.welcome'))\n\n    # Legacy redirects\n    @app.route('/sat_form')\n    def legacy_sat_form():\n        return redirect(url_for('reports.new'))\n\n    @app.route('/sat')\n    @app.route('/sat/start')\n    def legacy_sat():\n        return redirect(url_for('reports.new_sat'))\n\n    @app.route('/generate_sat')\n    def legacy_generate_sat():\n        return redirect(url_for('reports.new_sat'))\n\n    # Lazy import and register blueprints for faster startup\n    def register_blueprints():\n        from routes.auth import auth_bp\n        from routes.dashboard import dashboard_bp\n        from routes.reports import reports_bp\n        from routes.notifications import notifications_bp\n        from routes.io_builder import io_builder_bp\n        from routes.main import main_bp\n        from routes.approval import approval_bp\n        from routes.status import status_bp\n\n        app.register_blueprint(auth_bp, url_prefix='/auth')\n        app.register_blueprint(dashboard_bp, url_prefix='/dashboard')\n        app.register_blueprint(reports_bp, url_prefix='/reports')\n        app.register_blueprint(notifications_bp, url_prefix='/notifications')\n        app.register_blueprint(io_builder_bp, url_prefix='/io-builder')\n        app.register_blueprint(main_bp)\n        app.register_blueprint(approval_bp, url_prefix='/approve')\n        app.register_blueprint(status_bp, url_prefix='/status')\n\n    register_blueprints()\n\n    # Error handlers\n    @app.errorhandler(404)\n    def not_found_error(error):\n        return render_template('404.html'), 404\n\n    @app.errorhandler(500)\n    def internal_error(error):\n        db.session.rollback()\n        return render_template('404.html'), 500\n\n    @app.errorhandler(400)\n    def csrf_error(error):\n        \"\"\"Handle CSRF token errors\"\"\"\n        return render_template('csrf_error.html'), 400\n\n    # 404 Error handler\n    @app.errorhandler(404)\n    def page_not_found(e):\n        return render_template('404.html'), 404\n\n    # Minimal response logging for performance\n    @app.after_request\n    def log_response(response):\n        return response\n\n    if not db_initialized:\n        app.logger.warning(\"Database initialization failed - running without database\")\n\n    return app\n\ndef sigint_handler(signum, frame):\n    \"\"\"Handle Ctrl+C gracefully\"\"\"\n    print(\"\\n📡 Shutting down server...\")\n    sys.exit(0)\n\nif __name__ == '__main__':\n    # Set up signal handling\n    signal.signal(signal.SIGINT, sigint_handler)\n    signal.signal(signal.SIGTERM, sigint_handler)\n\n    try:\n        print(\"🔧 Initializing SAT Report Generator...\")\n\n        # Create the app\n        app = create_app()\n\n        # Print startup information\n        print(\"🚀 Starting SAT Report Generator...\")\n        print(f\"Debug Mode: {app.config.get('DEBUG', True)}\")\n        print(f\"Running on http://0.0.0.0:5000\")\n\n        # Create required directories if they don't exist\n        try:\n            upload_root = app.config.get('UPLOAD_ROOT', 'static/uploads')\n            signatures_folder = app.config.get('SIGNATURES_FOLDER', 'static/signatures')\n            submissions_file = app.config.get('SUBMISSIONS_FILE', 'data/submissions.json')\n\n            os.makedirs(upload_root, exist_ok=True)\n            os.makedirs(signatures_folder, exist_ok=True)\n            os.makedirs(os.path.dirname(submissions_file), exist_ok=True)\n            os.makedirs('instance', exist_ok=True)\n            os.makedirs('logs', exist_ok=True)\n            print(\"✅ Required directories created successfully\")\n        except Exception as dir_error:\n            print(f\"⚠️  Warning: Could not create some directories: {dir_error}\")\n\n        # Test a simple route to ensure app is working\n        @app.route('/health')\n        def health_check():\n            return jsonify({'status': 'healthy', 'message': 'SAT Report Generator is running'})\n\n        print(\"🌐 Health check endpoint available at /health\")\n\n        # Run the server\n        app.run(\n            host='0.0.0.0', \n            port=5000, \n            debug=True,  \n            use_reloader=False  # Disable reloader to prevent double initialization\n        )\n\n    except Exception as e:\n        print(f\"❌ Server startup failed: {e}\")\n        traceback.print_exc()\n        sys.exit(1)","size_bytes":9392},"auth.py":{"content":"\nfrom functools import wraps\nfrom flask import redirect, url_for, flash, session, request\nfrom flask_login import LoginManager, current_user\nfrom models import User\n\nlogin_manager = LoginManager()\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\ndef init_auth(app):\n    \"\"\"Initialize authentication with app\"\"\"\n    login_manager.init_app(app)\n    login_manager.login_view = 'auth.login'\n    login_manager.login_message = 'Please log in to access this page.'\n    login_manager.login_message_category = 'info'\n\ndef login_required(f):\n    \"\"\"Require login and active status\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated:\n            return redirect(url_for('auth.login'))\n        if not current_user.is_active():\n            flash('Your account is not active. Contact your administrator.', 'error')\n            return redirect(url_for('auth.login'))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef admin_required(f):\n    \"\"\"Require admin role\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated or current_user.role != 'Admin':\n            flash('Access denied. Admin privileges required.', 'error')\n            return redirect(url_for('dashboard.home'))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef role_required(allowed_roles):\n    \"\"\"Require specific roles\"\"\"\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if not current_user.is_authenticated:\n                return redirect(url_for('auth.login'))\n            if not current_user.is_active():\n                flash('Your account is not active. Contact your administrator.', 'error')\n                return redirect(url_for('auth.login'))\n            if current_user.role not in allowed_roles:\n                flash('Access denied. You do not have permission to access this page.', 'error')\n                return redirect(url_for('dashboard.home'))\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n\ndef role_required(allowed_roles):\n    \"\"\"Require specific roles\"\"\"\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if not current_user.is_authenticated:\n                return redirect(url_for('auth.login'))\n            if not current_user.is_active():\n                flash('Your account is not active. Contact your administrator.', 'error')\n                return redirect(url_for('auth.login'))\n            if current_user.role not in allowed_roles:\n                flash(f'Access denied. Required roles: {\", \".join(allowed_roles)}', 'error')\n                return redirect(url_for('dashboard.home'))\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n\ndef role_required(allowed_roles):\n    \"\"\"Require specific roles\"\"\"\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if not current_user.is_authenticated or current_user.role not in allowed_roles:\n                flash('Access denied. You do not have permission to access this page.', 'error')\n                return redirect(url_for('dashboard.home'))\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\nfrom functools import wraps\nfrom flask import current_app, redirect, url_for, flash, request\nfrom flask_login import LoginManager, current_user\nfrom models import User\n\nlogin_manager = LoginManager()\n\ndef init_auth(app):\n    \"\"\"Initialize authentication\"\"\"\n    login_manager.init_app(app)\n    login_manager.login_view = 'auth.login'\n    login_manager.login_message = 'Please log in to access this page.'\n    login_manager.login_message_category = 'info'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    \"\"\"Load user by ID\"\"\"\n    try:\n        return User.query.get(int(user_id))\n    except Exception:\n        return None\n\ndef login_required(f):\n    \"\"\"Decorator to require login\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated:\n            return redirect(url_for('auth.login', next=request.url))\n        if not current_user.is_active():\n            flash('Your account is not active. Please contact an administrator.', 'warning')\n            return redirect(url_for('auth.login'))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef admin_required(f):\n    \"\"\"Decorator to require admin role\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated:\n            return redirect(url_for('auth.login'))\n        if current_user.role != 'Admin':\n            flash('Admin access required.', 'error')\n            return redirect(url_for('dashboard.home'))\n        return f(*args, **kwargs)\n    return decorated_function\n","size_bytes":4949},"config.py":{"content":"import os\nimport logging\nfrom datetime import timedelta\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nclass Config:\n    \"\"\"Application configuration class\"\"\"\n\n    # Security\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-secret-key-here-change-in-production'\n    WTF_CSRF_ENABLED = True\n    WTF_CSRF_TIME_LIMIT = 3600\n\n    # Database - Use absolute path for SQLite\n    BASE_DIR = os.path.abspath(os.path.dirname(__file__))\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or f'sqlite:///{os.path.join(BASE_DIR, \"instance\", \"sat_reports.db\")}'\n    \n    # Lazy directory creation and optimized database settings\n    INSTANCE_DIR = os.path.join(BASE_DIR, \"instance\")\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SQLALCHEMY_ENGINE_OPTIONS = {\n        'pool_pre_ping': False,  # Disable for faster startup\n        'pool_recycle': 600,\n    }\n\n    # File paths\n    UPLOAD_ROOT = os.environ.get('UPLOAD_ROOT') or 'static/uploads'\n    SIGNATURES_FOLDER = os.environ.get('SIGNATURES_FOLDER') or 'static/signatures'\n    SUBMISSIONS_FILE = os.environ.get('SUBMISSIONS_FILE') or 'data/submissions.json'\n\n    # Email configuration\n    SMTP_SERVER = os.environ.get('SMTP_SERVER') or 'smtp.gmail.com'\n    SMTP_PORT = int(os.environ.get('SMTP_PORT') or 587)\n    SMTP_USERNAME = os.environ.get('SMTP_USERNAME') or ''\n    SMTP_PASSWORD = os.environ.get('SMTP_PASSWORD') or ''\n    DEFAULT_SENDER = os.environ.get('DEFAULT_SENDER') or ''\n\n    # PDF export\n    ENABLE_PDF_EXPORT = os.environ.get('ENABLE_PDF_EXPORT', 'False').lower() == 'true'\n\n    # Default approvers configuration\n    DEFAULT_APPROVERS = [\n        {\n            \"stage\": 1,\n            \"title\": \"Technical Manager\",\n            \"approver_email\": \"tm@cullyautomation.com\"\n        },\n        {\n            \"stage\": 2,\n            \"title\": \"Project Manager\",\n            \"approver_email\": \"pm@cullyautomation.com\"\n        }\n    ]\n\n    # Max content length (16MB default)\n    MAX_CONTENT_LENGTH = int(os.getenv('MAX_CONTENT_LENGTH', '16777216'))\n\n    # Allowed file extensions\n    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'pdf', 'docx'}\n\n    # Template file for SAT reports\n    TEMPLATE_FILE = os.getenv('TEMPLATE_FILE', 'templates/SAT_Template.docx')\n    OUTPUT_FILE = os.getenv('OUTPUT_FILE', 'outputs/SAT_Report_Final.docx')\n\n    # Feature Flags\n    ENABLE_EMAIL_NOTIFICATIONS = os.getenv('ENABLE_EMAIL_NOTIFICATIONS', 'True').lower() == 'true'\n\n    # Security Settings\n    SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', 'False').lower() == 'true'\n    SESSION_COOKIE_HTTPONLY = True\n    SESSION_COOKIE_SAMESITE = 'Lax'\n    PERMANENT_SESSION_LIFETIME = int(os.getenv('PERMANENT_SESSION_LIFETIME', '3600'))  # 1 hour\n\n    @staticmethod\n    def init_app(app):\n        \"\"\"Initialize app-specific configuration\"\"\"\n        pass\n\nclass DevelopmentConfig(Config):\n    \"\"\"Development configuration\"\"\"\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL', 'sqlite:///sat_reports_dev.db')\n\nclass ProductionConfig(Config):\n    \"\"\"Production configuration\"\"\"\n    DEBUG = False\n    SESSION_COOKIE_SECURE = True\n\n    @classmethod\n    def init_app(cls, app):\n        Config.init_app(app)\n\n        # Log to syslog in production\n        import logging\n        from logging.handlers import SysLogHandler\n        syslog_handler = SysLogHandler()\n        syslog_handler.setLevel(logging.WARNING)\n        app.logger.addHandler(syslog_handler)\n\nclass TestingConfig(Config):\n    \"\"\"Testing configuration\"\"\"\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'\n    WTF_CSRF_ENABLED = False\n\n# Configuration dictionary\nconfig = {\n    'development': DevelopmentConfig,\n    'production': ProductionConfig,\n    'testing': TestingConfig,\n    'default': DevelopmentConfig\n}","size_bytes":3813},"init_new_db.py":{"content":"\n#!/usr/bin/env python3\n\"\"\"\nScript to initialize a new database with admin user\nRun this after updating your DATABASE_URL in .env\n\"\"\"\n\nimport os\nimport sys\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Add current directory to Python path\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n\nfrom app import create_app\nfrom models import db, init_db, create_admin_user, User\n\ndef initialize_new_database():\n    \"\"\"Initialize new database with tables and admin user\"\"\"\n    print(\"🔧 Initializing new database...\")\n    \n    # Create Flask app\n    app = create_app()\n    \n    with app.app_context():\n        try:\n            # Test database connection\n            print(\"📡 Testing database connection...\")\n            db.engine.connect().close()\n            print(\"✅ Database connection successful\")\n            \n            # Create all tables\n            print(\"📋 Creating database tables...\")\n            db.create_all()\n            print(\"✅ Database tables created\")\n            \n            # Create admin user\n            print(\"👤 Creating admin user...\")\n            admin_user = create_admin_user(\n                email='admin@cullyautomation.com',\n                password='admin123',\n                full_name='System Administrator'\n            )\n            \n            if admin_user:\n                print(\"\\n🎉 Database initialization completed successfully!\")\n                print(\"\\n📝 Admin Login Details:\")\n                print(\"   Email: admin@cullyautomation.com\")\n                print(\"   Password: admin123\")\n                print(\"\\n⚠️  IMPORTANT: Change the admin password after first login!\")\n                print(\"\\n🚀 You can now start the application with: python app.py\")\n            else:\n                print(\"❌ Failed to create admin user\")\n                return False\n                \n        except Exception as e:\n            print(f\"❌ Database initialization failed: {e}\")\n            import traceback\n            traceback.print_exc()\n            return False\n    \n    return True\n\nif __name__ == '__main__':\n    print(\"🔄 New Database Initialization Script\")\n    print(\"=====================================\")\n    \n    # Check if .env file exists\n    if not os.path.exists('.env'):\n        print(\"❌ .env file not found!\")\n        print(\"Please create a .env file with your DATABASE_URL\")\n        sys.exit(1)\n    \n    # Check if DATABASE_URL is set\n    database_url = os.getenv('DATABASE_URL')\n    if not database_url:\n        print(\"❌ DATABASE_URL not found in .env file!\")\n        print(\"Please add DATABASE_URL to your .env file\")\n        sys.exit(1)\n    \n    print(f\"🗄️  Using database: {database_url[:50]}...\")\n    \n    # Confirm before proceeding\n    confirm = input(\"\\n⚠️  This will create tables and admin user in the database. Continue? (y/N): \")\n    if confirm.lower() != 'y':\n        print(\"❌ Operation cancelled\")\n        sys.exit(0)\n    \n    # Initialize database\n    success = initialize_new_database()\n    \n    if success:\n        print(\"\\n✅ Setup complete! Your application is ready to use.\")\n        sys.exit(0)\n    else:\n        print(\"\\n❌ Setup failed. Please check the errors above.\")\n        sys.exit(1)\n","size_bytes":3258},"models.py":{"content":"import os\nimport json\nfrom datetime import datetime, timedelta\nfrom flask import current_app\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom itsdangerous import URLSafeTimedSerializer\nimport secrets\n\ndb = SQLAlchemy()\n\n# Lazy loading flag to prevent heavy operations on import\n_db_initialized = False\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    full_name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(255), nullable=False)\n    role = db.Column(db.String(30), nullable=True)  # Admin, Engineer, Automation Manager, PM\n    status = db.Column(db.String(20), default='Pending')  # Pending, Active, Disabled\n    created_date = db.Column(db.DateTime, default=datetime.utcnow)\n    requested_role = db.Column(db.String(20), nullable=True)\n    # username = db.Column(db.String(50), unique=True, nullable=True) # Removed username field\n\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n    def is_active(self):\n        return self.status == 'Active'\n\n    def __repr__(self):\n        return f'<User {self.email}>'\n\nclass SystemSettings(db.Model):\n    __tablename__ = 'system_settings'\n\n    id = db.Column(db.Integer, primary_key=True)\n    key = db.Column(db.String(50), unique=True, nullable=False)\n    value = db.Column(db.Text, nullable=True)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    @staticmethod\n    def get_setting(key, default=None):\n        setting = SystemSettings.query.filter_by(key=key).first()\n        return setting.value if setting else default\n\n    @staticmethod\n    def set_setting(key, value):\n        setting = SystemSettings.query.filter_by(key=key).first()\n        if setting:\n            setting.value = value\n            setting.updated_at = datetime.utcnow()\n        else:\n            setting = SystemSettings(key=key, value=value)\n            db.session.add(setting)\n        db.session.commit()\n        return setting\n\nclass Report(db.Model):\n    __tablename__ = 'reports'\n\n    id = db.Column(db.String(36), primary_key=True)  # UUID\n    type = db.Column(db.String(20), nullable=False)  # 'SAT', 'FDS', 'HDS', etc.\n    status = db.Column(db.String(20), default='DRAFT')  # 'DRAFT', 'PENDING', 'APPROVED', etc.\n    document_title = db.Column(db.String(200), nullable=True)\n    document_reference = db.Column(db.String(100), nullable=True)\n    project_reference = db.Column(db.String(100), nullable=True)\n    client_name = db.Column(db.String(100), nullable=True)\n    revision = db.Column(db.String(20), nullable=True)\n    prepared_by = db.Column(db.String(100), nullable=True)\n    user_email = db.Column(db.String(120), nullable=False)  # Creator\n    version = db.Column(db.String(10), default='R0')  # Version tracking (R0, R1, R2, etc.)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    locked = db.Column(db.Boolean, default=False)\n    approvals_json = db.Column(db.Text, nullable=True)  # JSON string for approval workflow\n    approval_notification_sent = db.Column(db.Boolean, default=False)\n\n    # Relationships\n    sat_report = db.relationship('SATReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n    fds_report = db.relationship('FDSReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n    hds_report = db.relationship('HDSReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n    site_survey_report = db.relationship('SiteSurveyReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n    sds_report = db.relationship('SDSReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n    fat_report = db.relationship('FATReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n\n    def __repr__(self):\n        return f'<Report {self.id}: {self.type} - {self.document_title}>'\n\nclass SATReport(db.Model):\n    __tablename__ = 'sat_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)  # Full SAT form payload as JSON\n\n    # Summary fields for quick access\n    date = db.Column(db.String(20), nullable=True)\n    purpose = db.Column(db.Text, nullable=True)\n    scope = db.Column(db.Text, nullable=True)\n\n    # Image URL storage\n    scada_image_urls = db.Column(db.Text, nullable=True)  # JSON array\n    trends_image_urls = db.Column(db.Text, nullable=True)  # JSON array\n    alarm_image_urls = db.Column(db.Text, nullable=True)  # JSON array\n\n    def __repr__(self):\n        return f'<SATReport {self.report_id}>'\n\n# Future report type tables (empty for now)\nclass FDSReport(db.Model):\n    __tablename__ = 'fds_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)\n\nclass HDSReport(db.Model):\n    __tablename__ = 'hds_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)\n\nclass SiteSurveyReport(db.Model):\n    __tablename__ = 'site_survey_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)\n\nclass SDSReport(db.Model):\n    __tablename__ = 'sds_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)\n\nclass FATReport(db.Model):\n    __tablename__ = 'fat_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)\n\ndef init_db(app):\n    \"\"\"Initialize database with proper error handling\"\"\"\n    try:\n        # Ensure instance directory exists\n        instance_dir = os.path.join(app.config.get('BASE_DIR', os.getcwd()), 'instance')\n        os.makedirs(instance_dir, exist_ok=True)\n\n        db.init_app(app)\n\n        with app.app_context():\n            # Test database connection\n            try:\n                db.engine.connect().close()\n                app.logger.info(\"Database connection successful\")\n            except Exception as conn_error:\n                app.logger.error(f\"Database connection failed: {conn_error}\")\n                # Try to create the database file and directories\n                try:\n                    db.create_all()\n                    app.logger.info(\"Database file created successfully\")\n                except Exception as create_error:\n                    app.logger.error(f\"Could not create database: {create_error}\")\n                    return False\n\n            # Create all tables\n            try:\n                db.create_all()\n                app.logger.info(\"Database tables created successfully\")\n            except Exception as table_error:\n                app.logger.error(f\"Error creating tables: {table_error}\")\n                return False\n\n            # Create default admin user if it doesn't exist\n            try:\n                admin_user = User.query.filter_by(email='admin@cullyautomation.com').first()\n                if not admin_user:\n                    admin_user = User(\n                        email='admin@cullyautomation.com',\n                        full_name='System Administrator',\n                        role='Admin',\n                        status='Active'\n                    )\n                    admin_user.set_password('admin123')  # Change this in production\n                    db.session.add(admin_user)\n                    db.session.commit()\n                    app.logger.info(\"Default admin user created\")\n            except Exception as user_error:\n                app.logger.warning(f\"Could not create admin user: {user_error}\")\n                try:\n                    db.session.rollback()\n                except:\n                    pass\n\n            # Initialize system settings\n            try:\n                default_settings = [\n                    ('company_name', 'Cully Automation'),\n                    ('company_logo', 'static/img/cully.png'),\n                    ('default_storage_location', 'static/uploads')\n                ]\n\n                for key, value in default_settings:\n                    existing = SystemSettings.query.filter_by(key=key).first()\n                    if not existing:\n                        setting = SystemSettings(key=key, value=value)\n                        db.session.add(setting)\n\n                db.session.commit()\n                app.logger.info(\"Default system settings initialized\")\n            except Exception as settings_error:\n                app.logger.warning(f\"Could not create system settings: {settings_error}\")\n                try:\n                    db.session.rollback()\n                except:\n                    pass\n\n        app.logger.info(\"Database initialized successfully\")\n        return True\n\n    except Exception as e:\n        app.logger.error(f\"Database initialization failed: {e}\")\n        return False\n\n\ndef import_json_to_db():\n    \"\"\"One-time import of existing JSON submissions to database\"\"\"\n    import json\n    import uuid\n\n    submissions_file = 'data/submissions.json'\n    archived_file = 'data/submissions.archived.json'\n\n    # Check if JSON file exists and hasn't been archived yet\n    if not os.path.exists(submissions_file) or os.path.exists(archived_file):\n        return\n\n    try:\n        with open(submissions_file, 'r') as f:\n            submissions = json.load(f)\n\n        print(f\"📂 Importing {len(submissions)} submissions from JSON to database...\")\n\n        for submission_id, data in submissions.items():\n            # Skip if already exists in database\n            if Report.query.get(submission_id):\n                continue\n\n            context = data.get('context', {})\n\n\n            # Create parent report record\n            report = Report(\n                id=submission_id,\n                type='SAT',\n                status='APPROVED' if data.get('locked', False) else 'DRAFT',\n                document_title=context.get('DOCUMENT_TITLE', ''),\n                document_reference=context.get('DOCUMENT_REFERENCE', ''),\n                project_reference=context.get('PROJECT_REFERENCE', ''),\n                client_name=context.get('CLIENT_NAME', ''),\n                revision=context.get('REVISION', ''),\n                prepared_by=context.get('PREPARED_BY', ''),\n                user_email=data.get('user_email', ''),\n                created_at=datetime.fromisoformat(data.get('created_at', datetime.utcnow().isoformat())),\n                updated_at=datetime.fromisoformat(data.get('updated_at', datetime.utcnow().isoformat())),\n                locked=data.get('locked', False),\n                approvals_json=json.dumps(data.get('approvals', [])),\n                approval_notification_sent=data.get('approval_notification_sent', False)\n            )\n\n            # Create SAT-specific record\n            sat_report = SATReport(\n                report_id=submission_id,\n                data_json=json.dumps(data),  # Store entire submission as JSON\n                date=context.get('DATE', ''),\n                purpose=context.get('PURPOSE', ''),\n                scope=context.get('SCOPE', ''),\n                scada_image_urls=json.dumps(data.get('scada_image_urls', [])),\n                trends_image_urls=json.dumps(data.get('trends_image_urls', [])),\n                alarm_image_urls=json.dumps(data.get('alarm_image_urls', []))\n            )\n\n            db.session.add(report)\n            db.session.add(sat_report)\n\n        db.session.commit()\n\n        # Archive the JSON file\n        os.rename(submissions_file, archived_file)\n        print(f\"✅ Successfully imported {len(submissions)} submissions and archived JSON file\")\n\n    except Exception as e:\n        print(f\"❌ Error importing JSON submissions: {e}\")\n        db.session.rollback()\n\ndef test_db_connection():\n    \"\"\"Test database connectivity\"\"\"\n    try:\n        # Try a simple query\n        User.query.limit(1).all()\n        return True\n    except Exception as e:\n        print(f\"Database connection failed: {e}\")\n        return False\n\ndef create_admin_user(email='admin@cullyautomation.com', password='admin123', full_name='System Administrator'):\n    \"\"\"Create admin user manually - useful for new database setup\"\"\"\n    try:\n        # Check if admin already exists\n        existing_admin = User.query.filter_by(email=email).first()\n        if existing_admin:\n            print(f\"Admin user {email} already exists\")\n            return existing_admin\n        \n        # Create new admin user\n        admin_user = User(\n            email=email,\n            full_name=full_name,\n            role='Admin',\n            status='Active'\n        )\n        admin_user.set_password(password)\n        db.session.add(admin_user)\n        db.session.commit()\n        \n        print(f\"✅ Admin user created successfully: {email}\")\n        print(f\"   Password: {password}\")\n        print(\"   ⚠️  Please change the password after first login!\")\n        return admin_user\n        \n    except Exception as e:\n        print(f\"❌ Error creating admin user: {e}\")\n        db.session.rollback()\n        return None\n\nclass ModuleSpec(db.Model):\n    __tablename__ = 'module_specs'\n\n    id = db.Column(db.Integer, primary_key=True)\n    company = db.Column(db.String(100), nullable=False)  # ABB, Siemens, etc.\n    model = db.Column(db.String(100), nullable=False)    # DI810, SM1231, etc.\n    description = db.Column(db.String(500), nullable=True)\n    digital_inputs = db.Column(db.Integer, default=0)\n    digital_outputs = db.Column(db.Integer, default=0)\n    analog_inputs = db.Column(db.Integer, default=0)\n    analog_outputs = db.Column(db.Integer, default=0)\n    voltage_range = db.Column(db.String(100), nullable=True)  # \"24 VDC\", \"0-10V\", etc.\n    current_range = db.Column(db.String(100), nullable=True)  # \"4-20mA\", etc.\n    resolution = db.Column(db.String(50), nullable=True)      # \"12-bit\", \"16-bit\", etc.\n    signal_type = db.Column(db.String(50), nullable=True)     # \"Digital\", \"Analog\", \"Mixed\"\n    rack_slot_convention = db.Column(db.String(100), nullable=True)  # Vendor-specific naming\n    datasheet_url = db.Column(db.String(500), nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    verified = db.Column(db.Boolean, default=False)  # Whether spec has been verified\n\n    # Unique constraint on company + model\n    __table_args__ = (db.UniqueConstraint('company', 'model', name='unique_company_model'),)\n\n    @classmethod\n    def find_or_create(cls, company, model):\n        \"\"\"Find existing module spec or create placeholder for web lookup\"\"\"\n        spec = cls.query.filter_by(company=company.upper(), model=model.upper()).first()\n        if not spec:\n            spec = cls(\n                company=company.upper(),\n                model=model.upper(),\n                verified=False\n            )\n            db.session.add(spec)\n            db.session.commit()\n        return spec\n\n    def get_total_channels(self):\n        \"\"\"Get total number of I/O channels\"\"\"\n        return (self.digital_inputs or 0) + (self.digital_outputs or 0) + \\\n               (self.analog_inputs or 0) + (self.analog_outputs or 0)\n\n    def to_dict(self):\n        return {\n            'company': self.company,\n            'model': self.model,\n            'description': self.description,\n            'digital_inputs': self.digital_inputs,\n            'digital_outputs': self.digital_outputs,\n            'analog_inputs': self.analog_inputs,\n            'analog_outputs': self.analog_outputs,\n            'voltage_range': self.voltage_range,\n            'current_range': self.current_range,\n            'resolution': self.resolution,\n            'signal_type': self.signal_type,\n            'total_channels': self.get_total_channels(),\n            'verified': self.verified\n        }\n\nclass Notification(db.Model):\n    __tablename__ = 'notifications'\n\n    id = db.Column(db.Integer, primary_key=True)\n    user_email = db.Column(db.String(120), nullable=False)  # Recipient\n    title = db.Column(db.String(200), nullable=False)\n    message = db.Column(db.Text, nullable=False)\n    type = db.Column(db.String(50), nullable=False)  # 'approval_request', 'status_update', 'completion', etc.\n    related_submission_id = db.Column(db.String(36), nullable=True)  # Link to report\n    read = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    action_url = db.Column(db.String(500), nullable=True)  # Optional action link\n\n    # Changed 'type' to 'notification_type' and 'related_submission_id' to 'submission_id' in to_dict for clarity\n    def to_dict(self):\n        \"\"\"Convert notification to dictionary\"\"\"\n        return {\n            'id': self.id,\n            'title': self.title,\n            'message': self.message,\n            'notification_type': self.type,\n            'read': self.read,\n            'created_at': self.created_at.isoformat() if self.created_at else None,\n            'action_url': self.action_url,\n            'submission_id': self.related_submission_id\n        }\n\n    @staticmethod\n    def create_notification(user_email, title, message, notification_type, submission_id=None, action_url=None):\n        \"\"\"Create a new notification for a user\"\"\"\n        notification = Notification(\n            user_email=user_email,\n            title=title,\n            message=message,\n            type=notification_type,\n            related_submission_id=submission_id,\n            action_url=action_url\n        )\n        db.session.add(notification)\n        db.session.commit()\n        return notification\n\n    @staticmethod\n    def get_recent_notifications(user_email, limit=10):\n        \"\"\"Get recent notifications for a user\"\"\"\n        return Notification.query.filter_by(user_email=user_email)\\\n                                .order_by(Notification.created_at.desc())\\\n                                .limit(limit).all()\n\n    @staticmethod\n    def get_unread_count(user_email):\n        \"\"\"Get count of unread notifications for a user\"\"\"\n        return Notification.query.filter_by(user_email=user_email, read=False).count()\n\n    def __repr__(self):\n        return f'<Notification {self.id}: {self.title}>'","size_bytes":19149},"test_imports.py":{"content":"\n#!/usr/bin/env python3\n\"\"\"\nTest script to check if all imports are working correctly\n\"\"\"\n\ndef test_imports():\n    print(\"🔍 Testing imports...\")\n    \n    try:\n        print(\"  ✓ Flask imports...\")\n        from flask import Flask, request, render_template, jsonify, redirect, url_for\n        from flask_wtf.csrf import CSRFProtect, generate_csrf\n        from flask_login import current_user\n        \n        print(\"  ✓ Config imports...\")\n        from config import Config\n        \n        print(\"  ✓ Models imports...\")\n        from models import db, init_db\n        \n        print(\"  ✓ Auth imports...\")\n        from auth import init_auth\n        \n        print(\"  ✓ Route imports...\")\n        from routes.main import main_bp\n        from routes.approval import approval_bp\n        from routes.status import status_bp\n        from routes.auth import auth_bp\n        from routes.dashboard import dashboard_bp\n        from routes.reports import reports_bp\n        from routes.notifications import notifications_bp\n        from routes.io_builder import io_builder_bp\n        \n        print(\"✅ All imports successful!\")\n        return True\n        \n    except ImportError as e:\n        print(f\"❌ Import failed: {e}\")\n        return False\n    except Exception as e:\n        print(f\"❌ Unexpected error: {e}\")\n        return False\n\nif __name__ == '__main__':\n    success = test_imports()\n    if not success:\n        print(\"\\n🔧 Please check your dependencies and file structure.\")\n        exit(1)\n    else:\n        print(\"\\n🚀 Ready to start the server!\")\n","size_bytes":1573},"utils.py":{"content":"import os\nimport json\nimport logging\nimport smtplib\nfrom email.message import EmailMessage\nfrom PIL import Image\nfrom docx import Document\nfrom docx.oxml import parse_xml\nfrom flask import current_app, url_for\nimport time\nimport re\nfrom werkzeug.utils import secure_filename\nimport uuid\nimport platform\nimport tempfile\nimport shutil\nfrom contextlib import contextmanager\nfrom datetime import datetime\n\n# Added get_unread_count from app.py to resolve circular import\ndef get_unread_count(user_email=None):\n    \"\"\"Get unread notifications count for a user\"\"\"\n    try:\n        from models import Notification\n        from flask_login import current_user\n\n        if not user_email and current_user.is_authenticated:\n            user_email = current_user.email\n\n        if not user_email:\n            return 0\n\n        return Notification.query.filter_by(\n            user_email=user_email,\n            read=False\n        ).count()\n    except Exception as e:\n        if current_app:\n            current_app.logger.warning(f\"Could not get unread count: {e}\")\n        return 0\n\n# Windows-specific imports (only available on Windows)\ntry:\n    import pythoncom\n    import win32com.client\n    WINDOWS_COM_AVAILABLE = True\nexcept ImportError:\n    WINDOWS_COM_AVAILABLE = False\n\nlogger = logging.getLogger(__name__)\n\n# Cross-platform file locking\n@contextmanager\ndef file_lock(filename, mode='r', timeout=30, delay=0.05):\n    \"\"\"\n    A cross-platform file locking context manager that works on both Windows and Unix\n\n    Args:\n        filename: The file to lock\n        mode: File open mode ('r' for read, 'w' for write)\n        timeout: Maximum time to wait for lock (seconds)\n        delay: Time between retry attempts (seconds)\n\n    Yields:\n        The opened file object\n    \"\"\"\n    if platform.system() == 'Windows':\n        import msvcrt\n\n        is_exclusive = 'w' in mode\n        file_mode = 'r+' if is_exclusive else 'r'\n\n        # Make sure the file exists\n        if not os.path.exists(filename) and is_exclusive:\n            with open(filename, 'w') as f:\n                f.write('{}')\n\n        # Open and try to lock the file\n        f = open(filename, file_mode)\n\n\n        start_time = time.time()\n\n        while True:\n            try:\n                # Lock from current position to end of file\n                lock_mode = msvcrt.LK_NBLCK\n                if is_exclusive:\n                    lock_mode |= msvcrt.LK_LOCK\n                else:\n                    lock_mode |= msvcrt.LK_RLCK\n\n                msvcrt.locking(f.fileno(), lock_mode, 0x7fffffff)\n                break  # Lock acquired\n            except IOError:\n                # Could not acquire lock, wait and retry\n                if time.time() - start_time > timeout:\n                    f.close()\n                    raise TimeoutError(f\"Could not acquire lock on {filename} within {timeout} seconds\")\n\n                time.sleep(delay)\n\n        try:\n            yield f\n        finally:\n            # Unlock and close the file\n            try:\n                f.seek(0)\n                msvcrt.locking(f.fileno(), msvcrt.LK_UNLCK, 0x7fffffff)\n            except IOError:\n                # Not locked\n                pass\n            f.close()\n\n    else:\n        # Unix-like systems\n        import fcntl\n\n        is_exclusive = 'w' in mode\n        file_mode = 'r+' if is_exclusive else 'r'\n\n        # Make sure the file exists\n        if not os.path.exists(filename) and is_exclusive:\n            with open(filename, 'w') as f:\n                f.write('{}')\n\n        # Open and try to lock the file\n        f = open(filename, file_mode)\n\n\n        start_time = time.time()\n\n        while True:\n            try:\n                if is_exclusive:\n                    fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)\n                else:\n                    fcntl.flock(f, fcntl.LOCK_SH | fcntl.LOCK_NB)\n                break  # Lock acquired\n            except IOError:\n                # Could not acquire lock, wait and retry\n                if time.time() - start_time > timeout:\n                    f.close()\n                    raise TimeoutError(f\"Could not acquire lock on {filename} within {timeout} seconds\")\n\n                time.sleep(delay)\n\n        try:\n            yield f\n        finally:\n            # Unlock and close the file\n            fcntl.flock(f, fcntl.LOCK_UN)\n            f.close()\n\n\ndef create_approval_notification(approver_email, submission_id, stage, document_title):\n    \"\"\"Create notification for approval request\"\"\"\n    from models import Notification\n    from flask import url_for\n\n    title = f\"Approval Required - Stage {stage}\"\n    message = f\"SAT Report '{document_title}' requires your approval.\"\n    action_url = url_for('approval.approve_submission', submission_id=submission_id, stage=stage, _external=True)\n\n    return Notification.create_notification(\n        user_email=approver_email,\n        title=title,\n        message=message,\n        notification_type='approval_request',\n        submission_id=submission_id,\n        action_url=action_url\n    )\n\ndef create_status_update_notification(user_email, submission_id, status, document_title, approver_name=\"\"):\n    \"\"\"Create notification for status update\"\"\"\n    from models import Notification\n    from flask import url_for\n\n    if status == \"approved\":\n        title = \"Report Approved\"\n        message = f\"Your SAT Report '{document_title}' has been approved\"\n        if approver_name:\n            message += f\" by {approver_name}\"\n    elif status == \"rejected\":\n        title = \"Report Rejected\"\n        message = f\"Your SAT Report '{document_title}' has been rejected\"\n        if approver_name:\n            message += f\" by {approver_name}\"\n    else:\n        title = \"Status Update\"\n        message = f\"Your SAT Report '{document_title}' status has been updated to {status}\"\n\n    action_url = url_for('status.view_status', submission_id=submission_id, _external=True)\n\n    return Notification.create_notification(\n        user_email=user_email,\n        title=title,\n        message=message,\n        notification_type='status_update',\n        submission_id=submission_id,\n        action_url=action_url\n    )\n\ndef create_completion_notification(user_email, submission_id, document_title):\n    \"\"\"Create notification for report completion\"\"\"\n    from models import Notification\n    from flask import url_for\n\n    title = \"Report Completed\"\n    message = f\"Your SAT Report '{document_title}' has been fully approved and is ready for download.\"\n    action_url = url_for('status.download_report', submission_id=submission_id, _external=True)\n\n    return Notification.create_notification(\n        user_email=user_email,\n        title=title,\n        message=message,\n        notification_type='completion',\n        submission_id=submission_id,\n        action_url=action_url\n    )\n\ndef create_new_submission_notification(admin_emails, submission_id, document_title, submitter_email):\n    \"\"\"Create notification for new submission (for admins)\"\"\"\n    from models import Notification\n    from flask import url_for\n\n    title = \"New Report Submitted\"\n    message = f\"New SAT Report '{document_title}' submitted by {submitter_email}\"\n    action_url = url_for('status.view_status', submission_id=submission_id, _external=True)\n\n    notifications = []\n    for admin_email in admin_emails:\n        notification = Notification.create_notification(\n            user_email=admin_email,\n            title=title,\n            message=message,\n            notification_type='new_submission',\n            submission_id=submission_id,\n            action_url=action_url\n        )\n        notifications.append(notification)\n\n    return notifications\n\n# Updated function to use the new file lock\ndef load_submissions():\n    \"\"\"Load submissions data with improved file locking to prevent race conditions\"\"\"\n    from flask import current_app\n\n    submissions_file = current_app.config['SUBMISSIONS_FILE']\n\n    # If file doesn't exist, return empty dict\n    if not os.path.exists(submissions_file):\n        return {}\n\n    try:\n        with file_lock(submissions_file, mode='r') as f:\n            try:\n                data = json.load(f)\n                return data\n            except json.JSONDecodeError as e:\n                logger.error(f\"Error decoding JSON in {submissions_file}: {e}\")\n                # Return empty dict on decode error rather than potentially corrupting data\n                return {}\n    except TimeoutError as e:\n        logger.error(f\"Timeout acquiring read lock on submissions file: {e}\")\n        return {}\n    except Exception as e:\n        logger.error(f\"Unexpected error loading submissions: {e}\", exc_info=True)\n        return {}\ndef save_submissions(submissions):\n    \"\"\"Save submissions data with improved file locking\"\"\"\n    from flask import current_app\n\n    submissions_file = current_app.config['SUBMISSIONS_FILE']\n\n    try:\n        # Create parent directory if needed\n        os.makedirs(os.path.dirname(submissions_file), exist_ok=True)\n\n        # Use a temporary file for atomic write\n        temp_dir = os.path.dirname(submissions_file)\n        fd, temp_path = tempfile.mkstemp(dir=temp_dir, prefix=os.path.basename(submissions_file) + '.')\n\n        # Write to temp file first\n        with os.fdopen(fd, 'w') as f:\n            json.dump(submissions, f, indent=2)\n\n        # Now use file lock to replace the original file atomically\n        with file_lock(submissions_file, mode='w') as f:\n            # Read the existing content to back up if needed\n            try:\n                f.seek(0)\n                old_data = f.read()\n            except:\n                old_data = \"{}\"\n\n            try:\n                # Replace file content with our temp file content\n                with open(temp_path, 'r') as temp_f:\n                    new_data = temp_f.read()\n\n                # Truncate and write\n                f.seek(0)\n                f.truncate()\n                f.write(new_data)\n                f.flush()\n                os.fsync(f.fileno())\n\n            except Exception as e:\n                # On error, try to restore old content\n                logger.error(f\"Error during file write, attempting to restore: {e}\")\n                f.seek(0)\n                f.truncate()\n                f.write(old_data)\n                f.flush()\n                raise\n\n        # Remove the temp file\n        try:\n            os.unlink(temp_path)\n        except:\n            pass\n\n        return True\n\n    except TimeoutError as e:\n        logger.error(f\"Timeout acquiring write lock on submissions file: {e}\")\n        return False\n    except Exception as e:\n        logger.error(f\"Error saving submissions: {e}\", exc_info=True)\n        return False\n\n# --------------------\n# Email functions\ndef send_email(to_email, subject, html_content, text_content=None):\n    \"\"\"Send an HTML email with plain text fallback\"\"\"\n    if not to_email:\n        logger.warning(\"No recipient email provided\")\n        return False\n\n    # Log attempt\n    logger.info(f\"Attempting to send email to {to_email}\")\n\n    # Get email configuration\n    smtp_server = current_app.config['SMTP_SERVER']\n    smtp_port = current_app.config['SMTP_PORT']\n    smtp_username = current_app.config['SMTP_USERNAME']\n    smtp_password = current_app.config['SMTP_PASSWORD']\n\n    if not smtp_username or not smtp_password:\n        logger.error(\"SMTP credentials are not configured\")\n        return False\n\n    # Create message\n    msg = EmailMessage()\n    msg[\"Subject\"] = subject\n    msg[\"From\"] = current_app.config['DEFAULT_SENDER'] or smtp_username\n    msg[\"To\"] = to_email\n    msg.set_content(text_content or html_content.replace(\"<br>\", \"\\n\").replace(\"<p>\", \"\").replace(\"</p>\", \"\\n\\n\"))\n    msg.add_alternative(html_content, subtype=\"html\")\n\n    retries = 3\n    for i in range(retries):\n        try:\n            logger.info(f\"Email send attempt {i+1}/{retries}\")\n            with smtplib.SMTP(smtp_server, smtp_port, timeout=30) as server:\n                server.set_debuglevel(1)  # Enable detailed debugging\n                server.ehlo()\n                server.starttls()\n                server.ehlo()\n                server.login(smtp_username, smtp_password)\n                server.send_message(msg)\n            logger.info(f\"Email sent successfully to {to_email}\")\n            return True\n        except Exception as e:\n            logger.error(f\"Email attempt {i+1}/{retries} failed: {str(e)}\", exc_info=True)\n            if i == retries - 1:\n                return False\n            time.sleep(2)\n    return False\n\ndef create_approval_notification(approver_email, submission_id, stage, document_title):\n    \"\"\"Create notification for approval request\"\"\"\n    try:\n        from models import Notification\n        from flask import url_for\n\n        title = f\"Approval Required - Stage {stage}\"\n        message = f\"SAT Report '{document_title}' requires your approval.\"\n        action_url = url_for('approval.approve_submission', submission_id=submission_id, stage=stage, _external=True)\n\n        return Notification.create_notification(\n            user_email=approver_email,\n            title=title,\n            message=message,\n            notification_type='approval_request',\n            submission_id=submission_id,\n            action_url=action_url\n        )\n    except Exception as e:\n        current_app.logger.error(f\"Failed to create approval notification: {e}\")\n        return False\n\ndef create_status_update_notification(user_email, submission_id, status, document_title, approver_name):\n    \"\"\"Create notification for status updates\"\"\"\n    try:\n        from models import Notification\n\n        title = f\"Report {status.title()}\"\n        message = f\"Your SAT Report '{document_title}' has been {status} by {approver_name}.\"\n\n        return Notification.create_notification(\n            user_email=user_email,\n            title=title,\n            message=message,\n            notification_type='status_update',\n            submission_id=submission_id\n        )\n    except Exception as e:\n        current_app.logger.error(f\"Failed to create status update notification: {e}\")\n        return False\n\ndef create_completion_notification(user_email, submission_id, document_title):\n    \"\"\"Create notification for completion\"\"\"\n    try:\n        from models import Notification\n\n        title = \"Report Completed\"\n        message = f\"Your SAT Report '{document_title}' has been fully approved and completed.\"\n\n        return Notification.create_notification(\n            user_email=user_email,\n            title=title,\n            message=message,\n            notification_type='completion',\n            submission_id=submission_id\n        )\n    except Exception as e:\n        current_app.logger.error(f\"Failed to create completion notification: {e}\")\n        return False\n\ndef create_new_submission_notification(admin_emails, submission_id, document_title, submitter_email):\n    \"\"\"Create new submission notification for admins\"\"\"\n    try:\n        from models import Notification\n\n        for admin_email in admin_emails:\n            title = \"New Report Submitted\"\n            message = f\"New SAT Report '{document_title}' submitted by {submitter_email}.\"\n\n            Notification.create_notification(\n                user_email=admin_email,\n                title=title,\n                message=message,\n                notification_type='new_submission',\n                submission_id=submission_id\n            )\n        return True\n    except Exception as e:\n        current_app.logger.error(f\"Failed to create submission notification: {e}\")\n        return False\n\ndef send_edit_link(user_email, submission_id):\n    \"\"\"Send an email with the edit link for a submission\"\"\"\n    if not user_email:\n        return False\n\n    edit_url = url_for(\"main.edit_submission\", submission_id=submission_id, _external=True)\n    status_url = url_for(\"status.view_status\", submission_id=submission_id, _external=True)\n\n    subject = \"Your SAT Report Edit Link\"\n    html_content = f\"\"\"\n    <html>\n    <body>\n        <h1>SAT Report System</h1>\n        <p>Thank you for submitting your SAT report. You can edit your submission by clicking the link below:</p>\n        <p><a href=\"{edit_url}\">{edit_url}</a></p>\n        <p>You can also check the status of your submission at any time:</p>\n        <p><a href=\"{status_url}\">{status_url}</a></p>\n        <p>This edit link will remain active until the first approval stage is complete.</p>\n    </body>\n    </html>\n    \"\"\"\n\n    return send_email(user_email, subject, html_content)\n\ndef send_approval_link(approver_email, submission_id, stage):\n    \"\"\"Send an email with the approval link for a submission\"\"\"\n    if not approver_email:\n        logger.warning(\"No approver email provided\")\n        return False\n\n    approval_url = url_for(\"approval.approve_submission\", submission_id=submission_id, stage=stage, _external=True)\n    status_url = url_for(\"status.view_status\", submission_id=submission_id, _external=True)\n\n    # Find the approver title\n    approver_title = \"Approver\"\n    for approver in current_app.config['DEFAULT_APPROVERS']:\n        if approver['stage'] == stage:\n            approver_title = approver.get('title', 'Approver')\n            break\n\n    subject = f\"Approval required for SAT Report (Stage {stage} - {approver_title})\"\n    html_content = f\"\"\"\n    <html>\n    <body>\n        <h1>SAT Report Approval Request</h1>\n        <p>A SAT report requires your approval as the {approver_title}.</p>\n        <p>Please review and approve the report by clicking the link below:</p>\n        <p><a href=\"{approval_url}\">{approval_url}</a></p>\n        <p>This is approval stage {stage} of the workflow.</p>\n        <p>You can also view the current status of this submission:</p>\n        <p><a href=\"{status_url}\">{status_url}</a></p>\n    </body>\n    </html>\n    \"\"\"\n\n    return send_email(approver_email, subject, html_content)\n\ndef notify_completion(user_email, submission_id):\n    \"\"\"Notify the submitter that all approvals are complete\"\"\"\n    if not user_email:\n        return False\n\n    download_url = url_for(\"status.download_report\", submission_id=submission_id, _external=True)\n    status_url = url_for(\"status.view_status\", submission_id=submission_id, _external=True)\n\n    subject = \"Your SAT Report has been fully approved\"\n    html_content = f\"\"\"\n    <html>\n    <body>\n        <h1>SAT Report Fully Approved</h1>\n        <p>Great news! Your SAT report has been fully approved by all required parties.</p>\n        <p>You can download the final approved report here:</p>\n        <p><a href=\"{download_url}\">{download_url}</a></p>\n        <p>View the approval details:</p>\n        <p><a href=\"{status_url}\">{status_url}</a></p>\n        <p>Thank you for using the SAT Report System.</p>\n    </body>\n    </html>\n    \"\"\"\n\n    return send_email(user_email, subject, html_content)\n\n# --------------------\n# DOCX processing functions\ndef enable_autofit_tables(docx_path, target_keywords):\n    \"\"\"Make tables auto-fit their content based on keyword matching in the first row\"\"\"\n    try:\n        doc = Document(docx_path)\n        modified = False\n\n        for table in doc.tables:\n            if not table.rows:\n                continue\n\n            first_row_text = \" \".join(cell.text.lower() for cell in table.rows[0].cells)\n            if any(keyword in first_row_text for keyword in target_keywords):\n                for row in table.rows:\n                    for cell in row.cells:\n                        tc = cell._tc\n                        tcPr = tc.get_or_add_tcPr()\n                        auto_width = parse_xml(\n                            r'<w:tcW w:w=\"0\" w:w=\"0\" w:type=\"auto\" xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"/>'\n                        )\n                        tcPr.append(auto_width)\n                        tr = row._tr\n                        trPr = tr.get_or_add_trPr()\n                        trHeight = parse_xml(\n                            r'<w:trHeight w:val=\"0\" w:hRule=\"auto\" xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"/>'\n                        )\n                        trPr.append(trHeight)\n                modified = True\n\n        if modified:\n            doc.save(docx_path)\n            logger.info(f\"Table auto-fit applied to {docx_path}\")\n\n    except Exception as e:\n        logger.error(f\"Error applying table auto-fit: {e}\", exc_info=True)\n        raise\n\ndef update_toc(doc_path):\n    \"\"\"Update the table of contents in a Word document using COM automation\"\"\"\n    if not WINDOWS_COM_AVAILABLE:\n        logger.warning(\"Windows COM automation not available - skipping TOC update\")\n        return\n\n    pythoncom.CoInitialize()  # Initialize COM for the thread\n    try:\n        word = win32com.client.Dispatch(\"Word.Application\")\n        word.Visible = False\n        abs_doc_path = os.path.abspath(doc_path)\n        doc_word = word.Documents.Open(abs_doc_path)\n        doc_word.Fields.Update()\n        doc_word.Save()\n        doc_word.Close()\n        word.Quit()\n        logger.info(f\"TOC updated in {doc_path}\")\n    except Exception as e:\n        logger.error(f\"Error updating TOC: {e}\", exc_info=True)\n        raise\n    finally:\n        pythoncom.CoUninitialize()\n\ndef convert_to_pdf(docx_path):\n    \"\"\"Convert a DOCX file to PDF using Word automation\"\"\"\n    if not current_app.config.get('ENABLE_PDF_EXPORT', False):\n        logger.warning(\"PDF export is disabled in configuration\")\n        return None\n\n    if not WINDOWS_COM_AVAILABLE:\n        logger.warning(\"Windows COM automation not available - PDF conversion not supported on this platform\")\n        return None\n\n    pythoncom.CoInitialize()  # Initialize COM for the thread\n    try:\n        word = win32com.client.Dispatch(\"Word.Application\")\n        word.Visible = False\n        abs_doc_path = os.path.abspath(docx_path)\n        pdf_path = abs_doc_path.replace('.docx', '.pdf')\n\n        doc = word.Documents.Open(abs_doc_path)\n        doc.SaveAs(pdf_path, FileFormat=17)  # 17 = PDF format\n        doc.Close()\n        word.Quit()\n\n        logger.info(f\"PDF created: {pdf_path}\")\n        return pdf_path\n    except Exception as e:\n        logger.error(f\"Error converting to PDF: {e}\", exc_info=True)\n        return None\n    finally:\n        pythoncom.CoUninitialize()\n\n# --------------------\n# Form processing helpers\ndef process_table_rows(form_data, field_mappings):\n    \"\"\"Process multiple rows of table data from form fields.\n\n    Args:\n        form_data: The form data from request.form\n        field_mappings: A dictionary mapping form field names to output field names\n\n    Returns:\n        A list of dictionaries, each representing a row of data\n    \"\"\"\n    # Get the first field name to determine number of rows\n    first_field = list(field_mappings.keys())[0]\n    values = form_data.getlist(first_field)\n    num_rows = len(values)\n\n    rows = []\n    for i in range(num_rows):\n        row = {}\n        for form_field, output_field in field_mappings.items():\n            values = form_data.getlist(form_field)\n            row[output_field] = values[i].strip() if i < len(values) else \"\"\n\n        # Only include rows where at least one field has a value\n        if any(value for value in row.values()):\n            rows.append(row)\n\n    # If no rows, add a blank row as placeholder\n    if not rows:\n        row = {output_field: \"\" for output_field in field_mappings.values()}\n        rows.append(row)\n\n    return rows\n\ndef handle_image_removals(form_data, field_name, url_list):\n    \"\"\"Remove any flagged images from the filesystem and URL list\"\"\"\n    if not form_data.get(field_name):\n        return\n\n    for url in filter(None, form_data.get(field_name, \"\").split(\",\")):\n        try:\n            # Parse the URL to get the file path\n            rel_path = url.replace(url_for('main.index', _external=True).rstrip(\"/\"), \"\")\n            fs_path = os.path.join(current_app.root_path, rel_path.lstrip(\"/\"))\n\n            # Remove the file if it exists\n            if os.path.exists(fs_path):\n                os.remove(fs_path)\n                logger.info(f\"Removed file: {fs_path}\")\n\n            # Remove the URL from the list\n            if url in url_list:\n                url_list.remove(url)\n        except Exception as e:\n            logger.error(f\"Error removing file {url}: {e}\")\n\ndef setup_approval_workflow(submission_id, submissions, approver_emails=None):\n    \"\"\"Setup or retrieve the approval workflow for a submission\"\"\"\n    sub = submissions.get(submission_id, {})\n\n    # If this is a new submission or missing approval stages\n    if \"approvals\" not in sub:\n        # Initialize with provided approver emails or default ones\n        approvals = []\n        default_approvers = current_app.config['DEFAULT_APPROVERS']\n\n        for i, approver in enumerate(default_approvers):\n            email = approver_emails[i] if approver_emails and i < len(approver_emails) and approver_emails[i] else approver[\"approver_email\"]\n            approvals.append({\n                \"stage\": approver[\"stage\"],\n                \"approver_email\": email,\n                \"title\": approver.get(\"title\", \"Approver\"),\n                \"status\": \"pending\",\n                \"timestamp\": None,\n                \"signature\": None,\n                \"comment\": \"\"\n            })\n\n        # New submissions are editable until an approval occurs\n        locked = False\n    else:\n        # Get existing approvals\n        approvals = sub.get(\"approvals\", [])\n\n        # If approver emails are provided, update the existing approvals\n        if approver_emails:\n            for i, approval in enumerate(approvals):\n                if i < len(approver_emails) and approver_emails[i]:\n                    # Only update if not already approved\n                    if approval[\"status\"] == \"pending\":\n                        approval[\"approver_email\"] = approver_emails[i]\n\n        # If for some reason approvals is still empty, initialize it\n        if not approvals:\n            # Use first approver email if provided, otherwise default\n            email = approver_emails[0] if approver_emails and len(approver_emails) > 0 and approver_emails[0] else current_app.config['DEFAULT_APPROVERS'][0][\"approver_email\"]\n            approvals = [{\n                \"stage\": 1,\n                \"approver_email\": email,\n                \"title\": current_app.config['DEFAULT_APPROVERS'][0].get(\"title\", \"Approver\"),\n                \"status\": \"pending\",\n                \"timestamp\": None,\n                \"signature\": None,\n                \"comment\": \"\"\n            }]\n\n        # If any approval stage has been approved beyond stage 1, lock editing\n        locked = any(a.get(\"status\") == \"approved\" and a.get(\"stage\") > 1 for a in approvals)\n\n    return approvals, locked\n\ndef setup_approval_workflow_db(report, approver_emails=None):\n    \"\"\"Setup or retrieve the approval workflow for a database report\"\"\"\n    import json\n\n    # Get existing approvals from database\n    existing_approvals = json.loads(report.approvals_json) if report.approvals_json else []\n\n    # If this is a new submission or missing approval stages\n    if not existing_approvals:\n        # Initialize with provided approver emails or default ones\n        approvals = []\n        default_approvers = current_app.config['DEFAULT_APPROVERS']\n\n        for i, approver in enumerate(default_approvers):\n            email = approver_emails[i] if approver_emails and i < len(approver_emails) and approver_emails[i] else approver[\"approver_email\"]\n            approvals.append({\n                \"stage\": approver[\"stage\"],\n                \"approver_email\": email,\n                \"title\": approver.get(\"title\", \"Approver\"),\n                \"status\": \"pending\",\n                \"timestamp\": None,\n                \"signature\": None,\n                \"comment\": \"\"\n            })\n\n        # New submissions are editable until an approval occurs\n        locked = False\n    else:\n        # Get existing approvals\n        approvals = existing_approvals.copy()\n\n        # If this is a resubmission (version increment), reset approval status\n        version_changed = report.version and report.version != 'R0'\n        if version_changed:\n            for approval in approvals:\n                if approval.get(\"status\") != \"approved\":\n                    approval[\"status\"] = \"pending\"\n                    approval[\"timestamp\"] = None\n                    approval[\"signature\"] = None\n                    approval[\"comment\"] = \"\"\n\n        # If approver emails are provided, update the existing approvals\n        if approver_emails:\n            for i, approval in enumerate(approvals):\n                if i < len(approver_emails) and approver_emails[i]:\n                    # Only update if not already approved\n                    if approval[\"status\"] == \"pending\":\n                        approval[\"approver_email\"] = approver_emails[i]\n\n        # If for some reason approvals is still empty, initialize it\n        if not approvals:\n            # Use first approver email if provided, otherwise default\n            email = approver_emails[0] if approver_emails and len(approver_emails) > 0 and approver_emails[0] else current_app.config['DEFAULT_APPROVERS'][0][\"approver_email\"]\n            approvals = [{\n                \"stage\": 1,\n                \"approver_email\": email,\n                \"title\": current_app.config['DEFAULT_APPROVERS'][0].get(\"title\", \"Approver\"),\n                \"status\": \"pending\",\n                \"timestamp\": None,\n                \"signature\": None,\n                \"comment\": \"\"\n            }]\n\n        # If any approval stage has been approved beyond stage 1, lock editing\n        locked = any(a.get(\"status\") == \"approved\" and a.get(\"stage\") > 1 for a in approvals)\n\n    return approvals, locked\n\n\n# Removed duplicate allowed_file and replaced with the one from the edited snippet.\n# Removed duplicate secure_filename usage as it's now part of the edited snippet.\n\ndef save_uploaded_file(file, directory, filename=None):\n    \"\"\"Save an uploaded file with a unique name\"\"\"\n    if not file or not file.filename:\n        return None\n\n    # Use the provided allowed_file function\n    if not allowed_file(file.filename):\n        logger.warning(f\"File type not allowed: {file.filename}\")\n        return None\n\n    if filename is None:\n        # Generate a unique filename\n        original_filename = secure_filename(file.filename)\n        filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n\n    filepath = os.path.join(directory, filename)\n    file.save(filepath)\n    return filepath, filename\n\n# Add this function to your utils.py file\n\ndef send_client_final_document(client_email, submission_id, document_title):\n    \"\"\"Send an email to the client with the final approved document\"\"\"\n    if not client_email:\n        logger.warning(\"No client email provided\")\n        return False\n\n    download_url = url_for(\"status.download_report\", submission_id=submission_id, _external=True)\n    pdf_url = url_for(\"status.download_pdf\", submission_id=submission_id, _external=True)\n    status_url = url_for(\"status.view_status\", submission_id=submission_id, _external=True)\n\n    subject = f\"SAT Report Approved: {document_title}\"\n    html_content = f\"\"\"\n    <html>\n    <body>\n        <h1>SAT Report Approval Complete</h1>\n        <p>The SAT report \"{document_title}\" has been fully approved and is now ready for your review.</p>\n        <p>You can download the approved report using the links below:</p>\n        <ul>\n            <li><a href=\"{download_url}\">Download DOCX Version</a></li>\n            <li><a href=\"{pdf_url}\">Download PDF Version</a></li>\n        </ul>\n        <p>You can also view the full approval details here:</p>\n        <p><a href=\"{status_url}\">View Approval Status</a></p>\n        <p>Thank you for using the SAT Report System.</p>\n    </body>\n    </html>\n    \"\"\"\n\n    return send_email(client_email, subject, html_content)\n\ndef format_timestamp(timestamp, format_str=\"%d-%m-%Y %H:%M\"):\n    \"\"\"\n    Consistently format timestamps throughout the application\n\n    Args:\n        timestamp: ISO format timestamp string\n        format_str: Format string for output (default: DD-MM-YYYY HH:MM)\n\n    Returns:\n        Formatted date string or empty string if invalid\n    \"\"\"\n    if not timestamp:\n        return \"\"\n\n    try:\n        # Try ISO format first\n        try:\n\n            date_obj = datetime.fromisoformat(timestamp)\n            return date_obj.strftime(format_str)\n        except ValueError:\n            pass\n\n        # Try parsing as string with various formats\n        formats_to_try = [\n            \"%Y-%m-%dT%H:%M:%S.%f\",  # ISO format with microseconds\n            \"%Y-%m-%dT%H:%M:%S\",     # ISO format without microseconds\n            \"%Y-%m-%d %H:%M:%S\",     # Standard datetime format\n            \"%Y-%m-%d\",              # Just date\n        ]\n\n\n        for fmt in formats_to_try:\n            try:\n                date_obj = datetime.strptime(timestamp, fmt)\n                return date_obj.strftime(format_str)\n            except ValueError:\n                continue\n\n        # If we get here, no format worked\n        return timestamp  # Return original as fallback\n\n    except Exception as e:\n        logger.error(f\"Error formatting timestamp {timestamp}: {e}\")\n        return timestamp  # Return original as fallback\n\n\ndef get_current_timestamp():\n    \"\"\"\n    Get current time as ISO format timestamp string\n\n    Returns:\n        Current timestamp in ISO format\n    \"\"\"\n\n    return datetime.now().isoformat()\n\n\ndef date_diff_days(timestamp1, timestamp2=None):\n    \"\"\"\n    Calculate difference in days between two timestamps\n\n    Args:\n        timestamp1: First timestamp (ISO format)\n        timestamp2: Second timestamp (ISO format, defaults to now if None)\n\n    Returns:\n        Number of days between timestamps, or None if invalid\n    \"\"\"\n    if not timestamp1:\n        return None\n\n    try:\n\n        # Parse first timestamp\n        date1 = datetime.fromisoformat(timestamp1)\n\n        # Parse second timestamp or use now\n        if timestamp2:\n            date2 = datetime.fromisoformat(timestamp2)\n        else:\n            date2 = datetime.now()\n\n        # Calculate difference in days\n        delta = date2 - date1\n        return delta.days\n\n    except Exception as e:\n        logger.error(f\"Error calculating date difference: {e}\")\n        return None\n\ndef safe_file_operation(operation_func, *args, **kwargs):\n    \"\"\"\n    Execute a file operation with proper error handling\n\n    Args:\n        operation_func: Function to execute (e.g., open, write, etc.)\n        *args, **kwargs: Arguments to pass to the function\n\n    Returns:\n        Tuple of (success, result/error_message)\n    \"\"\"\n    try:\n        result = operation_func(*args, **kwargs)\n        return True, result\n    except FileNotFoundError as e:\n        logger.error(f\"File not found: {e}\")\n        return False, f\"Required file could not be found: {str(e)}\"\n    except PermissionError as e:\n        logger.error(f\"Permission denied: {e}\")\n        return False, f\"Permission denied for file operation: {str(e)}\"\n    except IsADirectoryError as e:\n        logger.error(f\"Is a directory error: {e}\")\n        return False, f\"Expected a file but found a directory: {str(e)}\"\n    except IOError as e:\n        logger.error(f\"IO error: {e}\")\n        return False, f\"Input/output error during file operation: {str(e)}\"\n    except Exception as e:\n        logger.error(f\"Unexpected error in file operation: {e}\", exc_info=True)\n        return False, f\"Unexpected error: {str(e)}\"\n\ndef ensure_directory(directory_path):\n    \"\"\"\n    Ensure a directory exists with proper error handling\n\n    Args:\n        directory_path: Path to ensure exists\n\n    Returns:\n        Tuple of (success, error_message)\n    \"\"\"\n    try:\n        os.makedirs(directory_path, exist_ok=True)\n        return True, None\n    except PermissionError:\n        error_msg = f\"Permission denied when creating directory: {directory_path}\"\n        logger.error(error_msg)\n        return False, error_msg\n    except OSError as e:\n        error_msg = f\"Error creating directory {directory_path}: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n\ndef safe_save_file(file_obj, save_path):\n    \"\"\"\n    Safely save a file with proper error handling\n\n    Args:\n        file_obj: File object (e.g., from request.files)\n        save_path: Path where to save the file\n\n    Returns:\n        Tuple of (success, filepath or error_message)\n    \"\"\"\n    try:\n        # Ensure directory exists\n        directory = os.path.dirname(save_path)\n        success, error = ensure_directory(directory)\n        if not success:\n            return False, error\n\n        # Save file\n        file_obj.save(save_path)\n        return True, save_path\n    except Exception as e:\n        error_msg = f\"Error saving file to {save_path}: {str(e)}\"\n        logger.error(error_msg, exc_info=True)\n        return False, error_msg\n\ndef safe_delete_file(file_path):\n    \"\"\"\n    Safely delete a file with proper error handling\n\n    Args:\n        file_path: Path of file to delete\n\n    Returns:\n        Tuple of (success, error_message)\n    \"\"\"\n    if not os.path.exists(file_path):\n        return True, None  # File doesn't exist, so no need to delete\n\n    try:\n        os.remove(file_path)\n        return True, None\n    except PermissionError:\n        error_msg = f\"Permission denied when deleting file: {file_path}\"\n        logger.error(error_msg)\n        return False, error_msg\n    except OSError as e:\n        error_msg = f\"Error deleting file {file_path}: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n\ndef safe_open_file(file_path, mode='r', encoding=None):\n    \"\"\"\n    Safely open a file with proper error handling\n\n    Args:\n        file_path: Path of file to open\n        mode: Open mode ('r', 'w', etc.)\n        encoding: File encoding (default: None)\n\n    Returns:\n        Tuple of (success, file_object or error_message)\n    \"\"\"\n    try:\n        file_obj = open(file_path, mode, encoding=encoding)\n        return True, file_obj\n    except FileNotFoundError:\n        error_msg = f\"File not found: {file_path}\"\n        logger.error(error_msg)\n        return False, error_msg\n    except PermissionError:\n        error_msg = f\"Permission denied when opening file: {file_path}\"\n        logger.error(error_msg)\n        return False, error_msg\n    except IOError as e:\n        error_msg = f\"IO error opening file {file_path}: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n    except Exception as e:\n        error_msg = f\"Unexpected error opening file {file_path}: {str(e)}\"\n        logger.error(error_msg, exc_info=True)\n        return False, error_msg\n\ndef generate_sat_report(data, output_path, template_path=\"templates/SAT_Template.docx\"):\n    \"\"\"\n    Generate SAT report from form data using Word template\n\n    Args:\n        data: Form data dictionary containing all report fields\n        output_path: Path where to save the generated report\n        template_path: Path to the Word template file\n\n    Returns:\n        Tuple of (success, filepath or error_message)\n    \"\"\"\n    try:\n        from docx import Document\n        import os\n\n        # Ensure output directory exists\n        output_dir = os.path.dirname(output_path)\n        success, error = ensure_directory(output_dir)\n        if not success:\n            return False, error\n\n        # Load template\n        if not os.path.exists(template_path):\n            return False, f\"Template file not found: {template_path}\"\n\n        doc = Document(template_path)\n\n        # Replace placeholders in the document\n        context = data.get('context', {})\n\n        # Replace text in paragraphs\n        for paragraph in doc.paragraphs:\n            for key, value in context.items():\n                if f\"{{{key}}}\" in paragraph.text:\n                    paragraph.text = paragraph.text.replace(f\"{{{key}}}\", str(value or ''))\n\n        # Replace text in tables\n        for table in doc.tables:\n            for row in table.rows:\n                for cell in row.cells:\n                    for paragraph in cell.paragraphs:\n                        for key, value in context.items():\n                            if f\"{{{key}}}\" in paragraph.text:\n                                paragraph.text = paragraph.text.replace(f\"{{{key}}}\", str(value or ''))\n\n        # Save the document\n        doc.save(output_path)\n        logger.info(f\"SAT report generated successfully: {output_path}\")\n        return True, output_path\n\n    except Exception as e:\n        error_msg = f\"Error generating SAT report: {str(e)}\"\n        logger.error(error_msg, exc_info=True)\n        return False, error_msg\n\ndef get_safe_output_path(base_path, filename):\n    \"\"\"\n    Get a safe output path that ensures the directory exists and is writable.\n    Falls back to temp directory if the original location is not writable.\n\n    Args:\n        base_path (str): The base directory path\n        filename (str): The filename to save\n\n    Returns:\n        str: A safe path where the file can be written\n    \"\"\"\n    import os\n    import tempfile\n    import datetime\n\n    # First attempt: Try the specified directory\n    try:\n        os.makedirs(base_path, exist_ok=True)\n        # Test if the directory is writable\n        test_file = os.path.join(base_path, \".test_write\")\n        with open(test_file, 'w') as f:\n            f.write(\"test\")\n        os.remove(test_file)\n        return os.path.join(base_path, filename)\n    except (PermissionError, OSError):\n        # Second attempt: Try a temp directory with unique name\n        timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        temp_dir = os.path.join(tempfile.gettempdir(), \"sat_report_\" + timestamp)\n        os.makedirs(temp_dir, exist_ok=True)\n        return os.path.join(temp_dir, filename)\n\ndef send_email_debug(to_email, subject, html_content, text_content=None):\n    \"\"\"Send an HTML email with enhanced debugging and fallbacks to environment\"\"\"\n    if not to_email:\n        logger.warning(\"No recipient email provided\")\n        return False\n\n    # Log attempt\n    logger.info(f\"Attempting to send email to {to_email}\")\n\n    # Get email configuration with fallbacks to environment variables\n    import os\n    smtp_server = current_app.config.get('SMTP_SERVER') or os.environ.get('SMTP_SERVER', 'smtp.gmail.com')\n    smtp_port = int(current_app.config.get('SMTP_PORT') or os.environ.get('SMTP_PORT', 587))\n    smtp_username = current_app.config.get('SMTP_USERNAME') or os.environ.get('SMTP_USERNAME', '')\n    smtp_password = current_app.config.get('SMTP_PASSWORD') or os.environ.get('SMTP_PASSWORD', '')\n    default_sender = current_app.config.get('DEFAULT_SENDER') or os.environ.get('DEFAULT_SENDER', smtp_username)\n\n    logger.info(f\"Email config: server={smtp_server}, port={smtp_port}, username={smtp_username}\")\n\n    if not smtp_username or not smtp_password:\n        logger.error(\"SMTP credentials are missing\")\n        return False\n\n    # Create message\n    msg = EmailMessage()\n    msg[\"Subject\"] = subject\n    msg[\"From\"] = default_sender\n    msg[\"To\"] = to_email\n    msg.set_content(text_content or html_content.replace(\"<br>\", \"\\n\").replace(\"<p>\", \"\").replace(\"</p>\", \"\\n\\n\"))\n    msg.add_alternative(html_content, subtype=\"html\")\n\n    retries = 3\n    for i in range(retries):\n        try:\n            logger.info(f\"Email send attempt {i+1}/{retries}\")\n            with smtplib.SMTP(smtp_server, smtp_port, timeout=30) as server:\n                server.set_debuglevel(1)  # Enable detailed debugging\n                logger.info(\"SMTP connection established\")\n\n                server.ehlo()\n                logger.info(\"EHLO successful\")\n\n                server.starttls()\n                server.ehlo()\n                logger.info(\"STARTTLS successful\")\n\n                logger.info(f\"Logging in with {smtp_username}\")\n                server.login(smtp_username, smtp_password)\n                logger.info(\"Login successful\")\n\n                logger.info(f\"Sending message to {to_email}\")\n                server.send_message(msg)\n                logger.info(f\"Email sent successfully to {to_email}\")\n                return True\n        except Exception as e:\n            logger.error(f\"Email attempt {i+1}/{retries} failed: {str(e)}\", exc_info=True)\n            if i == retries - 1:\n                return False\n            time.sleep(2)\n    return False\n\n# File upload configuration\nALLOWED_EXTENSIONS = {\n    'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx',\n    'xls', 'xlsx', 'ppt', 'pptx', 'zip', 'rar', '7z'\n}\n\ndef allowed_file(filename):\n    \"\"\"Check if file extension is allowed\"\"\"\n    if not filename:\n        return False\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\nimport json\nimport os\nfrom datetime import datetime\n\n# This section seems to be a remnant or duplicate and is being kept for completeness as per instructions\n# but the functions are redundant with the ones defined above.\n# If these were truly meant to be distinct, they would need to be differentiated.\n# For now, assuming they are duplicates of the more comprehensive versions above.\n\ndef load_submissions():\n    \"\"\"Load submissions from JSON file\"\"\"\n    try:\n        submissions_file = 'data/submissions.json'\n        if os.path.exists(submissions_file):\n            with open(submissions_file, 'r') as f:\n                return json.load(f)\n        return []\n    except Exception as e:\n        print(f\"Error loading submissions: {e}\")\n        return []\n\ndef save_submissions(submissions):\n    \"\"\"Save submissions to JSON file\"\"\"\n    try:\n        submissions_file = 'data/submissions.json'\n        os.makedirs(os.path.dirname(submissions_file), exist_ok=True)\n        with open(submissions_file, 'w') as f:\n            json.dump(submissions, f, indent=2)\n        return True\n    except Exception as e:\n        print(f\"Error saving submissions: {e}\")\n        return False\n\ndef send_edit_link(email, edit_link):\n    \"\"\"Send edit link via email (placeholder)\"\"\"\n    print(f\"Would send edit link to {email}: {edit_link}\")\n    return True\n\ndef setup_approval_workflow(submission_data):\n    \"\"\"Setup approval workflow (placeholder)\"\"\"\n    return {\"status\": \"pending\", \"approvers\": []}\n\ndef process_table_rows(table_data):\n    \"\"\"Process table rows (placeholder)\"\"\"\n    return table_data\n\ndef handle_image_removals(removed_images):\n    \"\"\"Handle image removals (placeholder)\"\"\"\n    for image in removed_images:\n        try:\n            if os.path.exists(image):\n                os.remove(image)\n        except Exception as e:\n            print(f\"Error removing image {image}: {e}\")\n\ndef allowed_file(filename):\n    \"\"\"Check if file extension is allowed\"\"\"\n    allowed_extensions = {'png', 'jpg', 'jpeg', 'gif', 'pdf', 'docx'}\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in allowed_extensions\n\ndef save_uploaded_file(file, upload_folder):\n    \"\"\"Save uploaded file\"\"\"\n    try:\n        os.makedirs(upload_folder, exist_ok=True)\n        filename = file.filename\n        filepath = os.path.join(upload_folder, filename)\n        file.save(filepath)\n        return filepath\n    except Exception as e:\n        print(f\"Error saving file: {e}\")\n        return None\n\ndef generate_sat_report(data):\n    \"\"\"Generate SAT report (placeholder)\"\"\"\n    print(\"Generating SAT report...\")\n    return {\"success\": True, \"filename\": \"SAT_Report_Final.docx\"}\n\ndef get_unread_count():\n    \"\"\"Get unread notification count for current user\"\"\"\n    try:\n        from flask_login import current_user\n        if current_user.is_authenticated:\n            from models import Notification\n            count = Notification.query.filter_by(\n                user_email=current_user.email, \n                read=False\n            ).count()\n            return count\n    except Exception as e:\n        print(f\"Error getting unread count: {e}\")\n    return 0","size_bytes":47957},"routes/__init__.py":{"content":"\n# Routes package initialization\n","size_bytes":33},"routes/approval.py":{"content":"from flask import Blueprint, render_template, request, redirect, url_for, flash, current_app\nimport os\nimport datetime\nimport base64\nfrom docxtpl import DocxTemplate, InlineImage\nfrom docx.shared import Mm\nfrom utils import (\n    load_submissions,\n    save_submissions,\n    send_approval_link,\n    notify_completion,\n    convert_to_pdf,\n    send_client_final_document,\n    get_safe_output_path\n)\n\napproval_bp = Blueprint('approval', __name__)\n\n@approval_bp.route('/<submission_id>/<int:stage>', methods=['GET', 'POST'])\ndef approve_submission(submission_id, stage):\n    \"\"\"Handle approval workflow for a submission\"\"\"\n    try:\n        submissions = load_submissions()\n        submission_data = submissions.get(submission_id)\n        \n        if not submission_data:\n            flash(\"Submission not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        approvals = submission_data.get(\"approvals\", [])\n        current_stage = next((a for a in approvals if a[\"stage\"] == stage), None)\n        \n        if not current_stage:\n            flash(\"Approval stage not found\", \"error\")\n            return redirect(url_for('main.index'))\n            \n        # If already approved, show status page\n        if current_stage[\"status\"] == \"approved\":\n            flash(\"This stage has already been approved\", \"info\")\n            return redirect(url_for('status.view_status', submission_id=submission_id))\n\n        if request.method == \"POST\":\n            # Process the pad‐drawn signature (base64 PNG) from the hidden field\n            sig_data = request.form.get(\"signature_data\", \"\")\n            if sig_data.startswith(\"data:image\"):\n                # strip off \"data:image/png;base64,\"\n                header, b64 = sig_data.split(\",\", 1)\n                data = base64.b64decode(b64)\n                fn = f\"{submission_id}_{stage}.png\"\n                path = os.path.join(current_app.config['SIGNATURES_FOLDER'], fn)\n                with open(path, \"wb\") as img:\n                    img.write(data)\n                # record just the filename so later we can load & embed it\n                current_stage[\"signature\"] = fn\n\n            # Capture approval comment and mark as approved\n            current_stage[\"comment\"] = request.form.get(\"approval_comment\", \"\")\n            current_stage[\"status\"] = \"approved\"\n            current_stage[\"timestamp\"] = datetime.datetime.now().isoformat()\n            current_stage[\"approver_name\"] = request.form.get(\"approver_name\", \"\")\n            \n            # Create notification for submitter\n            from utils import create_status_update_notification\n            try:\n                user_email = submission_data.get(\"user_email\")\n                document_title = submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\")\n                if user_email:\n                    create_status_update_notification(\n                        user_email=user_email,\n                        submission_id=submission_id,\n                        status=\"approved\",\n                        document_title=document_title,\n                        approver_name=current_stage[\"approver_name\"]\n                    )\n            except Exception as e:\n                current_app.logger.error(f\"Error creating approval notification: {e}\")\n\n            # Once a stage is approved, lock editing \n            submission_data[\"locked\"] = True\n\n            # Update last modified timestamp\n            submission_data[\"updated_at\"] = datetime.datetime.now().isoformat()\n            \n            # Save changes\n            submissions[submission_id] = submission_data\n            save_submissions(submissions)\n\n            # Determine if this is the PM approval (stage 2)\n            # After PM approves, we finalize the document and send to client\n            is_final_approval = stage == 2\n            \n            \n            if is_final_approval:\n                tpl = DocxTemplate(current_app.config['TEMPLATE_FILE'])\n                ctx = submission_data['context'].copy()\n\n                # Check and log all parameters for debugging\n                current_app.logger.info(f\"Preparing final document with context keys: {list(ctx.keys())}\")\n                \n                # Initialize signature variables with proper fallbacks\n                sig_prepared = \"\"\n                tech_lead_sig = \"\"\n                pm_sig = \"\"\n                \n                # Improved prepared signature handling\n                prep_fn = None\n                # First check in submission data root (most reliable place)\n                if \"prepared_signature\" in submission_data:\n                    prep_fn = submission_data.get(\"prepared_signature\")\n                    current_app.logger.info(f\"Found prepared signature in submission data: {prep_fn}\")\n                # Then check in context\n                elif \"prepared_signature\" in ctx:\n                    prep_fn = ctx.get(\"prepared_signature\")\n                    current_app.logger.info(f\"Found prepared signature in context: {prep_fn}\")\n\n                if prep_fn:\n                    # Make sure it has .png extension\n                    if not prep_fn.lower().endswith('.png'):\n                        prep_fn += '.png'\n                        \n                    # Try the full absolute path first\n                    sig_path = os.path.join(current_app.config['SIGNATURES_FOLDER'], prep_fn)\n                    \n                    # Debug signature path extensively\n                    current_app.logger.info(f\"Preparer signature file: {prep_fn}\")\n                    current_app.logger.info(f\"Full signature path: {os.path.abspath(sig_path)}\")\n                    current_app.logger.info(f\"Signature directory exists: {os.path.exists(os.path.dirname(sig_path))}\")\n                    current_app.logger.info(f\"Signature file exists: {os.path.exists(sig_path)}\")\n                    \n                    if os.path.exists(sig_path):\n                        try:\n                            # Verify file is readable and has content\n                            file_size = os.path.getsize(sig_path)\n                            current_app.logger.info(f\"Signature file size: {file_size} bytes\")\n                            \n                            if file_size > 0:\n                                # Create inline image with the signature\n                                sig_prepared = InlineImage(tpl, sig_path, width=Mm(40))\n                                current_app.logger.info(\"Successfully created InlineImage for preparer signature\")\n                            else:\n                                current_app.logger.error(f\"Signature file exists but is empty (0 bytes)\")\n                        except Exception as e:\n                            current_app.logger.error(f\"Error loading preparer signature: {e}\", exc_info=True)\n                    else:\n                        # Try alternate paths as fallback\n                        alternate_paths = [\n                            os.path.join(current_app.root_path, 'static', 'signatures', prep_fn),\n                            os.path.join(os.getcwd(), 'static', 'signatures', prep_fn)\n                        ]\n                        \n                        for alt_path in alternate_paths:\n                            current_app.logger.info(f\"Trying alternate path: {os.path.abspath(alt_path)}\")\n                            if os.path.exists(alt_path):\n                                try:\n                                    sig_prepared = InlineImage(tpl, alt_path, width=Mm(40))\n                                    current_app.logger.info(f\"Successfully loaded signature from alternate path: {alt_path}\")\n                                    break\n                                except Exception as e:\n                                    current_app.logger.error(f\"Error loading from alternate path: {e}\")\n                \n                # Load Automation Manager signature (stage 1) with better error handling\n                tech_lead_approval = next((a for a in approvals if a[\"stage\"] == 1), None)\n                if tech_lead_approval:\n                    sig_fn = tech_lead_approval.get(\"signature\")\n                    if sig_fn:\n                        # Make sure it has .png extension\n                        if not sig_fn.lower().endswith('.png'):\n                            sig_fn += '.png'\n                            \n                        sig_path = os.path.join(current_app.config['SIGNATURES_FOLDER'], sig_fn)\n                        current_app.logger.info(f\"Automation Manager signature path: {os.path.abspath(sig_path)}\")\n                        current_app.logger.info(f\"File exists: {os.path.exists(sig_path)}\")\n                        \n                        if os.path.exists(sig_path):\n                            try:\n                                file_size = os.path.getsize(sig_path)\n                                current_app.logger.info(f\"Automation Manager signature file size: {file_size} bytes\")\n                                \n                                if file_size > 0:\n                                    tech_lead_sig = InlineImage(tpl, sig_path, width=Mm(40))\n                                    current_app.logger.info(f\"Successfully loaded Automation Manager signature\")\n                            except Exception as e:\n                                current_app.logger.error(f\"Error loading Automation Manager signature: {e}\")\n                                tech_lead_sig = \"\"\n                        else:\n                            # Try alternate paths\n                            for alt_path in [\n                                os.path.join(current_app.root_path, 'static', 'signatures', sig_fn),\n                                os.path.join(os.getcwd(), 'static', 'signatures', sig_fn)\n                            ]:\n                                if os.path.exists(alt_path):\n                                    try:\n                                        tech_lead_sig = InlineImage(tpl, alt_path, width=Mm(40))\n                                        current_app.logger.info(f\"Used alternate path for Automation Manager signature: {alt_path}\")\n                                        break\n                                    except Exception as e:\n                                        current_app.logger.error(f\"Error loading from alt path: {e}\")\n                \n                # Load PM signature (stage 2) with better error handling\n                pm_approval = next((a for a in approvals if a[\"stage\"] == 2), None)\n                if pm_approval:\n                    sig_fn = pm_approval.get(\"signature\")\n                    if sig_fn:\n                        # Make sure it has .png extension\n                        if not sig_fn.lower().endswith('.png'):\n                            sig_fn += '.png'\n                            \n                        sig_path = os.path.join(current_app.config['SIGNATURES_FOLDER'], sig_fn)\n                        current_app.logger.info(f\"PM signature path: {os.path.abspath(sig_path)}\")\n                        current_app.logger.info(f\"File exists: {os.path.exists(sig_path)}\")\n                        \n                        if os.path.exists(sig_path):\n                            try:\n                                file_size = os.path.getsize(sig_path)\n                                current_app.logger.info(f\"PM signature file size: {file_size} bytes\")\n                                \n                                if file_size > 0:\n                                    pm_sig = InlineImage(tpl, sig_path, width=Mm(40))\n                                    current_app.logger.info(f\"Successfully loaded PM signature\")\n                            except Exception as e:\n                                current_app.logger.error(f\"Error loading PM signature: {e}\")\n                                pm_sig = \"\"\n                        else:\n                            # Try alternate paths\n                            for alt_path in [\n                                os.path.join(current_app.root_path, 'static', 'signatures', sig_fn),\n                                os.path.join(os.getcwd(), 'static', 'signatures', sig_fn)\n                            ]:\n                                if os.path.exists(alt_path):\n                                    try:\n                                        pm_sig = InlineImage(tpl, alt_path, width=Mm(40))\n                                        current_app.logger.info(f\"Used alternate path for PM signature: {alt_path}\")\n                                        break\n                                    except Exception as e:\n                                        current_app.logger.error(f\"Error loading from alt path: {e}\")\n                \n                # Format timestamps consistently\n                tech_lead_date = \"\"\n                pm_date = \"\"\n                preparer_date = \"\"\n                \n                # Helper function for consistent date formatting\n                def format_iso_timestamp(timestamp):\n                    if not timestamp:\n                        return \"\"\n                    try:\n                        date_obj = datetime.datetime.fromisoformat(timestamp)\n                        return date_obj.strftime(\"%d-%m-%Y %H:%M\")\n                    except Exception as e:\n                        current_app.logger.error(f\"Error formatting timestamp: {e}\")\n                        return \"\"\n                \n                # Format Automation Manager approval date\n                if tech_lead_approval and tech_lead_approval.get(\"timestamp\"):\n                    tech_lead_date = format_iso_timestamp(tech_lead_approval.get(\"timestamp\"))\n                \n                # Format PM approval date\n                if pm_approval and pm_approval.get(\"timestamp\"):\n                    pm_date = format_iso_timestamp(pm_approval.get(\"timestamp\"))\n                \n                # Format preparer timestamp\n                if \"prepared_timestamp\" in ctx:\n                    preparer_date = format_iso_timestamp(ctx.get(\"prepared_timestamp\"))\n                \n                # Comprehensive signature mapping with fallbacks\n                signature_mapping = {\n                    # Primary signature mappings\n                    \"SIG_PREPARED\": sig_prepared or \"\",\n                    \"SIG_REVIEW_TECH\": tech_lead_sig or \"\",\n                    \"SIG_REVIEW_PM\": pm_sig or \"\",\n                    \"SIG_APPROVAL_CLIENT\": \"\",\n                    \n                    # Alternative signature mappings\n                    \"SIG_PREPARED_BY\": sig_prepared or \"\",\n                    \"SIG_APPROVER_1\": tech_lead_sig or \"\",\n                    \"SIG_APPROVER_2\": pm_sig or \"\",\n                    \"SIG_APPROVER_3\": \"\",\n                    \n                    # Date variables\n                    \"TECH_LEAD_DATE\": tech_lead_date,\n                    \"PM_DATE\": pm_date,\n                    \"PREPARER_DATE\": preparer_date\n                }\n                \n                # Log the signature mapping\n                current_app.logger.info(f\"Applying {len(signature_mapping)} signature variables to template\")\n                for key, value in signature_mapping.items():\n                    is_image = \"InlineImage\" in str(type(value))\n                    current_app.logger.info(f\"  {key}: {'[InlineImage]' if is_image else value}\")\n                \n                # Update context with signatures - ensure they're properly added\n                ctx.update(signature_mapping)\n                \n                # Render with improved error handling\n                try:\n                    tpl.render(ctx)\n                    out = os.path.abspath(current_app.config['OUTPUT_FILE'])\n                    tpl.save(out)\n                    current_app.logger.info(f\"Template successfully rendered and saved to: {out}\")\n                except Exception as e:\n                    current_app.logger.error(f\"Error rendering template: {e}\", exc_info=True)\n                    flash(f\"Error generating final document: {str(e)}\", \"error\")\n                    return redirect(url_for('status.view_status', submission_id=submission_id))\n\n                # Generate PDF if enabled\n                if current_app.config.get('ENABLE_PDF_EXPORT', False):\n                    pdf = convert_to_pdf(out)\n                    if pdf:\n                        submission_data[\"pdf_path\"] = pdf\n                        save_submissions(submissions)\n\n                # Improved client email finding and notification\n                # Always get client email from approvals list with better error handling\n                client_email = None\n                client_approval = next((a for a in approvals if a[\"stage\"] == 3), None)\n                if client_approval:\n                    client_email = client_approval.get(\"approver_email\")\n                    current_app.logger.info(f\"Found client email for notification: {client_email}\")\n                else:\n                    current_app.logger.warning(\"No stage 3 (client) approval found in workflow\")\n                    \n                    # Try fallback methods to find client email\n                    if \"approver_3_email\" in submission_data.get(\"context\", {}):\n                        client_email = submission_data[\"context\"][\"approver_3_email\"]\n                        current_app.logger.info(f\"Using fallback client email from context: {client_email}\")\n                    elif \"CLIENT_EMAIL\" in submission_data.get(\"context\", {}):\n                        client_email = submission_data[\"context\"][\"CLIENT_EMAIL\"]\n                        current_app.logger.info(f\"Using fallback CLIENT_EMAIL from context: {client_email}\")\n\n                # Notify the submitter \n                notify_completion(submission_data.get(\"user_email\"), submission_id)\n                \n                # Create completion notification\n                from utils import create_completion_notification\n                try:\n                    user_email = submission_data.get(\"user_email\")\n                    document_title = submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\")\n                    if user_email:\n                        create_completion_notification(\n                            user_email=user_email,\n                            submission_id=submission_id,\n                            document_title=document_title\n                        )\n                except Exception as e:\n                    current_app.logger.error(f\"Error creating completion notification: {e}\")\n                \n                # Send the final document to the client\n                if client_email:\n                    try:\n                        current_app.logger.info(f\"Sending final document to client: {client_email}\")\n                        from utils import send_client_final_document\n                        result = send_client_final_document(\n                            client_email, \n                            submission_id, \n                            submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\")\n                        )\n                        current_app.logger.info(f\"Client notification result: {result}\")\n                        flash(f\"All approvals complete! The submitter and client ({client_email}) have been notified.\", \"success\")\n                    except Exception as e:\n                        current_app.logger.error(f\"Error sending client notification: {e}\", exc_info=True)\n                        flash(f\"All approvals complete! The submitter has been notified, but there was an error sending client notification to {client_email}.\", \"warning\")\n                else:\n                    current_app.logger.error(\"No client email found for final notification\")\n                    flash(\"All approvals complete! The submitter has been notified, but no client email was found.\", \"warning\")\n                \n                return redirect(url_for('status.view_status', submission_id=submission_id))\n\n            else:\n                # Not final approval: notify the next approver\n                next_stage = next(\n                    (a for a in approvals if a[\"stage\"] > stage and a[\"status\"] == \"pending\"),\n                    None\n                )\n                if next_stage:\n                    current_app.logger.info(\"Notifying next approver: %s\", next_stage[\"approver_email\"])\n                    send_approval_link(\n                        next_stage[\"approver_email\"],\n                        submission_id,\n                        next_stage[\"stage\"]\n                    )\n                    \n                    # Create notification for next approver\n                    from utils import create_approval_notification\n                    try:\n                        document_title = submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\")\n                        create_approval_notification(\n                            approver_email=next_stage[\"approver_email\"],\n                            submission_id=submission_id,\n                            stage=next_stage[\"stage\"],\n                            document_title=document_title\n                        )\n                    except Exception as e:\n                        current_app.logger.error(f\"Error creating approval notification: {e}\")\n                    flash(f\"Stage {stage} approved. Next approver has been notified.\", \"success\")\n                else:\n                    flash(f\"Stage {stage} approved.\", \"success\")\n                return redirect(url_for('status.view_status', submission_id=submission_id))\n\n        \n        # For GET: Render approval page so approver can review and sign (with DOCX download option)\n        context = {\n            \"submission_id\": submission_id,\n            \"stage\": stage,\n            \"approval\": current_stage,\n            \"approvals\": approvals,\n            \"document_title\": submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\"),\n            \"project_reference\": submission_data.get(\"context\", {}).get(\"PROJECT_REFERENCE\", \"\"),\n            \"client_name\": submission_data.get(\"context\", {}).get(\"CLIENT_NAME\", \"\"),\n            \"prepared_by\": submission_data.get(\"context\", {}).get(\"PREPARED_BY\", \"\")\n        }\n        \n        return render_template(\"approve.html\", **context)\n        \n    except Exception as e:\n        current_app.logger.error(f\"Error in approve_submission: {e}\", exc_info=True)\n        flash(f\"An error occurred during the approval process: {str(e)}\", \"error\")\n        return redirect(url_for('main.index'))\n\n@approval_bp.route('/reject/<submission_id>/<int:stage>', methods=['POST'])\ndef reject_submission(submission_id, stage):\n    \"\"\"Reject a submission at a specific approval stage\"\"\"\n    try:\n        submissions = load_submissions()\n        submission_data = submissions.get(submission_id)\n        \n        if not submission_data:\n            flash(\"Submission not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        approvals = submission_data.get(\"approvals\", [])\n        current_stage = next((a for a in approvals if a[\"stage\"] == stage), None)\n        \n        if not current_stage:\n            flash(\"Approval stage not found\", \"error\")\n            return redirect(url_for('main.index'))\n            \n        # Only pending approvals can be rejected\n        if current_stage[\"status\"] != \"pending\":\n            flash(\"This stage is not pending approval\", \"error\")\n            return redirect(url_for('status.view_status', submission_id=submission_id))\n\n        # Mark as rejected with comment\n        current_stage[\"status\"] = \"rejected\"\n        current_stage[\"comment\"] = request.form.get(\"rejection_comment\", \"\")\n        current_stage[\"timestamp\"] = datetime.datetime.now().isoformat()\n        current_stage[\"approver_name\"] = request.form.get(\"approver_name\", \"\")\n        \n        # Create rejection notification for submitter\n        from utils import create_status_update_notification\n        try:\n            user_email = submission_data.get(\"user_email\")\n            document_title = submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\")\n            if user_email:\n                create_status_update_notification(\n                    user_email=user_email,\n                    submission_id=submission_id,\n                    status=\"rejected\",\n                    document_title=document_title,\n                    approver_name=current_stage[\"approver_name\"]\n                )\n        except Exception as e:\n            current_app.logger.error(f\"Error creating rejection notification: {e}\")\n        \n        # Update submission\n        submission_data[\"updated_at\"] = datetime.datetime.now().isoformat()\n        submissions[submission_id] = submission_data\n        save_submissions(submissions)\n        \n        # Notify submitter about rejection\n        user_email = submission_data.get(\"user_email\")\n        if user_email:\n            # In a real implementation, you would add code to notify the submitter about rejection\n            pass\n            \n        flash(\"Submission has been rejected with comments\", \"warning\")\n        return redirect(url_for('status.view_status', submission_id=submission_id))\n        \n    except Exception as e:\n        current_app.logger.error(f\"Error in reject_submission: {e}\", exc_info=True)\n        flash(f\"An error occurred during the rejection process: {str(e)}\", \"error\")\n        return redirect(url_for('status.view_status', submission_id=submission_id))","size_bytes":25643},"routes/auth.py":{"content":"from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, current_app\nfrom flask_login import login_user, logout_user, current_user\nfrom models import db, User\nfrom auth import login_required\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nauth_bp = Blueprint('auth', __name__)\n\n@auth_bp.route('/welcome')\ndef welcome():\n    \"\"\"Welcome/Home page with Register and Log In buttons\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard.home'))\n    return render_template('welcome.html')\n\n@auth_bp.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"User registration\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard.home'))\n\n    if request.method == 'POST':\n        full_name = request.form.get('full_name', '').strip()\n        email = request.form.get('email', '').strip().lower()\n        password = request.form.get('password', '')\n        requested_role = request.form.get('requested_role', '')\n\n        # Validation\n        if not all([full_name, email, password, requested_role]):\n            flash('All fields are required.', 'error')\n            return render_template('register.html')\n\n        if requested_role not in ['Engineer', 'Automation Manager', 'PM']:\n            flash('Invalid role selection.', 'error')\n            return render_template('register.html')\n\n        # Check if user already exists\n        if User.query.filter_by(email=email).first():\n            flash('Email already registered. Please use a different email.', 'error')\n            return render_template('register.html')\n\n        # Create new user\n        user = User(\n            full_name=full_name,\n            email=email,\n            requested_role=requested_role,\n            status='Pending'\n        )\n        user.set_password(password)\n\n        try:\n            db.session.add(user)\n            db.session.commit()\n            return render_template('register_confirmation.html')\n        except Exception as e:\n            db.session.rollback()\n            flash('Registration failed. Please try again.', 'error')\n            return render_template('register.html')\n\n    return render_template('register.html')\n\n@auth_bp.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"User login\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard.home'))\n\n    if request.method == 'POST':\n        email = request.form.get('email', '').strip().lower()\n        password = request.form.get('password', '')\n\n        if not email or not password:\n            flash('Email and password are required.', 'error')\n            return render_template('login.html')\n\n        try:\n            # Test database connection first\n            db.session.execute(db.text('SELECT 1'))\n            user = User.query.filter_by(email=email).first()\n\n            if user and user.check_password(password):\n                # Check user status\n                if user.status == 'Pending':\n                    return render_template('pending_approval.html', user=user)\n                elif user.status == 'Disabled':\n                    flash('Your account has been disabled. Please contact an administrator.', 'error')\n                    return render_template('login.html')\n                elif user.status == 'Active':\n                    login_user(user)\n                    flash('Login successful!', 'success')\n\n                    # Role-based dashboard redirect\n                    if user.role == 'Admin':\n                        return redirect(url_for('dashboard.admin'))\n                    elif user.role == 'Engineer':\n                        return redirect(url_for('dashboard.engineer'))\n                    elif user.role == 'TM':\n                        return redirect(url_for('dashboard.tm'))\n                    elif user.role == 'PM':\n                        return redirect(url_for('dashboard.pm'))\n                    else:\n                        return redirect(url_for('dashboard.home'))\n                else:\n                    flash('Account status unknown. Please contact an administrator.', 'error')\n                    return render_template('login.html')\n            else:\n                flash('Invalid email or password', 'error')\n                return render_template('login.html')\n\n        except Exception as e:\n            current_app.logger.error(f\"Login error: {e}\")\n            flash('System temporarily unavailable. Please try again later.', 'error')\n            return render_template('login.html')\n\n    return render_template('login.html')\n\n\n@auth_bp.route('/logout')\n@login_required\ndef logout():\n    \"\"\"User logout\"\"\"\n    logout_user()\n    flash('You have been logged out successfully.', 'success')\n    return redirect(url_for('auth.welcome'))\n\n@auth_bp.route('/pending')\ndef pending_approval():\n    \"\"\"Pending approval page\"\"\"\n    return render_template('pending_approval.html')\n\n@auth_bp.route('/forgot-password', methods=['GET', 'POST'])\ndef forgot_password():\n    \"\"\"Forgot password - reset user password\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard.home'))\n\n    if request.method == 'POST':\n        email = request.form.get('email', '').strip().lower()\n\n        if not email:\n            flash('Email is required.', 'error')\n            return render_template('forgot_password.html')\n\n        user = User.query.filter_by(email=email).first()\n\n        if user:\n            # For demo purposes, set a default password\n            # In production, you'd send an email with reset link\n            user.set_password('newpassword123')\n            try:\n                db.session.commit()\n                flash(f'Password reset for {email}. New password: newpassword123', 'success')\n                return redirect(url_for('auth.login'))\n            except Exception as e:\n                db.session.rollback()\n                flash('Password reset failed. Please try again.', 'error')\n        else:\n            # Don't reveal if email exists for security\n            flash('If this email exists, a password reset has been sent.', 'info')\n\n    return render_template('forgot_password.html')\n\n@auth_bp.route('/reset-password', methods=['GET', 'POST'])\ndef reset_password():\n    \"\"\"Reset password using token\"\"\"\n    token = request.args.get('token')\n    if not token:\n        flash('Invalid or missing reset token.', 'error')\n        return redirect(url_for('auth.forgot_password'))\n\n    user = User.verify_reset_token(token)\n    if not user:\n        flash('Invalid or expired reset token.', 'error')\n        return redirect(url_for('auth.forgot_password'))\n\n    if request.method == 'POST':\n        password = request.form.get('password')\n        confirm_password = request.form.get('confirm_password')\n\n        if not password or len(password) < 6:\n            flash('Password must be at least 6 characters long.', 'error')\n            return render_template('reset_password.html', token=token)\n\n        if password != confirm_password:\n            flash('Passwords do not match.', 'error')\n            return render_template('reset_password.html', token=token)\n\n        user.password_hash = generate_password_hash(password)\n        try:\n            db.session.commit()\n            flash('Your password has been reset successfully. You can now log in.', 'success')\n            return redirect(url_for('auth.login'))\n        except Exception as e:\n            db.session.rollback()\n            flash('An error occurred while resetting your password.', 'error')\n            return render_template('reset_password.html', token=token)\n\n    return render_template('reset_password.html', token=token)\n\n@auth_bp.route('/change-password', methods=['GET', 'POST'])\n@login_required\ndef change_password():\n    \"\"\"Change user password\"\"\"\n    try:\n        from models import Notification\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count: {e}\")\n        unread_count = 0\n\n    if request.method == 'POST':\n        current_password = request.form.get('current_password')\n        new_password = request.form.get('new_password')\n        confirm_password = request.form.get('confirm_password')\n\n        # Validate current password\n        if not current_user.check_password(current_password):\n            flash('Current password is incorrect', 'error')\n            return render_template('change_password.html', unread_count=unread_count)\n\n        # Validate new password\n        if new_password != confirm_password:\n            flash('New passwords do not match', 'error')\n            return render_template('change_password.html', unread_count=unread_count)\n\n        if len(new_password) < 6:\n            flash('Password must be at least 6 characters long', 'error')\n            return render_template('change_password.html', unread_count=unread_count)\n\n        try:\n            # Update password\n            current_user.set_password(new_password)\n            db.session.commit()\n\n            flash('Password changed successfully', 'success')\n            return redirect(url_for('dashboard.home'))\n        except Exception as e:\n            current_app.logger.error(f\"Error changing password: {e}\")\n            flash('An error occurred while changing password', 'error')\n            return render_template('change_password.html', unread_count=unread_count)\n\n    return render_template('change_password.html', unread_count=unread_count)","size_bytes":9618},"routes/dashboard.py":{"content":"from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, current_app\nfrom flask_login import login_required, current_user\nfrom auth import admin_required, role_required\nfrom models import db, User, Report, Notification, SystemSettings, test_db_connection\nfrom utils import get_unread_count\nimport json\n\ndashboard_bp = Blueprint('dashboard', __name__)\n\n@dashboard_bp.route('/')\n@login_required\ndef home():\n    \"\"\"Role-based dashboard home\"\"\"\n    role = current_user.role\n\n    if role == 'Admin':\n        return redirect(url_for('dashboard.admin'))\n    elif role == 'Engineer':\n        return redirect(url_for('dashboard.engineer'))\n    elif role == 'TM':\n        return redirect(url_for('dashboard.tm'))\n    elif role == 'PM':\n        return redirect(url_for('dashboard.pm'))\n    else:\n        flash('Invalid role. Contact your administrator.', 'error')\n        return redirect(url_for('auth.logout'))\n\n@dashboard_bp.route('/admin')\n@admin_required\ndef admin():\n    \"\"\"Admin dashboard\"\"\"\n    from models import Report, Notification\n\n    users = User.query.all()\n    db_connected = test_db_connection()\n\n    # Calculate user statistics\n    total_users = len(users)\n    active_users = len([u for u in users if u.status == 'Active'])\n    pending_users_count = len([u for u in users if u.status == 'Pending'])\n\n    # Get unread notifications count\n    try:\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count for admin: {e}\")\n        unread_count = 0\n\n    # Get recent users (last 5)\n    recent_users = User.query.order_by(User.created_date.desc()).limit(5).all()\n\n    # Get actual pending users (users who need approval)\n    pending_users_list = User.query.filter_by(status='Pending').order_by(User.created_date.desc()).limit(5).all()\n\n    # Calculate report statistics\n    try:\n        total_reports = Report.query.count()\n        recent_reports = Report.query.order_by(Report.created_at.desc()).limit(5).all()\n        # Add basic report info for display\n        for report in recent_reports:\n            if hasattr(report, 'sat_report') and report.sat_report:\n                import json\n                try:\n                    data = json.loads(report.sat_report.data_json)\n                    report.document_title = data.get('context', {}).get('DOCUMENT_TITLE', 'Untitled Report')\n                    report.project_reference = data.get('context', {}).get('PROJECT_REFERENCE', 'N/A')\n                except:\n                    report.document_title = 'Untitled Report'\n                    report.project_reference = 'N/A'\n\n                # Determine status from approvals\n                if report.approvals_json:\n                    try:\n                        approvals = json.loads(report.approvals_json)\n                        statuses = [a.get(\"status\", \"pending\") for a in approvals]\n                        if \"rejected\" in statuses:\n                            report.status = \"rejected\"\n                        elif all(status == \"approved\" for status in statuses):\n                            report.status = \"approved\"\n                        elif any(status == \"approved\" for status in statuses):\n                            report.status = \"partially_approved\"\n                        else:\n                            report.status = \"pending\"\n                    except:\n                        report.status = \"pending\"\n                else:\n                    report.status = \"pending\"\n            else:\n                report.document_title = 'Untitled Report'\n                report.project_reference = 'N/A'\n                report.status = 'draft'\n    except Exception as e:\n        current_app.logger.warning(f\"Could not retrieve report statistics for admin: {e}\")\n        total_reports = 0\n        recent_reports = []\n\n    # System status\n    system_status = \"Online\" if db_connected else \"Offline\"\n\n    # Get settings\n    company_logo = SystemSettings.get_setting('company_logo', 'static/cully.png')\n    storage_location = SystemSettings.get_setting('default_storage_location', '/outputs/')\n\n    return render_template('admin_dashboard.html',\n                         users=users,\n                         total_users=total_users,\n                         pending_users=pending_users_count,\n                         total_reports=total_reports,\n                         db_status=db_connected,\n                         recent_activity=[],  # Placeholder for recent activity\n                         pending_users_list=pending_users_list,\n                         storage_location=storage_location,\n                         company_logo=company_logo)\n\n@dashboard_bp.route('/engineer')\n@role_required(['Engineer'])\ndef engineer():\n    \"\"\"Engineer dashboard\"\"\"\n    from models import Report, Notification\n    import json\n\n    # Get unread notifications count\n    try:\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count for engineer: {e}\")\n        unread_count = 0\n\n    # Get report statistics for current user\n    user_reports = Report.query.filter_by(user_email=current_user.email).all()\n\n    # Calculate statistics\n    total_reports = len(user_reports)\n    pending_reports = 0\n    approved_reports = 0\n\n    for report in user_reports:\n        if report.approvals_json:\n            try:\n                approvals = json.loads(report.approvals_json)\n                statuses = [a.get(\"status\", \"pending\") for a in approvals]\n\n                if all(status == \"approved\" for status in statuses):\n                    approved_reports += 1\n                elif any(status == \"pending\" for status in statuses):\n                    pending_reports += 1\n            except json.JSONDecodeError:\n                current_app.logger.warning(f\"Could not decode approvals_json for report ID: {report.id}\")\n                pending_reports += 1 # Consider it pending if decoding fails\n        else:\n            pending_reports += 1\n\n    stats = {\n        'total_reports': total_reports,\n        'pending_reports': pending_reports,\n        'approved_reports': approved_reports\n    }\n\n    return render_template('engineer_dashboard.html', stats=stats, unread_count=unread_count)\n\n@dashboard_bp.route('/tm')\n@role_required(['TM'])\ndef tm():\n    \"\"\"Technical Manager dashboard\"\"\"\n    from models import Report, Notification\n    import json\n\n    # Get unread notifications count\n    try:\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count for TM: {e}\")\n        unread_count = 0\n\n    # Get reports count for TM\n    reports_count = Report.query.filter_by(status='pending_review').count()\n\n    # Get pending approvals assigned to current TM\n    # Since approvals are stored as JSON in Report.approvals_json, we need to check those\n    pending_approvals = 0\n    try:\n        all_reports = Report.query.all()\n        for report in all_reports:\n            if report.approvals_json:\n                try:\n                    approvals = json.loads(report.approvals_json)\n                    for approval in approvals:\n                        if (approval.get('approver_email') == current_user.email and \n                            approval.get('status') == 'pending'):\n                            pending_approvals += 1\n                except json.JSONDecodeError:\n                    continue\n    except Exception as e:\n        current_app.logger.warning(f\"Could not count pending approvals for TM: {e}\")\n        pending_approvals = 0\n\n    # Get approved reports count\n    approved_reports_count = Report.query.filter_by(status='approved').count()\n\n    # Test database connection\n    try:\n        db_status = test_db_connection()\n    except Exception as e:\n        current_app.logger.warning(f\"Database connection test failed: {e}\")\n        db_status = False\n\n    return render_template('tm_dashboard.html',\n                         unread_count=unread_count,\n                         reports_count=reports_count,\n                         pending_approvals=pending_approvals,\n                         approved_reports_count=approved_reports_count,\n                         db_status=db_status)\n\n    # Get team reports count (reports under TM's review)\n    team_reports_count = Report.query.filter_by(status='pending_review').count()\n\n    # Get recent pending reports for display\n    pending_reports = Report.query.filter_by(status='pending_review').limit(5).all()\n\n    # Enrich pending_reports with SATReport data if available\n    for report in pending_reports:\n        if hasattr(report, 'sat_report') and report.sat_report:\n            try:\n                data = json.loads(report.sat_report.data_json)\n                report.document_title = data.get('context', {}).get('DOCUMENT_TITLE', 'Untitled Report')\n                report.project_reference = data.get('context', {}).get('PROJECT_REFERENCE', 'N/A')\n            except Exception as e:\n                current_app.logger.warning(f\"Could not parse SATReport data for report {report.id}: {e}\")\n                report.document_title = 'Untitled Report'\n                report.project_reference = 'N/A'\n        else:\n            report.document_title = 'Untitled Report'\n            report.project_reference = 'N/A'\n\n    return render_template('tm_dashboard.html',\n                         reports_count=reports_count,\n                         pending_approvals=pending_approvals,\n                         approved_reports=approved_reports_count,\n                         team_reports=team_reports_count,\n                         recent_reports=pending_reports,\n                         unread_count=unread_count)\n\n\n@dashboard_bp.route('/pm')\n@role_required(['PM'])\ndef pm():\n    \"\"\"Project Manager dashboard\"\"\"\n    from models import Report, Notification\n    import json\n\n    # Get unread notifications count\n    try:\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count for PM: {e}\")\n        unread_count = 0\n\n    # Get basic statistics for PM dashboard\n    try:\n        # For now, show placeholder data - in future this would be filtered by projects the PM manages\n        project_count = 5  # Placeholder\n        pending_deliverables = 3  # Placeholder\n        completed_reports = 12  # Placeholder\n        on_time_percentage = 85  # Placeholder\n\n        # Get recent reports (placeholder - would be project-specific in real implementation)\n        recent_reports = []\n\n        return render_template('pm_dashboard.html',\n                             project_count=project_count,\n                             pending_deliverables=pending_deliverables,\n                             completed_reports=completed_reports,\n                             on_time_percentage=on_time_percentage,\n                             recent_reports=recent_reports,\n                             unread_count=unread_count)\n    except Exception as e:\n        # If there's any error, provide default values\n        current_app.logger.error(f\"Error in PM dashboard: {e}\")\n        return render_template('pm_dashboard.html',\n                             project_count=0,\n                             pending_deliverables=0,\n                             completed_reports=0,\n                             on_time_percentage=0,\n                             recent_reports=[],\n                             unread_count=0)\n\n# Legacy redirects for dashboard routes\n@dashboard_bp.route('/technical-manager')\n@role_required(['TM'])\ndef technical_manager():\n    \"\"\"Legacy redirect for TM dashboard\"\"\"\n    return redirect(url_for('dashboard.tm'))\n\n@dashboard_bp.route('/project-manager')\n@role_required(['PM'])\ndef project_manager():\n    \"\"\"Legacy redirect for PM dashboard\"\"\"\n    return redirect(url_for('dashboard.pm'))\n\n@dashboard_bp.route('/user-management')\n@admin_required\ndef user_management():\n    \"\"\"User management page\"\"\"\n    status_filter = request.args.get('status', 'All')\n\n    if status_filter == 'All':\n        users = User.query.all()\n    else:\n        users = User.query.filter_by(status=status_filter).all()\n\n    return render_template('user_management.html', users=users, current_filter=status_filter)\n\n@dashboard_bp.route('/approve-user/<int:user_id>', methods=['POST'])\n@admin_required\ndef approve_user(user_id):\n    \"\"\"Approve a user and assign role\"\"\"\n    user = User.query.get_or_404(user_id)\n    role = request.form.get('role')\n\n    if role not in ['Admin', 'Engineer', 'Automation Manager', 'PM']:\n        flash('Invalid role selection.', 'error')\n        return redirect(url_for('dashboard.user_management'))\n\n    user.role = role\n    user.status = 'Active'\n\n    try:\n        db.session.commit()\n        flash(f'User {user.full_name} approved as {role}.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Failed to approve user {user.full_name} ({user_id}): {e}\")\n        flash('Failed to approve user.', 'error')\n\n    return redirect(url_for('dashboard.user_management'))\n\n@dashboard_bp.route('/disable-user/<int:user_id>', methods=['POST'])\n@admin_required\ndef disable_user(user_id):\n    \"\"\"Disable a user\"\"\"\n    user = User.query.get_or_404(user_id)\n\n    if user.email == current_user.email:\n        flash('You cannot disable your own account.', 'error')\n        return redirect(url_for('dashboard.user_management'))\n\n    user.status = 'Disabled'\n\n    try:\n        db.session.commit()\n        flash(f'User {user.full_name} disabled.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Failed to disable user {user.full_name} ({user_id}): {e}\")\n        flash('Failed to disable user.', 'error')\n\n    return redirect(url_for('dashboard.user_management'))\n\n@dashboard_bp.route('/enable-user/<int:user_id>', methods=['POST'])\n@admin_required\ndef enable_user(user_id):\n    \"\"\"Enable a user\"\"\"\n    user = User.query.get_or_404(user_id)\n    user.status = 'Active'\n\n    try:\n        db.session.commit()\n        flash(f'User {user.full_name} enabled.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Failed to enable user {user.full_name} ({user_id}): {e}\")\n        flash('Failed to enable user.', 'error')\n\n    return redirect(url_for('dashboard.user_management'))\n\n@dashboard_bp.route('/change-user-role/<int:user_id>', methods=['POST'])\n@admin_required\ndef change_user_role(user_id):\n    \"\"\"Change a user's role\"\"\"\n    user = User.query.get_or_404(user_id)\n    new_role = request.form.get('role')\n\n    if user.email == current_user.email:\n        flash('You cannot change your own role.', 'error')\n        return redirect(url_for('dashboard.user_management'))\n\n    if new_role not in ['Admin', 'Engineer', 'Automation Manager', 'PM']:\n        flash('Invalid role selection.', 'error')\n        return redirect(url_for('dashboard.user_management'))\n\n    old_role = user.role\n    user.role = new_role\n\n    try:\n        db.session.commit()\n        flash(f'User {user.full_name} role changed from {old_role} to {new_role}.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Failed to change role for user {user.full_name} ({user_id}): {e}\")\n        flash('Failed to change user role.', 'error')\n\n    return redirect(url_for('dashboard.user_management'))\n\n@dashboard_bp.route('/delete-user/<int:user_id>', methods=['POST'])\n@admin_required\ndef delete_user(user_id):\n    \"\"\"Delete a user permanently\"\"\"\n    user = User.query.get_or_404(user_id)\n\n    if user.email == current_user.email:\n        flash('You cannot delete your own account.', 'error')\n        return redirect(url_for('dashboard.user_management'))\n\n    user_name = user.full_name\n    user_email = user.email\n\n    try:\n        # Delete associated notifications first (to maintain referential integrity)\n        from models import Notification\n        Notification.query.filter_by(user_email=user_email).delete()\n\n        # Delete the user\n        db.session.delete(user)\n        db.session.commit()\n        flash(f'User {user_name} ({user_email}) has been permanently deleted.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Failed to delete user {user_name} ({user_email}, ID: {user_id}): {e}\")\n        flash(f'Failed to delete user: {str(e)}', 'error')\n\n    return redirect(url_for('dashboard.user_management'))\n\n@dashboard_bp.route('/system-settings')\n@admin_required\ndef system_settings():\n    \"\"\"System settings page\"\"\"\n    company_logo = SystemSettings.get_setting('company_logo', 'static/cully.png')\n    storage_location = SystemSettings.get_setting('default_storage_location', '/outputs/')\n\n    return render_template('system_settings.html',\n                         company_logo=company_logo,\n                         storage_location=storage_location)\n\n@dashboard_bp.route('/update-settings', methods=['POST'])\n@admin_required\ndef update_settings():\n    \"\"\"Update system settings\"\"\"\n    storage_location = request.form.get('storage_location', '').strip()\n\n    if storage_location:\n        SystemSettings.set_setting('default_storage_location', storage_location)\n        flash('Settings saved successfully.', 'success')\n    else:\n        flash('Storage location is required.', 'error')\n\n    return redirect(url_for('dashboard.system_settings'))\n\n@dashboard_bp.route('/reports')\n@admin_required\ndef admin_reports():\n    \"\"\"Admin reports view - placeholder\"\"\"\n    return render_template('admin_reports.html')\n\n@dashboard_bp.route('/create-report')\n@role_required(['Engineer'])\ndef create_report():\n    \"\"\"Create report - redirect to report type selector\"\"\"\n    return redirect(url_for('reports.new'))\n\n@dashboard_bp.route('/db-status')\n@login_required\ndef db_status():\n    \"\"\"Check database connection status\"\"\"\n    try:\n        # Try to connect to database\n        db.engine.connect().close()\n        return jsonify({'status': 'connected', 'message': 'Database connection successful'})\n    except Exception as e:\n        current_app.logger.error(f\"Database status check failed: {e}\")\n        return jsonify({'status': 'error', 'message': f'Database connection failed: {str(e)}'}), 500\n\n@dashboard_bp.route('/dashboard/api/admin/users')\n@admin_required\ndef api_admin_users():\n    \"\"\"API endpoint for user management data\"\"\"\n    try:\n        users = User.query.all()\n        users_data = []\n        for user in users:\n            users_data.append({\n                'id': user.id,\n                'full_name': user.full_name,\n                'email': user.email,\n                'role': user.role,\n                'status': user.status,\n                'created_date': user.created_date.isoformat() if user.created_date else None\n            })\n\n        return jsonify({\n            'success': True,\n            'users': users_data\n        })\n    except Exception as e:\n        current_app.logger.error(f\"Error fetching users: {e}\")\n        return jsonify({'success': False, 'error': str(e)})\n\n@dashboard_bp.route('/dashboard/api/admin/reports')\n@admin_required\ndef api_admin_reports():\n    \"\"\"API endpoint for reports data\"\"\"\n    try:\n        reports = Report.query.order_by(Report.created_at.desc()).limit(50).all()\n        reports_data = []\n\n        for report in reports:\n            # Get report title from SAT data if available\n            title = 'Untitled Report'\n            if hasattr(report, 'sat_report') and report.sat_report:\n                try:\n                    import json\n                    data = json.loads(report.sat_report.data_json)\n                    title = data.get('context', {}).get('DOCUMENT_TITLE', 'Untitled Report')\n                except:\n                    pass\n\n            # Determine status\n            status = 'pending'\n            if report.approvals_json:\n                try:\n                    import json\n                    approvals = json.loads(report.approvals_json)\n                    statuses = [a.get(\"status\", \"pending\") for a in approvals]\n                    if \"rejected\" in statuses:\n                        status = \"rejected\"\n                    elif all(s == \"approved\" for s in statuses):\n                        status = \"approved\"\n                    elif any(s == \"approved\" for s in statuses):\n                        status = \"partially_approved\"\n                except:\n                    pass\n\n            reports_data.append({\n                'id': report.id,\n                'title': title,\n                'user_email': report.user_email,\n                'status': status,\n                'created_at': report.created_at.isoformat() if report.created_at else None\n            })\n\n        return jsonify({\n            'success': True,\n            'reports': reports_data\n        })\n    except Exception as e:\n        current_app.logger.error(f\"Error fetching reports: {e}\")\n        return jsonify({'success': False, 'error': str(e)})\n\n@dashboard_bp.route('/dashboard/api/admin/settings')\n@admin_required\ndef api_admin_settings():\n    \"\"\"API endpoint for system settings\"\"\"\n    try:\n        storage_location = SystemSettings.get_setting('default_storage_location', '/outputs/')\n        company_logo = SystemSettings.get_setting('company_logo', 'static/cully.png')\n\n        return jsonify({\n            'success': True,\n            'settings': {\n                'storage_location': storage_location,\n                'company_logo': company_logo\n            }\n        })\n    except Exception as e:\n        current_app.logger.error(f\"Error fetching settings: {e}\")\n        return jsonify({'success': False, 'error': str(e)})\n\n@dashboard_bp.route('/dashboard/api/admin/stats')\n@admin_required\ndef api_admin_stats():\n    \"\"\"API endpoint for dashboard statistics\"\"\"\n    try:\n        users = User.query.all()\n        total_users = len(users)\n        pending_users = len([u for u in users if u.status == 'Pending'])\n        total_reports = Report.query.count()\n\n        return jsonify({\n            'success': True,\n            'stats': {\n                'total_users': total_users,\n                'pending_users': pending_users,\n                'total_reports': total_reports\n            }\n        })\n    except Exception as e:\n        current_app.logger.error(f\"Error fetching stats: {e}\")\n        return jsonify({'success': False, 'error': str(e)})\n\n@dashboard_bp.route('/my-reports')\n@role_required(['Engineer'])\ndef my_reports():\n    \"\"\"View engineer's own reports\"\"\"\n    from models import Report, SATReport\n    import json\n\n    # Get reports created by current user\n    reports = Report.query.filter_by(user_email=current_user.email).order_by(Report.updated_at.desc()).all()\n\n    report_list = []\n    for report in reports:\n        sat_report = SATReport.query.filter_by(report_id=report.id).first()\n        if not sat_report:\n            continue\n\n        try:\n            stored_data = json.loads(sat_report.data_json)\n        except json.JSONDecodeError:\n            current_app.logger.warning(f\"Could not decode SATReport data for report ID: {report.id}\")\n            stored_data = {} # Handle malformed JSON\n\n        try:\n            approvals = json.loads(report.approvals_json) if report.approvals_json else []\n        except json.JSONDecodeError:\n            current_app.logger.warning(f\"Could not decode approvals_json for report ID: {report.id}\")\n            approvals = [] # Handle malformed JSON\n\n        # Determine overall status\n        statuses = [a.get(\"status\", \"pending\") for a in approvals]\n        if \"rejected\" in statuses:\n            overall_status = \"rejected\"\n        elif all(status == \"approved\" for status in statuses):\n            overall_status = \"approved\"\n        elif any(status == \"approved\" for status in statuses):\n            overall_status = \"partially_approved\"\n        else:\n            overall_status = \"pending\"\n\n        report_list.append({\n            \"id\": report.id,\n            \"document_title\": stored_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\"),\n            \"client_name\": stored_data.get(\"context\", {}).get(\"CLIENT_NAME\", \"\"),\n            \"project_reference\": stored_data.get(\"context\", {}).get(\"PROJECT_REFERENCE\", \"\"),\n            \"created_at\": report.created_at,\n            \"updated_at\": report.updated_at,\n            \"status\": overall_status,\n            \"locked\": report.locked\n        })\n\n    return render_template('my_reports.html', reports=report_list)","size_bytes":24933},"routes/io_builder.py":{"content":"from flask import Blueprint, request, jsonify, current_app, render_template\nfrom flask_login import login_required, current_user\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\nfrom models import db, ModuleSpec\nimport time\nfrom urllib.parse import quote\n\nio_builder_bp = Blueprint('io_builder', __name__)\n\ndef get_unread_count():\n    \"\"\"Get unread notifications count with error handling\"\"\"\n    try:\n        from models import Notification\n        return Notification.query.filter_by(\n            user_email=current_user.email, \n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count: {e}\")\n        return 0\n\n@io_builder_bp.route('/')\n@login_required\ndef index():\n    \"\"\"IO Builder main page\"\"\"\n    try:\n        unread_count = get_unread_count()\n        return render_template('io_builder.html', unread_count=unread_count)\n    except Exception as e:\n        current_app.logger.error(f\"Error rendering io_builder index: {e}\")\n        # Fallback to a default render_template or error page\n        return render_template('io_builder.html', unread_count=0)\n\n# Vendor-specific search configurations\nVENDOR_CONFIGS = {\n    'ABB': {\n        'search_domain': 'site:abb.com',\n        'common_models': ['DI810', 'DO810', 'AI810', 'AO810', 'DI820', 'DO820'],\n        'signal_prefix': {\n            'digital_input': 'DI',\n            'digital_output': 'DO',\n            'analog_input': 'AI',\n            'analog_output': 'AO'\n        }\n    },\n    'SIEMENS': {\n        'search_domain': 'site:siemens.com',\n        'common_models': ['SM1221', 'SM1222', 'SM1231', 'SM1232', 'SM1234'],\n        'signal_prefix': {\n            'digital_input': 'DI',\n            'digital_output': 'DQ',\n            'analog_input': 'AI',\n            'analog_output': 'AQ'\n        }\n    },\n    'SCHNEIDER': {\n        'search_domain': 'site:schneider-electric.com',\n        'common_models': ['TM5SDI6D', 'TM5SDO6T', 'TM5SAI4L', 'TM5SAO4L'],\n        'signal_prefix': {\n            'digital_input': 'DI',\n            'digital_output': 'DO',\n            'analog_input': 'AI',\n            'analog_output': 'AO'\n        }\n    },\n    'ROCKWELL': {\n        'search_domain': 'site:rockwellautomation.com',\n        'common_models': ['1756-IB16', '1756-OB16', '1756-IF8', '1756-OF8'],\n        'signal_prefix': {\n            'digital_input': 'DI',\n            'digital_output': 'DO',\n            'analog_input': 'AI',\n            'analog_output': 'AO'\n        }\n    },\n    'OMRON': {\n        'search_domain': 'site:omron.com',\n        'common_models': ['CJ1W-ID211', 'CJ1W-OD211', 'CJ1W-AD041-V1'],\n        'signal_prefix': {\n            'digital_input': 'DI',\n            'digital_output': 'DO',\n            'analog_input': 'AI',\n            'analog_output': 'AO'\n        }\n    }\n}\n\n@io_builder_bp.route('/api/vendors', methods=['GET'])\n@login_required\ndef get_vendors():\n    \"\"\"Get list of supported vendors\"\"\"\n    try:\n        vendors = list(VENDOR_CONFIGS.keys())\n        return jsonify({'success': True, 'vendors': vendors})\n    except Exception as e:\n        current_app.logger.error(f\"Error fetching vendors: {e}\")\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@io_builder_bp.route('/api/module-lookup', methods=['POST'])\n@login_required\ndef lookup_module():\n    \"\"\"Lookup module specifications from database or web\"\"\"\n    try:\n        data = request.get_json()\n        company = data.get('company', '').strip().upper()\n        model = data.get('model', '').strip().upper()\n\n        if not company or not model:\n            return jsonify({'success': False, 'error': 'Company and model are required'}), 400\n\n        # First check database\n        spec = ModuleSpec.query.filter_by(company=company, model=model).first()\n\n        if spec and spec.verified:\n            current_app.logger.info(f\"Found cached module spec: {company} {model}\")\n            return jsonify({'success': True, 'module': spec.to_dict(), 'source': 'database'})\n\n        # If not found or not verified, search web\n        current_app.logger.info(f\"Searching web for module: {company} {model}\")\n        web_spec = search_module_web(company, model)\n\n        if web_spec:\n            # Update or create database entry\n            if not spec:\n                spec = ModuleSpec(company=company, model=model)\n                db.session.add(spec)\n            \n            try:\n                # Update with web data\n                for key, value in web_spec.items():\n                    if hasattr(spec, key) and value is not None:\n                        setattr(spec, key, value)\n\n                spec.verified = True\n                db.session.commit()\n\n                return jsonify({'success': True, 'module': spec.to_dict(), 'source': 'web'})\n            except Exception as db_error:\n                current_app.logger.warning(f\"Database update failed: {db_error}\")\n                db.session.rollback()\n                \n                # If there's a constraint violation, try to fetch the existing record\n                if \"unique constraint\" in str(db_error).lower():\n                    existing_spec = ModuleSpec.query.filter_by(company=company, model=model).first()\n                    if existing_spec:\n                        return jsonify({'success': True, 'module': existing_spec.to_dict(), 'source': 'database'})\n                \n                # Return the web spec data directly without saving\n                fallback_spec = {\n                    'company': company,\n                    'model': model,\n                    'description': web_spec.get('description', f'{company} {model}'),\n                    'digital_inputs': web_spec.get('digital_inputs', 0),\n                    'digital_outputs': web_spec.get('digital_outputs', 0),\n                    'analog_inputs': web_spec.get('analog_inputs', 0),\n                    'analog_outputs': web_spec.get('analog_outputs', 0),\n                    'voltage_range': web_spec.get('voltage_range', '24 VDC'),\n                    'current_range': web_spec.get('current_range', '4-20mA'),\n                    'verified': False,\n                    'total_channels': (web_spec.get('digital_inputs', 0) + web_spec.get('digital_outputs', 0) + \n                                     web_spec.get('analog_inputs', 0) + web_spec.get('analog_outputs', 0))\n                }\n                return jsonify({'success': True, 'module': fallback_spec, 'source': 'web'})\n\n        # Return empty spec for manual entry\n        fallback_spec = {\n            'company': company,\n            'model': model,\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'verified': False,\n            'total_channels': 0\n        }\n\n        return jsonify({'success': True, 'module': fallback_spec, 'source': 'manual'})\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in module lookup: {e}\")\n        return jsonify({'success': False, 'error': str(e)}), 500\n\ndef search_module_web(company, model):\n    \"\"\"Search web for module specifications\"\"\"\n    try:\n        vendor_config = VENDOR_CONFIGS.get(company.upper())\n        if not vendor_config:\n            return None\n\n        # Construct search query\n        search_query = f\"{vendor_config['search_domain']} {model} datasheet specifications\"\n\n        current_app.logger.info(f\"Simulating web search for: {company} {model}\")\n        hardcoded_specs = get_hardcoded_module_specs()\n        key = f\"{company.upper()}_{model.upper()}\"\n\n        if key in hardcoded_specs:\n            current_app.logger.info(f\"Found hardcoded spec for {key}\")\n            return hardcoded_specs[key]\n        else:\n            # Handle specific modules mentioned by user\n            if model.upper() == 'DA501':\n                current_app.logger.info(f\"Found DA501 module specification\")\n                return {\n                    'description': '16 Channel Digital Input, 24VDC; 4 Analog Input, U, I, RTD; 2 Analog Output, U, I; 8 Configurable DI/DO, 24VDC 0.5A',\n                    'digital_inputs': 24,  # 16 DI + 8 configurable as DI\n                    'digital_outputs': 8,  # 8 configurable as DO\n                    'analog_inputs': 4,\n                    'analog_outputs': 2,\n                    'voltage_range': '24 VDC',\n                    'current_range': '4-20mA',\n                    'signal_type': 'Mixed',\n                    'verified': True\n                }\n\n            # For unknown modules, return a basic template that user can modify\n            current_app.logger.info(f\"Module {company} {model} not found. Returning template for manual entry.\")\n            return {\n                'description': f'{company} {model} - Manual Entry Required',\n                'digital_inputs': 0,\n                'digital_outputs': 0,\n                'analog_inputs': 0,\n                'analog_outputs': 0,\n                'voltage_range': '24 VDC',\n                'current_range': '4-20mA',\n                'signal_type': 'Unknown'\n            }\n\n    except Exception as e:\n        current_app.logger.error(f\"Error searching web for module {company} {model}: {e}\")\n        return None\n\ndef get_hardcoded_module_specs():\n    \"\"\"Hardcoded module specifications for common industrial I/O modules\"\"\"\n    return {\n        'ABB_DI810': {\n            'description': '16-channel 24 VDC Digital Input Module',\n            'digital_inputs': 16,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital'\n        },\n        'ABB_DO810': {\n            'description': '16-channel 24 VDC Digital Output Module',\n            'digital_inputs': 0,\n            'digital_outputs': 16,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital'\n        },\n        'ABB_AI810': {\n            'description': '8-channel Analog Input Module',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 8,\n            'analog_outputs': 0,\n            'voltage_range': '0-10V',\n            'current_range': '4-20mA',\n            'resolution': '12-bit',\n            'signal_type': 'Analog'\n        },\n        'ABB_AO810': {\n            'description': '8-channel Analog Output Module',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 8,\n            'voltage_range': '0-10V',\n            'current_range': '4-20mA',\n            'resolution': '12-bit',\n            'signal_type': 'Analog'\n        },\n        'SIEMENS_SM1221': {\n            'description': '16-channel Digital Input Module',\n            'digital_inputs': 16,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital'\n        },\n        'SIEMENS_SM1222': {\n            'description': '16-channel Digital Output Module',\n            'digital_inputs': 0,\n            'digital_outputs': 16,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital'\n        },\n        'SIEMENS_SM1231': {\n            'description': '8-channel Analog Input Module',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 8,\n            'analog_outputs': 0,\n            'voltage_range': '0-10V',\n            'current_range': '4-20mA',\n            'resolution': '16-bit',\n            'signal_type': 'Analog'\n        },\n        'SIEMENS_SM1232': {\n            'description': '4-channel Analog Output Module',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 4,\n            'voltage_range': '0-10V',\n            'current_range': '4-20mA',\n            'resolution': '16-bit',\n            'signal_type': 'Analog'\n        }\n    }\n\n\n\n@io_builder_bp.route('/api/generate-io-table', methods=['POST'])\n@login_required\ndef generate_io_table():\n    \"\"\"Generate I/O table based on module configuration\"\"\"\n    try:\n        data = request.get_json()\n        modules = data.get('modules', [])\n        modbus_ranges = data.get('modbus_ranges', [])\n\n        if not modules and not modbus_ranges:\n            return jsonify({'success': False, 'error': 'No modules or Modbus ranges provided'}), 400\n\n        # Generate standard I/O tables\n        digital_inputs = []\n        digital_outputs = []\n        analog_inputs = []\n        analog_outputs = []\n        current_sno = 1\n\n        for module in modules:\n            company = module.get('company', '').upper()\n            model = module.get('model', '').upper()\n            rack_no = module.get('rack_no', '0')\n            module_position = module.get('module_position', '1')\n            starting_sno = module.get('starting_sno', current_sno)\n\n            # Get module specs from database first\n            spec = ModuleSpec.query.filter_by(company=company, model=model).first()\n\n            # If spec found in database, use it\n            if spec and spec.verified:\n                current_app.logger.info(f\"Using database spec for {company} {model}\")\n            else:\n                # Try hardcoded specs\n                hardcoded_specs = get_hardcoded_module_specs()\n                key = f\"{company}_{model}\"\n\n                if key in hardcoded_specs:\n                    spec_data = hardcoded_specs[key]\n                    current_app.logger.info(f\"Using hardcoded spec for {key}\")\n                    # Create a temporary spec object for processing\n                    spec = type('MockSpec', (), {})()  # Create a simple object\n                    for k, v in spec_data.items():\n                        setattr(spec, k, v)\n                else:\n                    # Use module data from the request (includes manual overrides from frontend)\n                    current_app.logger.info(f\"Using module spec data from request for {company} {model}\")\n                    module_spec = module.get('spec', {})\n                    spec = type('MockSpec', (), {})()  # Create a simple object\n\n                    # Try spec object first, then fall back to top-level module properties\n                    spec.digital_inputs = int(module_spec.get('digital_inputs') or module.get('digital_inputs', 0) or 0)\n                    spec.digital_outputs = int(module_spec.get('digital_outputs') or module.get('digital_outputs', 0) or 0)\n                    spec.analog_inputs = int(module_spec.get('analog_inputs') or module.get('analog_inputs', 0) or 0)\n                    spec.analog_outputs = int(module_spec.get('analog_outputs') or module.get('analog_outputs', 0) or 0)\n                    spec.voltage_range = module_spec.get('voltage_range', '24 VDC')\n                    spec.current_range = module_spec.get('current_range', '4-20mA')\n                    spec.description = module_spec.get('description', f'{company} {model}')\n                    spec.verified = True\n\n            if not spec:\n                current_app.logger.warning(f\"Skipping module {company} {model} as no specifications could be found.\")\n                continue\n\n            # Debug logging\n            current_app.logger.info(f\"Processing module {company} {model} with spec: {spec if hasattr(spec, '__dict__') else 'dict-like object'}\")\n            if hasattr(spec, '__dict__'):\n                current_app.logger.info(f\"Spec attributes: {spec.__dict__}\")\n            else:\n                current_app.logger.info(f\"Spec values: DI={getattr(spec, 'digital_inputs', 'N/A')}, DO={getattr(spec, 'digital_outputs', 'N/A')}, AI={getattr(spec, 'analog_inputs', 'N/A')}, AO={getattr(spec, 'analog_outputs', 'N/A')}\")\n\n            vendor_config = VENDOR_CONFIGS.get(company, {})\n            signal_prefixes = vendor_config.get('signal_prefix', {\n                'digital_input': 'DI',\n                'digital_output': 'DO',\n                'analog_input': 'AI',\n                'analog_output': 'AO'\n            })\n\n            # Ensure spec attributes are integers for range calculations\n            try:\n                # Handle both database objects and dict-like objects\n                if hasattr(spec, 'digital_inputs'):\n                    # Use safe conversion - handle None, empty strings, and invalid values\n                    spec.digital_inputs = int(spec.digital_inputs or 0)\n                    spec.digital_outputs = int(spec.digital_outputs or 0)\n                    spec.analog_inputs = int(spec.analog_inputs or 0)\n                    spec.analog_outputs = int(spec.analog_outputs or 0)\n                else:\n                    # For dict-like objects, ensure they have the required attributes\n                    for attr in ['digital_inputs', 'digital_outputs', 'analog_inputs', 'analog_outputs']:\n                        if not hasattr(spec, attr):\n                            setattr(spec, attr, 0)\n\n                    # Safe conversion with None checking\n                    di_val = getattr(spec, 'digital_inputs', 0) or 0\n                    do_val = getattr(spec, 'digital_outputs', 0) or 0\n                    ai_val = getattr(spec, 'analog_inputs', 0) or 0\n                    ao_val = getattr(spec, 'analog_outputs', 0) or 0\n\n                    spec.digital_inputs = int(di_val)\n                    spec.digital_outputs = int(do_val)\n                    spec.analog_inputs = int(ai_val)\n                    spec.analog_outputs = int(ao_val)\n\n            except (ValueError, TypeError) as e:\n                current_app.logger.warning(f\"Invalid channel counts for module {company} {model}: {e}, using zeros\")\n                spec.digital_inputs = 0\n                spec.digital_outputs = 0\n                spec.analog_inputs = 0\n                spec.analog_outputs = 0\n\n            sno = int(starting_sno)\n\n            # Convert rack_no and module_position to integers for formatting\n            rack_no_int = int(rack_no) if isinstance(rack_no, str) and rack_no.isdigit() else int(rack_no)\n            module_position_int = int(module_position) if isinstance(module_position, str) and module_position.isdigit() else int(module_position)\n\n            # Generate digital input signals\n            for i in range(spec.digital_inputs):\n                signal_tag = f\"{signal_prefixes['digital_input']}_{rack_no_int:02d}_{module_position_int:02d}_{i:02d}\"\n                digital_inputs.append({\n                    'sno': sno,\n                    'rack_no': rack_no,\n                    'module_position': module_position,\n                    'signal_tag': signal_tag,\n                    'signal_description': f\"Digital Input {i+1} - {company} {model}\",\n                    'result': '',\n                    'punch_item': '',\n                    'verified_by': '',\n                    'comment': f\"Module: {company} {model}\"\n                })\n                sno += 1\n\n            # Generate digital output signals\n            for i in range(spec.digital_outputs):\n                signal_tag = f\"{signal_prefixes['digital_output']}_{rack_no_int:02d}_{module_position_int:02d}_{i:02d}\"\n                digital_outputs.append({\n                    'sno': sno,\n                    'rack_no': rack_no,\n                    'module_position': module_position,\n                    'signal_tag': signal_tag,\n                    'signal_description': f\"Digital Output {i+1} - {company} {model}\",\n                    'result': '',\n                    'punch_item': '',\n                    'verified_by': '',\n                    'comment': f\"Module: {company} {model}\"\n                })\n                sno += 1\n\n            # Generate analog input signals\n            for i in range(spec.analog_inputs):\n                signal_tag = f\"{signal_prefixes['analog_input']}_{rack_no_int:02d}_{module_position_int:02d}_{i:02d}\"\n                analog_inputs.append({\n                    'sno': sno,\n                    'rack_no': rack_no,\n                    'module_position': module_position,\n                    'signal_tag': signal_tag,\n                    'signal_description': f\"Analog Input {i+1} - {company} {model}\",\n                    'result': '',\n                    'punch_item': '',\n                    'verified_by': '',\n                    'comment': f\"Module: {company} {model}, Range: {getattr(spec, 'voltage_range', None) or getattr(spec, 'current_range', None) or 'N/A'}\"\n                })\n                sno += 1\n\n            # Generate analog output signals\n            for i in range(spec.analog_outputs):\n                signal_tag = f\"{signal_prefixes['analog_output']}_{rack_no_int:02d}_{module_position_int:02d}_{i:02d}\"\n                analog_outputs.append({\n                    'sno': sno,\n                    'rack_no': rack_no,\n                    'module_position': module_position,\n                    'signal_tag': signal_tag,\n                    'signal_description': f\"Analog Output {i+1} - {company} {model}\",\n                    'result': '',\n                    'punch_item': '',\n                    'verified_by': '',\n                    'comment': f\"Module: {company} {model}, Range: {getattr(spec, 'voltage_range', None) or getattr(spec, 'current_range', None) or 'N/A'}\"\n                })\n                sno += 1\n\n            current_sno = sno\n\n        # Generate Modbus tables\n        modbus_digital = []\n        modbus_analog = []\n\n        for modbus_range in modbus_ranges:\n            start_addr = modbus_range.get('start_address', 0)\n            end_addr = modbus_range.get('end_address', 0)\n            data_type = modbus_range.get('data_type', 'coils')  # coils, discretes, holding, input\n            description_prefix = modbus_range.get('description', 'Modbus')\n\n            for addr in range(start_addr, end_addr + 1):\n                if data_type in ['coils', 'discretes']:\n                    # Digital Modbus signals\n                    modbus_digital.append({\n                        'address': addr,\n                        'description': f\"{description_prefix} {data_type.title()} {addr}\",\n                        'remarks': f\"Modbus {data_type}\",\n                        'result': '',\n                        'punch_item': '',\n                        'verified_by': '',\n                        'comment': f\"Address: {addr}\"\n                    })\n                else:\n                    # Analog Modbus signals (holding/input registers)\n                    modbus_analog.append({\n                        'address': addr,\n                        'description': f\"{description_prefix} Register {addr}\",\n                        'range': modbus_range.get('range', 'N/A'),\n                        'result': '',\n                        'punch_item': '',\n                        'verified_by': '',\n                        'comment': f\"Register: {addr}\"\n                    })\n\n        return jsonify({\n            'success': True,\n            'tables': {\n                'digital_inputs': digital_inputs,\n                'digital_outputs': digital_outputs,\n                'analog_inputs': analog_inputs,\n                'analog_outputs': analog_outputs,\n                'modbus_digital': modbus_digital,\n                'modbus_analog': modbus_analog\n            },\n            'summary': {\n                'total_digital_inputs': len(digital_inputs),\n                'total_digital_outputs': len(digital_outputs),\n                'total_analog_inputs': len(analog_inputs),\n                'total_analog_outputs': len(analog_outputs),\n                'total_modbus_digital': len(modbus_digital),\n                'total_modbus_analog': len(modbus_analog),\n                'modules_processed': len(modules),\n                'modbus_ranges_processed': len(modbus_ranges)\n            }\n        })\n\n    except Exception as e:\n        current_app.logger.error(f\"Error generating I/O table: {e}\")\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@io_builder_bp.route('/api/save-custom-module', methods=['POST'])\n@login_required\ndef save_custom_module():\n    \"\"\"Save custom module specification to database\"\"\"\n    try:\n        data = request.get_json()\n\n        spec = ModuleSpec(\n            company=data.get('company', '').upper(),\n            model=data.get('model', '').upper(),\n            description=data.get('description', ''),\n            digital_inputs=data.get('digital_inputs', 0),\n            digital_outputs=data.get('digital_outputs', 0),\n            analog_inputs=data.get('analog_inputs', 0),\n            analog_outputs=data.get('analog_outputs', 0),\n            voltage_range=data.get('voltage_range'),\n            current_range=data.get('current_range'),\n            resolution=data.get('resolution'),\n            signal_type=data.get('signal_type'),\n            verified=True  # User-provided specs are considered verified\n        )\n\n        # Check if a spec with the same company and model already exists\n        existing_spec = ModuleSpec.query.filter_by(company=spec.company, model=spec.model).first()\n        if existing_spec:\n            # Update existing spec instead of adding a new one\n            for key, value in data.items():\n                if hasattr(existing_spec, key) and value is not None:\n                    setattr(existing_spec, key, value)\n            existing_spec.verified = True # Ensure it's marked as verified\n            db.session.commit()\n            return jsonify({'success': True, 'message': 'Module specification updated successfully'})\n        else:\n            # Add new spec\n            db.session.add(spec)\n            db.session.commit()\n            return jsonify({'success': True, 'message': 'Module specification saved successfully'})\n\n    except Exception as e:\n        current_app.logger.error(f\"Error saving custom module: {e}\")\n        return jsonify({'success': False, 'error': str(e)}), 500","size_bytes":26032},"routes/main.py":{"content":"from flask import Blueprint, request, jsonify, render_template, redirect, url_for, flash, send_file, current_app\nfrom flask_login import current_user\nfrom auth import login_required\nimport json\nimport os\nimport uuid\nimport datetime as dt\n\ntry:\n    from models import db, Report, SATReport, test_db_connection\nexcept ImportError as e:\n    print(f\"Warning: Could not import models: {e}\")\n    db = None\n    Report = None\n    SATReport = None\n    test_db_connection = lambda: False\n\ntry:\n    from utils import (load_submissions, save_submissions, send_edit_link,\n                  setup_approval_workflow, process_table_rows, handle_image_removals,\n                  allowed_file, save_uploaded_file, generate_sat_report as create_docx_from_template)\nexcept ImportError as e:\n    print(f\"Warning: Could not import utils: {e}\")\n    generate_sat_report = None\n    create_docx_from_template = None\n    convert_to_pdf = None\n\ndef setup_approval_workflow_db(report, approver_emails):\n    \"\"\"Set up approval workflow for database-stored reports\"\"\"\n    approvals = []\n    valid_emails = [email for email in approver_emails if email]\n    \n    for i, email in enumerate(valid_emails, 1):\n        approvals.append({\n            \"stage\": i,\n            \"approver_email\": email,\n            \"status\": \"pending\",\n            \"approved_at\": None,\n            \"signature\": None\n        })\n    \n    # Lock the report if there are approvers\n    locked = len(valid_emails) > 0\n    return approvals, locked\n\ndef send_approval_link(email, submission_id, stage):\n    \"\"\"Send approval link to approver\"\"\"\n    try:\n        from flask import url_for\n        from utils import send_email\n        \n        approval_url = url_for('approval.approve', submission_id=submission_id, stage=stage, _external=True)\n        subject = f\"SAT Report Approval Required - Stage {stage}\"\n        body = f\"\"\"\n        You have been assigned to review and approve a SAT report.\n        \n        Please click the following link to review and approve:\n        {approval_url}\n        \n        Submission ID: {submission_id}\n        Stage: {stage}\n        \"\"\"\n        \n        return send_email(email, subject, body)\n    except Exception as e:\n        current_app.logger.error(f\"Error sending approval link: {e}\")\n        return False\n\ndef create_approval_notification(approver_email, submission_id, stage, document_title):\n    \"\"\"Create approval notification\"\"\"\n    try:\n        from models import Notification, db\n        \n        notification = Notification(\n            user_email=approver_email,\n            title=\"New Approval Request\",\n            message=f\"You have a new approval request for: {document_title}\",\n            type=\"approval\",\n            read=False\n        )\n        db.session.add(notification)\n        db.session.commit()\n        return True\n    except Exception as e:\n        current_app.logger.error(f\"Error creating approval notification: {e}\")\n        return False\n\ndef create_new_submission_notification(admin_emails, submission_id, document_title, submitter_email):\n    \"\"\"Create new submission notification for admins\"\"\"\n    try:\n        from models import Notification, db\n        \n        for email in admin_emails:\n            notification = Notification(\n                user_email=email,\n                title=\"New Report Submission\",\n                message=f\"New report submitted: {document_title} by {submitter_email}\",\n                type=\"submission\",\n                read=False\n            )\n            db.session.add(notification)\n        \n        db.session.commit()\n        return True\n    except Exception as e:\n        current_app.logger.error(f\"Error creating submission notifications: {e}\")\n        return False\n\nmain_bp = Blueprint('main', __name__)\n\n@main_bp.route('/')\n@login_required\ndef index():\n    \"\"\"Render the main form with empty data for a new submission\"\"\"\n    # Redirect to SAT form if user is logged in and it's the main entry point\n    return redirect(url_for('main.sat_form'))\n\n@main_bp.route('/sat_form', methods=['GET', 'POST'])\n@login_required\ndef sat_form():\n    \"\"\"Render the SAT form (index.html) for creating a new report\"\"\"\n    from flask import session\n\n    # Handle POST request from wizard\n    if request.method == 'POST':\n        # Get the form data from the wizard\n        wizard_data = {\n            'document_title': request.form.get('document_title', ''),\n            'project_reference': request.form.get('project_reference', ''),\n            'client_name': request.form.get('client_name', ''),\n            'date': request.form.get('date', ''),\n            'prepared_by': request.form.get('prepared_by', ''),\n            'revision': request.form.get('revision', ''),\n            'purpose': request.form.get('purpose', ''),\n            'scope': request.form.get('scope', ''),\n            'approver_1_email': request.form.get('approver_1_email', ''),\n            'approver_2_email': request.form.get('approver_2_email', ''),\n            'approver_3_email': request.form.get('approver_3_email', ''),\n        }\n        # Store in session for rendering\n        session['wizard_data'] = wizard_data\n\n    # Check if we have wizard data in the session\n    wizard_data = session.pop('wizard_data', {})\n\n    # Pre-populate submission_data with wizard data if available\n    submission_data = {}\n    if wizard_data:\n        submission_data.update({\n            'DOCUMENT_TITLE': wizard_data.get('document_title', ''),\n            'PROJECT_REFERENCE': wizard_data.get('project_reference', ''),\n            'CLIENT_NAME': wizard_data.get('client_name', ''),\n            'DATE': wizard_data.get('date', ''),\n            'PREPARED_BY': wizard_data.get('prepared_by', ''),\n            'REVISION': wizard_data.get('revision', ''),\n            'PURPOSE': wizard_data.get('purpose', ''),\n            'SCOPE': wizard_data.get('scope', ''),\n            'approver_1_email': wizard_data.get('approver_1_email', ''),\n            'approver_2_email': wizard_data.get('approver_2_email', ''),\n            'approver_3_email': wizard_data.get('approver_3_email', ''),\n        })\n\n    # Always render the SAT.html template (the full SAT form)\n    return render_template(\n        'SAT.html',\n        submission_data=submission_data,\n        user_role=current_user.role if hasattr(current_user, 'role') else 'user'\n    )\n\n@main_bp.route('/edit/<submission_id>')\n@login_required\ndef edit_submission(submission_id):\n    \"\"\"Edit an existing submission (if not yet locked)\"\"\"\n    try:\n        from models import Report, SATReport\n\n        # Get report from database\n        report = Report.query.get(submission_id)\n        if not report:\n            flash(\"Submission not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Check if the current user is authorized to edit based on approval status\n        if report.locked:\n            flash(\"This submission is locked and cannot be edited\", \"warning\")\n            return redirect(url_for('status.view_status', submission_id=submission_id))\n\n        # Check if the current user is authorized to edit\n        if current_user.role != 'admin' and report.user_email != current_user.email:\n            flash(\"You are not authorized to edit this submission.\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Get SAT report data\n        sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n        if not sat_report:\n            flash(\"SAT report data not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Parse the stored data\n        stored_data = json.loads(sat_report.data_json)\n        context_data = stored_data.get(\"context\", {})\n\n        return render_template('SAT.html',\n                              submission_data=context_data,\n                              submission_id=submission_id,\n                              user_role=current_user.role if hasattr(current_user, 'role') else 'user',\n                              edit_mode=True)\n    except Exception as e:\n        current_app.logger.error(f\"Error in edit_submission: {e}\", exc_info=True)\n        current_app.logger.error(f\"Template rendering error: {str(e)}\")\n        flash(\"An error occurred while loading the submission\", \"error\")\n        return redirect(url_for('dashboard.my_reports'))\n\n@main_bp.route('/generate', methods=['POST'])\n@login_required\ndef generate():\n    \"\"\"Generate a SAT report from form data\"\"\"\n    try:\n        # Log request details for debugging\n        current_app.logger.info(f\"Generate request from: {request.remote_addr}\")\n        current_app.logger.info(f\"Request headers: {request.headers}\")\n        current_app.logger.info(f\"Request form data keys: {list(request.form.keys())}\")\n\n        # Import database models\n        from models import db, Report, SATReport\n\n        # Retrieve submission id and current report\n        submission_id = request.form.get(\"submission_id\", \"\")\n\n        # Create a new submission ID if needed\n        if not submission_id:\n            submission_id = str(uuid.uuid4())\n\n        # Get or create report record\n        report = Report.query.get(submission_id)\n        is_new_report = False\n        if not report:\n            is_new_report = True\n            report = Report(\n                id=submission_id,\n                type='SAT',\n                status='DRAFT',\n                user_email=current_user.email if hasattr(current_user, 'email') else '',\n                approvals_json='[]',\n                version='R0'  # Always start with R0 for new reports\n            )\n            db.session.add(report)\n        else:\n            # This is an edit/resubmit - increment version\n            if not is_new_report:\n                current_version = report.version or 'R0'\n                if current_version.startswith('R'):\n                    try:\n                        version_num = int(current_version[1:])\n                        report.version = f'R{version_num + 1}'\n                    except ValueError:\n                        report.version = 'R1'\n                else:\n                    report.version = 'R1'\n                current_app.logger.info(f\"Version incremented to: {report.version}\")\n\n            # Reset approval workflow for resubmission\n            report.status = 'DRAFT'\n            report.locked = False\n            report.approval_notification_sent = False\n\n        # Get or create SAT report record\n        sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n        if not sat_report:\n            sat_report = SATReport(\n                report_id=submission_id,\n                data_json='{}',\n                scada_image_urls='[]',\n                trends_image_urls='[]',\n                alarm_image_urls='[]'\n            )\n            db.session.add(sat_report)\n\n        # Load existing data for processing\n        existing_data = json.loads(sat_report.data_json) if sat_report.data_json != '{}' else {}\n        sub = existing_data  # For compatibility with existing code\n\n        # Grab the approver emails from the form\n        approver_emails = [\n            request.form.get(\"approver_1_email\", \"\").strip(),\n            request.form.get(\"approver_2_email\", \"\").strip(),\n            request.form.get(\"approver_3_email\", \"\").strip(),\n        ]\n\n        # Initialize (or update) the approvals list and lock flag\n        approvals, locked = setup_approval_workflow_db(report, approver_emails)\n        report.locked = locked\n        report.approvals_json = json.dumps(approvals)\n\n        # Create the upload directory for this submission\n        upload_dir = os.path.join(current_app.config['UPLOAD_ROOT'], submission_id)\n        os.makedirs(upload_dir, exist_ok=True)\n\n        # Initialize image URLs lists from database\n        scada_urls = json.loads(sat_report.scada_image_urls) if sat_report.scada_image_urls else []\n        trends_urls = json.loads(sat_report.trends_image_urls) if sat_report.trends_image_urls else []\n        alarm_urls = json.loads(sat_report.alarm_image_urls) if sat_report.alarm_image_urls else []\n\n        # Initialize DocxTemplate\n        from docxtpl import DocxTemplate, InlineImage\n        from docx.shared import Mm\n        from werkzeug.utils import secure_filename\n        import base64\n        import time\n        import shutil\n\n        doc = DocxTemplate(current_app.config['TEMPLATE_FILE'])\n\n        # Process signature data\n        sig_data_url = request.form.get(\"sig_prepared_data\", \"\")\n        SIG_PREPARED = \"\"\n\n        if sig_data_url:\n            # Parse and save the signature data\n            try:\n                # strip \"data:image/png;base64,\"\n                if \",\" in sig_data_url:\n                    header, encoded = sig_data_url.split(\",\", 1)\n                    data = base64.b64decode(encoded)\n\n                    # Ensure unique filename\n                    fn = f\"{submission_id}_prepared_{int(time.time())}.png\"\n                    sig_folder = current_app.config['SIGNATURES_FOLDER']\n                    os.makedirs(sig_folder, exist_ok=True)  # Ensure folder exists\n                    out_path = os.path.join(sig_folder, fn)\n\n                    # Write signature file\n                    with open(out_path, \"wb\") as f:\n                        f.write(data)\n\n                    # Verify the file was created successfully\n                    if os.path.exists(out_path) and os.path.getsize(out_path) > 0:\n                        # Store signature filename in two places for redundancy\n                        sub.setdefault(\"context\", {})[\"prepared_signature\"] = fn\n                        sub[\"prepared_signature\"] = fn  # Store in root of submission as well\n\n                        # Add timestamp for the preparer\n                        current_timestamp = dt.datetime.now().isoformat()\n                        sub.setdefault(\"context\", {})[\"prepared_timestamp\"] = current_timestamp\n\n                        # Log success with full path info\n                        current_app.logger.info(f\"Stored preparer signature as {fn}\")\n                        current_app.logger.info(f\"Absolute signature path: {os.path.abspath(out_path)}\")\n                        current_app.logger.info(f\"File exists: {os.path.exists(out_path)}\")\n\n                        # Create InlineImage for immediate use\n                        try:\n                            SIG_PREPARED = InlineImage(doc, out_path, width=Mm(40))\n                            current_app.logger.info(\"Successfully created InlineImage for signature\")\n                        except Exception as e:\n                            current_app.logger.error(f\"Error creating preparer signature image: {e}\")\n                    else:\n                        current_app.logger.error(f\"Signature file not created or empty: {out_path}\")\n                else:\n                    current_app.logger.error(\"Invalid signature data format\")\n            except Exception as e:\n                current_app.logger.error(f\"Error processing signature data: {e}\", exc_info=True)\n\n        # Initialize approval signatures\n        SIG_APPROVER_1 = \"\"\n        SIG_APPROVER_2 = \"\"\n        SIG_APPROVER_3 = \"\"\n\n        # Improved image file handling\n        def save_new(field, url_list, inline_list):\n            \"\"\"Save new uploaded files with better error handling and path resolution\"\"\"\n            for f in request.files.getlist(field):\n                if not f or not f.filename:\n                    continue\n\n                try:\n                    # Create a secure filename and ensure uniqueness\n                    fn = secure_filename(f.filename)\n                    uniq_fn = f\"{uuid.uuid4().hex}_{fn}\"\n\n                    # Ensure the upload directory exists\n                    os.makedirs(upload_dir, exist_ok=True)\n\n                    # Create absolute path for file storage\n                    disk_fp = os.path.join(upload_dir, uniq_fn)\n\n                    # Save the file\n                    f.save(disk_fp)\n                    current_app.logger.info(f\"Saved uploaded file to: {disk_fp}\")\n\n                    # Create proper URL and add image object\n                    try:\n                        # Process image and create scaled inline version\n                        from PIL import Image\n                        with Image.open(disk_fp) as img:\n                            w, h = img.size\n\n                        # Calculate scale to fit max width\n                        max_w_mm = 150\n                        scale = min(1, max_w_mm / (w * 0.264583))\n\n                        # 1) Add public URL for edit-mode preview\n                        # Use posix-style paths for URLs (forward slashes)\n                        rel_path = os.path.join(\"uploads\", submission_id, uniq_fn).replace(\"\\\\\", \"/\")\n                        url = url_for(\"static\", filename=rel_path)\n                        url_list.append(url)\n                        current_app.logger.info(f\"Added image URL: {url}\")\n\n                        # 2) Build InlineImage for DOCX\n                        inline_list.append(\n                            InlineImage(doc, disk_fp,\n                                width=Mm(w * 0.264583 * scale),\n                                height=Mm(h * 0.264583 * scale)\n                            )\n                        )\n                        current_app.logger.info(f\"Created InlineImage for: {uniq_fn}\")\n                    except Exception as e:\n                        current_app.logger.error(f\"Error processing image {fn}: {e}\", exc_info=True)\n                        # Add default size if image processing fails\n                        rel_path = os.path.join(\"uploads\", submission_id, uniq_fn).replace(\"\\\\\", \"/\")\n                        url = url_for(\"static\", filename=rel_path)\n                        url_list.append(url)\n                        inline_list.append(\n                            InlineImage(doc, disk_fp, width=Mm(100), height=Mm(80))\n                        )\n                        current_app.logger.info(f\"Created fallback InlineImage for: {uniq_fn}\")\n                except Exception as e:\n                    current_app.logger.error(f\"Failed to save file {f.filename}: {e}\", exc_info=True)\n\n        # Remove images flagged for deletion\n        handle_image_removals(request.form, \"removed_scada_images\", scada_urls)\n        handle_image_removals(request.form, \"removed_trends_images\", trends_urls)\n        handle_image_removals(request.form, \"removed_alarm_images\", alarm_urls)\n\n        # Create image objects for template\n        scada_image_objects = []\n        trends_image_objects = []\n        alarm_image_objects = []\n\n        # Process new image uploads\n        save_new(\"SCADA_IMAGES\", scada_urls, scada_image_objects)\n        save_new(\"TRENDS_IMAGES\", trends_urls, trends_image_objects)\n        save_new(\"ALARM_IMAGES\", alarm_urls, alarm_image_objects)\n\n        # Process related documents\n        related_documents = process_table_rows(\n            request.form,\n            {\n                'doc_ref[]': 'Document_Reference',\n                'doc_title[]': 'Document_Title'\n            }\n        )\n\n        # Skip Pre and Post Approvals processing since they're not used\n        PRE_APPROVALS = []\n        POST_APPROVALS = []\n\n        # Remove signature image processing since we're not using them\n        SIG_PREPARED_BY = \"\"\n        SIG_REVIEW_TECH = \"\"\n        SIG_REVIEW_PM = \"\"\n        SIG_APPROVAL_CLIENT = \"\"\n\n        # Process Pre-Test Requirements\n        PRE_TEST_REQUIREMENTS = process_table_rows(\n            request.form,\n            {\n                'pretest_item[]': 'Item',\n                'pretest_test[]': 'Test',\n                'pretest_method[]': 'Method_Test_Steps',\n                'pretest_acceptance[]': 'Acceptance_Criteria',\n                'pretest_result[]': 'Result',\n                'pretest_punch[]': 'Punch_Item',\n                'pretest_verified_by[]': 'Verified_by',\n                'pretest_comment[]': 'Comment'\n            }\n        )\n\n        # Process Key Components\n        KEY_COMPONENTS = process_table_rows(\n            request.form,\n            {\n                'keycomp_s_no[]': 'S.no',\n                'keycomp_model[]': 'Model',\n                'keycomp_description[]': 'Description',\n                'keycomp_remarks[]': 'Remarks'\n            }\n        )\n\n        # Process IP Records\n        IP_RECORDS = process_table_rows(\n            request.form,\n            {\n                'ip_device[]': 'Device_Name',\n                'ip_address[]': 'IP_Address',\n                'ip_comment[]': 'Comment'\n            }\n        )\n\n        # Process Digital Signals\n        SIGNAL_LISTS = process_table_rows(\n            request.form,\n            {\n                'S. No.[]': 'S. No.',\n                'Rack No.[]': 'Rack No.',\n                'Module Position[]': 'Module Position',\n                'Signal TAG[]': 'Signal TAG',\n                'Signal Description[]': 'Signal Description',\n                'Result[]': 'Result',\n                'Punch Item[]': 'Punch Item',\n                'Verified By[]': 'Verified By',\n                'Comment[]': 'Comment'\n            }\n        )\n\n        # Process Analogue Signals\n        ANALOGUE_LISTS = process_table_rows(\n            request.form,\n            {\n                'S. No. Analogue[]': 'S. No.',\n                'Rack No. Analogue[]': 'Rack No.',\n                'Module Position Analogue[]': 'Module Position',\n                'Signal TAG Analogue[]': 'Signal TAG',\n                'Signal Description Analogue[]': 'Signal Description',\n                'Result Analogue[]': 'Result',\n                'Punch Item Analogue[]': 'Punch Item',\n                'Verified By Analogue[]': 'Verified By',\n                'Comment Analogue[]': 'Comment'\n            }\n        )\n\n        # Process Modbus Digital Signals\n        MODBUS_DIGITAL_LISTS = process_table_rows(\n            request.form,\n            {\n                'Address[]': 'Address',\n                'Description[]': 'Description',\n                'Remarks[]': 'Remarks',\n                'Digital_Result[]': 'Result',\n                'Digital_Punch Item[]': 'Punch Item',\n                'Digital_Verified By[]': 'Verified By',\n                'Digital_Comment[]': 'Comment'\n            }\n        )\n\n        # Process Modbus Analogue Signals\n        MODBUS_ANALOGUE_LISTS = process_table_rows(\n            request.form,\n            {\n                'Address Analogue[]': ' Address',  # Note: space in name is intentional\n                'Description Analogue[]': 'Description',\n                'Range Analogue[]': 'Range',\n                'Result Analogue[]': 'Result',\n                'Punch Item Analogue[]': 'Punch Item',\n                'Verified By Analogue[]': 'Verified By',\n                'Comment Analogue[]': 'Comment'\n            }\n        )\n\n        # Process Data Validation\n        DATA_VALIDATION = process_table_rows(\n            request.form,\n            {\n                'Validation_Tag[]': 'Tag',\n                'Validation_Range[]': 'Range',\n                'Validation_SCADA Value[]': 'SCADA Value',\n                'Validation_HMI Value[]': 'HMI Value'\n            }\n        )\n\n        # Process Process Test\n        PROCESS_TEST = process_table_rows(\n            request.form,\n            {\n                'Process_Item[]': 'Item',\n                'Process_Action[]': 'Action',\n                'Process_Expected / Required Result[]': 'Expected / Required Result',\n                'Process_Pass/Fail[]': ' Pass/Fail ',  # Note: spaces in name are intentional\n                'Process_Comments[]': ' Comments '     # Note: spaces in name are intentional\n            }\n        )\n\n        # Process SCADA Verification\n        SCADA_VERIFICATION = process_table_rows(\n            request.form,\n            {\n                'SCADA_Task[]': 'Task',\n                'SCADA_Expected_Result[]': 'Expected Result',\n                'SCADA_Pass/Fail[]': 'Pass/Fail',\n                'SCADA_Comments[]': 'Comments'\n            }\n        )\n\n        # Process Trends Testing\n        TRENDS_TESTING = process_table_rows(\n            request.form,\n            {\n                'Trend[]': 'Trend',\n                'Expected Behavior[]': 'Expected Behavior',\n                'Pass/Fail Trend[]': 'Pass/Fail',\n                'Comments Trend[]': 'Comments'\n            }\n        )\n\n        # Process Alarm Signals\n        ALARM_LIST = process_table_rows(\n            request.form,\n            {\n                'Alarm_Type[]': 'Alarm Type',\n                'Expected / Required Result[]': ' Expected / Required Result',\n                'Pass/Fail []': ' Pass/Fail ',  # Note: spaces in name are intentional\n                'Comments []': ' Comments '     # Note: spaces in name are intentional\n            }\n        )\n\n        # Build final context for the DOCX\n        context = {\n            \"DOCUMENT_TITLE\": request.form.get('document_title', ''),\n            \"PROJECT_REFERENCE\": request.form.get('project_reference', ''),\n            \"DOCUMENT_REFERENCE\": request.form.get('document_reference', ''),\n            \"DATE\": request.form.get('date', ''),\n            \"CLIENT_NAME\": request.form.get('client_name', ''),\n            \"REVISION\": request.form.get('revision', ''),\n            \"REVISION_DETAILS\": request.form.get('revision_details', ''),\n            \"REVISION_DATE\": request.form.get('revision_date', ''),\n            \"PREPARED_BY\": request.form.get('prepared_by', ''),\n            \"SIG_PREPARED\": SIG_PREPARED,\n            \"SIG_PREPARED_BY\": SIG_PREPARED_BY,\n            \"REVIEWED_BY_TECH_LEAD\": request.form.get('reviewed_by_tech_lead', ''),\n            \"SIG_REVIEW_TECH\": SIG_REVIEW_TECH,\n            \"REVIEWED_BY_PM\": request.form.get('reviewed_by_pm', ''),\n            \"SIG_REVIEW_PM\": SIG_REVIEW_PM,\n            \"APPROVED_BY_CLIENT\": request.form.get('approved_by_client', ''),\n            \"SIG_APPROVAL_CLIENT\": SIG_APPROVAL_CLIENT,\n            \"PURPOSE\": request.form.get(\"purpose\", \"\"),\n            \"SCOPE\": request.form.get(\"scope\", \"\"),\n            \"PRE_TEST_REQUIREMENTS\": PRE_TEST_REQUIREMENTS,\n            \"KEY_COMPONENTS\": KEY_COMPONENTS,\n            \"IP_RECORDS\": IP_RECORDS,\n            \"RELATED_DOCUMENTS\": related_documents,\n            \"PRE_APPROVALS\": PRE_APPROVALS,\n            \"POST_APPROVALS\": POST_APPROVALS,\n            \"SIGNAL_LISTS\": SIGNAL_LISTS,\n            \"ANALOGUE_LISTS\": ANALOGUE_LISTS,\n            \"MODBUS_DIGITAL_LISTS\": MODBUS_DIGITAL_LISTS,\n            \"MODBUS_ANALOGUE_LISTS\": MODBUS_ANALOGUE_LISTS,\n            \"DATA_VALIDATION\": DATA_VALIDATION,\n            \"PROCESS_TEST\": PROCESS_TEST,\n            \"SCADA_VERIFICATION\": SCADA_VERIFICATION,\n            \"TRENDS_TESTING\": TRENDS_TESTING,\n            \"SCADA_IMAGES\": scada_image_objects,\n            \"TRENDS_IMAGES\": trends_image_objects,\n            \"ALARM_IMAGES\": alarm_image_objects,\n            \"ALARM_LIST\": ALARM_LIST,\n            \"SIG_APPROVER_1\": SIG_APPROVER_1,\n            \"SIG_APPROVER_2\": SIG_APPROVER_2,\n            \"SIG_APPROVER_3\": SIG_APPROVER_3,\n        }\n\n        # For storage, remove the InlineImage objects recursively\n        context_to_store = dict(context)\n        def remove_inline_images(obj):\n            \"\"\"Recursively remove InlineImage objects from nested data structures\"\"\"\n            if isinstance(obj, InlineImage):\n                return None\n            elif isinstance(obj, dict):\n                return {k: remove_inline_images(v) for k, v in obj.items() if not isinstance(v, InlineImage)}\n            elif isinstance(obj, list):\n                return [remove_inline_images(item) for item in obj if not isinstance(item, InlineImage)]\n            else:\n                return obj\n\n        # Apply the cleaning function to all context data\n        for key in list(context_to_store.keys()):\n            context_to_store[key] = remove_inline_images(context_to_store[key])\n\n        # Store approver emails in context for later retrieval in edit form\n        context_to_store[\"approver_1_email\"] = approver_emails[0]\n        context_to_store[\"approver_2_email\"] = approver_emails[1]\n        context_to_store[\"approver_3_email\"] = approver_emails[2]\n\n        # Update report metadata\n        report.document_title = context_to_store.get('DOCUMENT_TITLE', '')\n        report.document_reference = context_to_store.get('DOCUMENT_REFERENCE', '')\n        report.project_reference = context_to_store.get('PROJECT_REFERENCE', '')\n        report.client_name = context_to_store.get('CLIENT_NAME', '')\n        report.revision = context_to_store.get('REVISION', '')\n        report.prepared_by = context_to_store.get('PREPARED_BY', '')\n        report.updated_at = dt.datetime.utcnow()\n\n        # Prepare submission data for storage\n        submission_data = {\n            \"context\": context_to_store,\n            \"user_email\": current_user.email if hasattr(current_user, 'email') else request.form.get(\"user_email\", \"\"),\n            \"approvals\": approvals,\n            \"locked\": locked,\n            \"scada_image_urls\": scada_urls,\n            \"trends_image_urls\": trends_urls,\n            \"alarm_image_urls\": alarm_urls,\n            \"created_at\": existing_data.get(\"created_at\", dt.datetime.now().isoformat()),\n            \"updated_at\": dt.datetime.now().isoformat()\n        }\n\n        # Update SAT report data\n        sat_report.data_json = json.dumps(submission_data)\n        sat_report.date = context_to_store.get('DATE', '')\n        sat_report.purpose = context_to_store.get('PURPOSE', '')\n        sat_report.scope = context_to_store.get('SCOPE', '')\n        sat_report.scada_image_urls = json.dumps(scada_urls)\n        sat_report.trends_image_urls = json.dumps(trends_urls)\n        sat_report.alarm_image_urls = json.dumps(alarm_urls)\n\n        # Save to database\n        db.session.commit()\n\n        # Render the DOCX template\n        doc.render(context)\n\n        # Build a timestamped filename and save to the OS temp directory\n        import tempfile\n        timestamp = dt.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        filename = f\"SAT_Report_{timestamp}.docx\"\n        temp_path = os.path.join(tempfile.gettempdir(), filename)\n\n        doc.save(temp_path)\n        current_app.logger.info(f\"Document saved to temp path: {temp_path}\")\n\n        # Try to copy to permanent location\n        try:\n            permanent = os.path.abspath(current_app.config['OUTPUT_FILE'])\n            shutil.copyfile(temp_path, permanent)\n            current_app.logger.info(f\"Also copied report to outputs: {permanent}\")\n        except Exception as e:\n            current_app.logger.warning(f\"Could not copy to outputs folder: {e}\")\n\n        # Notify first approver exactly once\n        if not report.approval_notification_sent:\n            first_stage = approvals[0] if approvals else None\n            if first_stage:\n                first_email = first_stage[\"approver_email\"]\n                # Corrected call to send_approval_link\n                sent = send_approval_link(\n                    first_email,\n                    submission_id,\n                    first_stage[\"stage\"]\n                )\n                current_app.logger.info(f\"Approval email to {first_email}: {sent}\")\n\n                # Create approval notification\n                try:\n                    document_title = context.get(\"DOCUMENT_TITLE\", \"SAT Report\")\n                    create_approval_notification(\n                        approver_email=first_email,\n                        submission_id=submission_id,\n                        stage=first_stage[\"stage\"],\n                        document_title=document_title\n                    )\n\n                    # Also notify admins about new submission\n                    from models import User\n                    admin_emails = [u.email for u in User.query.filter_by(role='Admin').all()]\n                    if admin_emails:\n                        create_new_submission_notification(\n                            admin_emails=admin_emails,\n                            submission_id=submission_id,\n                            document_title=document_title,\n                            submitter_email=current_user.email\n                        )\n                except Exception as e:\n                    current_app.logger.error(f\"Error creating submission notifications: {e}\")\n\n                report.approval_notification_sent = True\n                db.session.commit()\n\n        # Send edit link email to user (with graceful failure)\n        email_sent = False\n        if current_app.config.get('ENABLE_EMAIL_NOTIFICATIONS', True):\n            try:\n                email_result = send_edit_link(report.user_email, submission_id)\n                if email_result:\n                    email_sent = True\n                    current_app.logger.info(f\"Email sent successfully to {report.user_email}\")\n                else:\n                    current_app.logger.warning(f\"Failed to send email to {report.user_email}\")\n            except Exception as e:\n                current_app.logger.error(f\"Email sending error: {e}\")\n\n        # Always show success message regardless of email status\n        success_message = \"Report generated successfully!\"\n        if email_sent:\n            success_message += \" An edit link has been sent to your email.\"\n        else:\n            success_message += \" You can access your report using the status page.\"\n\n        flash(success_message, \"success\")\n\n        return jsonify({\n            \"success\": True,\n            \"message\": success_message,\n            \"submission_id\": submission_id,\n            \"redirect_url\": url_for('status.view_status', submission_id=submission_id),\n            \"download_url\": url_for('status.download_report', submission_id=submission_id)\n        })\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in generate: {e}\", exc_info=True)\n        flash(f\"An error occurred while generating the report: {str(e)}\", \"error\")\n        return redirect(url_for('main.index'))\n\n@main_bp.route('/save_progress', methods=['POST'])\n@login_required\ndef save_progress():\n    \"\"\"Save form progress without generating report\"\"\"\n    try:\n        from models import db, Report, SATReport\n\n        # Get submission ID or create new one\n        submission_id = request.form.get(\"submission_id\", \"\")\n        if not submission_id:\n            submission_id = str(uuid.uuid4())\n\n        # Get or create report record\n        report = Report.query.get(submission_id)\n        if not report:\n            report = Report(\n                id=submission_id,\n                type='SAT',\n                status='DRAFT',\n                user_email=current_user.email if hasattr(current_user, 'email') else '',\n                approvals_json='[]'\n            )\n            db.session.add(report)\n\n        # Get or create SAT report record\n        sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n        if not sat_report:\n            sat_report = SATReport(\n                report_id=submission_id,\n                data_json='{}',\n                scada_image_urls='[]',\n                trends_image_urls='[]',\n                alarm_image_urls='[]'\n            )\n            db.session.add(sat_report)\n\n        # Load existing data\n        existing_data = json.loads(sat_report.data_json) if sat_report.data_json != '{}' else {}\n\n        # Build context from current form data\n        context = {\n            \"DOCUMENT_TITLE\": request.form.get('document_title', ''),\n            \"PROJECT_REFERENCE\": request.form.get('project_reference', ''),\n            \"DOCUMENT_REFERENCE\": request.form.get('document_reference', ''),\n            \"DATE\": request.form.get('date', ''),\n            \"CLIENT_NAME\": request.form.get('client_name', ''),\n            \"REVISION\": request.form.get('revision', ''),\n            \"REVISION_DETAILS\": request.form.get('revision_details', ''),\n            \"REVISION_DATE\": request.form.get('revision_date', ''),\n            \"PREPARED_BY\": request.form.get('prepared_by', ''),\n            \"REVIEWED_BY_TECH_LEAD\": request.form.get('reviewed_by_tech_lead', ''),\n            \"REVIEWED_BY_PM\": request.form.get('reviewed_by_pm', ''),\n            \"APPROVED_BY_CLIENT\": request.form.get('approved_by_client', ''),\n            \"PURPOSE\": request.form.get(\"purpose\", \"\"),\n            \"SCOPE\": request.form.get(\"scope\", \"\"),\n            \"approver_1_email\": request.form.get(\"approver_1_email\", \"\"),\n            \"approver_2_email\": request.form.get(\"approver_2_email\", \"\"),\n            \"approver_3_email\": request.form.get(\"approver_3_email\", \"\"),\n        }\n\n        # Update report metadata\n        report.document_title = context.get('DOCUMENT_TITLE', '')\n        report.document_reference = context.get('DOCUMENT_REFERENCE', '')\n        report.project_reference = context.get('PROJECT_REFERENCE', '')\n        report.client_name = context.get('CLIENT_NAME', '')\n        report.revision = context.get('REVISION', '')\n        report.prepared_by = context.get('PREPARED_BY', '')\n        report.updated_at = dt.datetime.utcnow()\n\n        # Prepare submission data for storage\n        submission_data = {\n            \"context\": context,\n            \"user_email\": current_user.email if hasattr(current_user, 'email') else request.form.get(\"user_email\", \"\"),\n            \"approvals\": existing_data.get(\"approvals\", []),\n            \"locked\": existing_data.get(\"locked\", False),\n            \"scada_image_urls\": existing_data.get(\"scada_image_urls\", []),\n            \"trends_image_urls\": existing_data.get(\"trends_image_urls\", []),\n            \"alarm_image_urls\": existing_data.get(\"alarm_image_urls\", []),\n            \"created_at\": existing_data.get(\"created_at\", dt.datetime.now().isoformat()),\n            \"updated_at\": dt.datetime.now().isoformat()\n        }\n\n        # Update SAT report data\n        sat_report.data_json = json.dumps(submission_data)\n        sat_report.date = context.get('DATE', '')\n        sat_report.purpose = context.get('PURPOSE', '')\n        sat_report.scope = context.get('SCOPE', '')\n\n        # Save to database\n        db.session.commit()\n\n        return jsonify({\n            'success': True,\n            'message': 'Progress saved successfully',\n            'submission_id': submission_id\n        })\n\n    except Exception as e:\n        current_app.logger.error(f\"Error saving progress: {e}\", exc_info=True)\n        return jsonify({\n            'success': False,\n            'message': f'Error saving progress: {str(e)}'\n        }), 500\n\n@main_bp.route('/auto_save_progress', methods=['POST'])\n@login_required\ndef auto_save_progress():\n    \"\"\"Auto-save form progress with CSRF validation\"\"\"\n    try:\n        from models import db, Report, SATReport\n\n        # Get submission ID or create new one\n        submission_id = request.form.get(\"submission_id\", \"\")\n        if not submission_id:\n            submission_id = str(uuid.uuid4())\n\n        # Get form data\n        form_data = request.form.to_dict()\n\n        # Get or create report record\n        report = Report.query.get(submission_id)\n        if not report:\n            report = Report(\n                id=submission_id,\n                type='SAT',\n                status='DRAFT',\n                user_email=current_user.email if hasattr(current_user, 'email') else '',\n                approvals_json='[]'\n            )\n            db.session.add(report)\n\n        # Get or create SAT report record\n        sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n        if not sat_report:\n            sat_report = SATReport(\n                report_id=submission_id,\n                data_json='{}',\n                scada_image_urls='[]',\n                trends_image_urls='[]',\n                alarm_image_urls='[]'\n            )\n            db.session.add(sat_report)\n\n        # Load existing data\n        existing_data = json.loads(sat_report.data_json) if sat_report.data_json != '{}' else {}\n\n        # Build context from current form data\n        context = {\n            \"DOCUMENT_TITLE\": form_data.get('document_title', ''),\n            \"PROJECT_REFERENCE\": form_data.get('project_reference', ''),\n            \"DOCUMENT_REFERENCE\": form_data.get('document_reference', ''),\n            \"DATE\": form_data.get('date', ''),\n            \"CLIENT_NAME\": form_data.get('client_name', ''),\n            \"REVISION\": form_data.get('revision', ''),\n            \"REVISION_DETAILS\": form_data.get('revision_details', ''),\n            \"REVISION_DATE\": form_data.get('revision_date', ''),\n            \"PREPARED_BY\": form_data.get('prepared_by', ''),\n            \"REVIEWED_BY_TECH_LEAD\": form_data.get('reviewed_by_tech_lead', ''),\n            \"REVIEWED_BY_PM\": form_data.get('reviewed_by_pm', ''),\n            \"APPROVED_BY_CLIENT\": form_data.get('approved_by_client', ''),\n            \"PURPOSE\": form_data.get(\"purpose\", \"\"),\n            \"SCOPE\": form_data.get(\"scope\", \"\"),\n            \"approver_1_email\": form_data.get(\"approver_1_email\", \"\"),\n            \"approver_2_email\": form_data.get(\"approver_2_email\", \"\"),\n            \"approver_3_email\": form_data.get(\"approver_3_email\", \"\"),\n        }\n\n        # Update report metadata\n        report.document_title = context.get('DOCUMENT_TITLE', '')\n        report.updated_at = dt.datetime.utcnow()\n\n        # Prepare submission data for storage\n        submission_data = {\n            \"context\": context,\n            \"user_email\": current_user.email if hasattr(current_user, 'email') else form_data.get(\"user_email\", \"\"),\n            \"approvals\": existing_data.get(\"approvals\", []),\n            \"locked\": existing_data.get(\"locked\", False),\n            \"scada_image_urls\": existing_data.get(\"scada_image_urls\", []),\n            \"trends_image_urls\": existing_data.get(\"trends_image_urls\", []),\n            \"alarm_image_urls\": existing_data.get(\"alarm_image_urls\", []),\n            \"created_at\": existing_data.get(\"created_at\", dt.datetime.now().isoformat()),\n            \"updated_at\": dt.datetime.now().isoformat(),\n            \"auto_saved\": True  # Mark as auto-saved\n        }\n\n        # Update SAT report data\n        sat_report.data_json = json.dumps(submission_data)\n        sat_report.date = context.get('DATE', '')\n        sat_report.purpose = context.get('PURPOSE', '')\n        sat_report.scope = context.get('SCOPE', '')\n\n        # Save to database\n        db.session.commit()\n\n        return jsonify({\n            'success': True,\n            'message': 'Auto-save completed',\n            'submission_id': submission_id,\n            'timestamp': dt.datetime.now().isoformat()\n        })\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in auto-save: {e}\", exc_info=True)\n        return jsonify({\n            'success': False,\n            'message': f'Auto-save failed: {str(e)}'\n        }), 500","size_bytes":42766},"routes/notifications.py":{"content":"from flask import Blueprint, render_template, jsonify, request, current_app\nfrom flask_login import current_user\nfrom models import db, Notification\nfrom auth import login_required\nimport json\nfrom datetime import datetime\n\ntry:\n    from models import db, Notification\nexcept ImportError as e:\n    print(f\"Warning: Could not import models: {e}\")\n    db = None\n    Notification = None\n\nnotifications_bp = Blueprint('notifications', __name__)\n\n@notifications_bp.route('/api/notifications')\ndef get_notifications():\n    \"\"\"Get notifications for current user\"\"\"\n    try:\n        if not current_user.is_authenticated:\n            return jsonify({'notifications': [], 'total': 0, 'pages': 0, 'current_page': 1})\n\n        page = request.args.get('page', 1, type=int)\n        per_page = request.args.get('per_page', 10, type=int)\n\n        notifications = Notification.query.filter_by(\n            user_id=current_user.id\n        ).order_by(Notification.created_at.desc()).paginate(\n            page=page, per_page=per_page, error_out=False\n        )\n\n        return jsonify({\n            'notifications': [{\n                'id': n.id,\n                'type': n.type,\n                'title': n.title,\n                'message': n.message,\n                'is_read': n.is_read,\n                'created_at': n.created_at.isoformat(),\n                'metadata': n.metadata\n            } for n in notifications.items],\n            'total': notifications.total,\n            'pages': notifications.pages,\n            'current_page': notifications.page\n        })\n    except Exception as e:\n        # Return empty list when database issues occur\n        current_app.logger.warning(f\"Notifications not available: {e}\")\n        return jsonify({\n            'notifications': [],\n            'total': 0,\n            'pages': 0,\n            'current_page': 1\n        })\n\n@notifications_bp.route('/api/notifications/unread-count')\n@login_required\ndef get_unread_count_api():\n    \"\"\"Get unread notifications count for current user\"\"\"\n    try:\n        if not current_user.is_authenticated:\n            return jsonify({'count': 0})\n\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n        return jsonify({'count': unread_count})\n    except Exception as e:\n        current_app.logger.warning(f\"Notifications not available: {e}\")\n        return jsonify({'count': 0})\n\n@notifications_bp.route('/api/notifications/<int:notification_id>/mark-read', methods=['POST'])\n@login_required\ndef mark_notification_read(notification_id):\n    \"\"\"Mark a notification as read\"\"\"\n    try:\n        notification = Notification.query.get(notification_id)\n        if not notification or notification.user_email != current_user.email:\n            return jsonify({'success': False, 'error': 'Notification not found'}), 404\n\n        notification.read = True\n        db.session.commit()\n\n        return jsonify({'success': True})\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@notifications_bp.route('/api/notifications/mark-all-read', methods=['POST'])\n@login_required\ndef mark_all_read():\n    \"\"\"Mark all notifications as read for current user\"\"\"\n    try:\n        Notification.query.filter_by(user_email=current_user.email, read=False)\\\n                         .update({'read': True})\n        db.session.commit()\n\n        return jsonify({'success': True})\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@notifications_bp.route('/notifications')\n@login_required\ndef notification_center():\n    \"\"\"Notification center page\"\"\"\n    notifications = Notification.query.filter_by(user_email=current_user.email)\\\n                                    .order_by(Notification.created_at.desc())\\\n                                    .limit(50).all()\n\n    return render_template('notification_center.html', notifications=notifications)","size_bytes":3957},"routes/reports.py":{"content":"from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, current_app\nfrom flask_login import login_required, current_user\nfrom models import db, Report, User\nfrom auth import login_required, role_required\nfrom utils import setup_approval_workflow_db, create_new_submission_notification, get_unread_count\nimport json\nimport uuid\nfrom datetime import datetime\n\nreports_bp = Blueprint('reports', __name__, url_prefix='/reports')\n\n@reports_bp.route('/new')\n@login_required\n@role_required(['Engineer', 'Admin'])\ndef new():\n    \"\"\"Show report type selection page\"\"\"\n    return render_template('report_selector.html')\n\n@reports_bp.route('/new/sat')\n@login_required\n@role_required(['Engineer', 'TM', 'Admin'])\ndef new_sat():\n    \"\"\"SAT report creation\"\"\"\n    return redirect(url_for('reports.new_sat_full'))\n\n@reports_bp.route('/new/sat/full')\n@login_required\n@role_required(['Engineer', 'TM', 'Admin'])\ndef new_sat_full():\n    \"\"\"Full SAT report form\"\"\"\n    try:\n        import uuid\n        from utils import get_unread_count\n        \n        # Create empty submission data structure for new forms\n        submission_data = {\n            'DOCUMENT_TITLE': '',\n            'PROJECT_REFERENCE': '',\n            'DOCUMENT_REFERENCE': '',\n            'DATE': '',\n            'CLIENT_NAME': '',\n            'REVISION': '',\n            'REVISION_DETAILS': '',\n            'REVISION_DATE': '',\n            'USER_EMAIL': '',\n            'PREPARED_BY': '',\n            'REVIEWED_BY_TECH_LEAD': '',\n            'REVIEWED_BY_PM': '',\n            'APPROVED_BY_CLIENT': '',\n            'PURPOSE': '',\n            'SCOPE': '',\n            'RELATED_DOCUMENTS': [],\n            'PRE_EXECUTION_APPROVAL': [],\n            'POST_EXECUTION_APPROVAL': [],\n            'PRE_TEST_REQUIREMENTS': [],\n            'KEY_COMPONENTS': [],\n            'IP_RECORDS': [],\n            'SIGNAL_LISTS': [],\n            'DIGITAL_OUTPUTS': [],\n            'ANALOGUE_INPUTS': [],\n            'ANALOGUE_OUTPUTS': [],\n            'MODBUS_DIGITAL_LISTS': [],\n            'MODBUS_ANALOGUE_LISTS': [],\n            'PROCESS_TEST': [],\n            'SCADA_VERIFICATION': [],\n            'TRENDS_TESTING': [],\n            'ALARM_LIST': []\n        }\n        \n        unread_count = get_unread_count()\n        submission_id = str(uuid.uuid4())\n        \n        return render_template('SAT.html', \n                             submission_data=submission_data,\n                             submission_id=submission_id,\n                             unread_count=unread_count)\n    except Exception as e:\n        current_app.logger.error(f\"Error rendering SAT form: {e}\")\n        # Provide minimal data structure even on error\n        submission_data = {}\n        return render_template('SAT.html', \n                             submission_data=submission_data,\n                             submission_id='',\n                             unread_count=0)","size_bytes":2925},"routes/status.py":{"content":"from flask import Blueprint, render_template, redirect, url_for, flash, current_app, send_file\nimport os\nfrom utils import load_submissions, convert_to_pdf\nfrom docx import Document\nfrom docx.shared import Inches\nfrom docxtpl import InlineImage\nfrom datetime import datetime\nimport tempfile\nfrom docx import Document as DocxTemplate # Alias to avoid conflict if Document is used elsewhere\nfrom flask_login import current_user\n\nstatus_bp = Blueprint('status', __name__)\n\n@status_bp.route('/view/<submission_id>')\ndef view_status(submission_id):\n    \"\"\"View the status of a submission\"\"\"\n    try:\n        from models import Report, SATReport\n        import json\n\n        # Get report from database\n        report = Report.query.get(submission_id)\n        if not report:\n            flash(\"Submission not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Get SAT report data\n        sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n        if not sat_report:\n            flash(\"Report data not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Parse stored data\n        stored_data = json.loads(sat_report.data_json)\n        context = stored_data.get(\"context\", {})\n        approvals = json.loads(report.approvals_json) if report.approvals_json else []\n        \n        current_app.logger.info(f\"Status view for {submission_id}: Found {len(approvals)} approvals\")\n        current_app.logger.info(f\"Report created: {report.created_at}, updated: {report.updated_at}\")\n        current_app.logger.info(f\"Context keys: {list(context.keys())}\")\n\n        # Calculate overall status\n        statuses = [a.get(\"status\", \"pending\") for a in approvals]\n        if \"rejected\" in statuses:\n            overall_status = \"rejected\"\n        elif all(status == \"approved\" for status in statuses):\n            overall_status = \"approved\"\n        elif any(status == \"approved\" for status in statuses):\n            overall_status = \"partially_approved\"\n        else:\n            overall_status = \"pending\"\n\n        return render_template('status.html',\n                              submission_id=submission_id,\n                              submission_data=context,\n                              approvals=approvals,\n                              locked=report.locked,\n                              overall_status=overall_status,\n                              # Extract key fields for easy access\n                              document_title=context.get('DOCUMENT_TITLE', 'SAT Report'),\n                              project_reference=context.get('PROJECT_REFERENCE', ''),\n                              client_name=context.get('CLIENT_NAME', ''),\n                              prepared_by=context.get('PREPARED_BY', ''),\n                              created_at=report.created_at.isoformat() if report.created_at else '',\n                              updated_at=report.updated_at.isoformat() if report.updated_at else '')\n    except Exception as e:\n        current_app.logger.error(f\"Error in view_status: {e}\", exc_info=True)\n        flash(\"An error occurred while loading the status\", \"error\")\n        return redirect(url_for('main.index'))\n\n@status_bp.route('/download/<submission_id>')\ndef download_report(submission_id):\n    \"\"\"Download the generated report\"\"\"\n    try:\n        from models import Report, SATReport\n        import json\n\n        # Get report from database\n        report = Report.query.get(submission_id)\n        if not report:\n            flash(\"Submission not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Get SAT report data\n        sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n        if not sat_report:\n            flash(\"Report data not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Parse stored data\n        stored_data = json.loads(sat_report.data_json)\n        context = stored_data.get(\"context\", {})\n\n        # Check if user has permission to download\n        if current_user.role not in ['admin'] and report.user_email != current_user.email:\n            flash(\"You are not authorized to download this report.\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Generate the document using DocxTemplate for rendering\n        from docxtpl import DocxTemplate\n        doc = DocxTemplate(current_app.config['TEMPLATE_FILE'])\n\n        # Create safe context (no InlineImage objects for download)\n        safe_context = {}\n        for key, value in context.items():\n            if not isinstance(value, InlineImage):\n                safe_context[key] = value\n\n        doc.render(safe_context)\n\n        # Create a temporary file\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        filename = f\"SAT_Report_{timestamp}.docx\"\n        temp_path = os.path.join(tempfile.gettempdir(), filename)\n\n        doc.save(temp_path)\n\n        # Return the file for download\n        safe_title = \"\".join(c if c.isalnum() else \"_\" \n                             for c in context.get(\"DOCUMENT_TITLE\", \"SAT_Report\"))\n        return send_file(temp_path,\n                         as_attachment=True,\n                         download_name=f\"{safe_title}_{submission_id}.docx\")\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in download_report: {e}\", exc_info=True)\n        flash(\"An error occurred while generating the download\", \"error\")\n        return redirect(url_for('status.view_status', submission_id=submission_id))\n\n@status_bp.route('/download-pdf/<submission_id>')\ndef download_pdf(submission_id):\n    \"\"\"Download the PDF version of the report (if available)\"\"\"\n    try:\n        submissions = load_submissions()\n        submission_data = submissions.get(submission_id)\n\n        if not submission_data:\n            flash(\"Submission not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Check if PDF exists or can be generated\n        pdf_path = submission_data.get(\"pdf_path\")\n\n        if not pdf_path or not os.path.exists(pdf_path):\n            # PDF doesn't exist, try to generate it\n            if current_app.config.get('ENABLE_PDF_EXPORT', False):\n                output_path = os.path.abspath(current_app.config['OUTPUT_FILE'])\n                pdf_path = convert_to_pdf(output_path)\n\n                if pdf_path:\n                    # Update submission data with PDF path\n                    submission_data[\"pdf_path\"] = pdf_path\n                    submissions[submission_id] = submission_data\n                    from utils import save_submissions\n                    save_submissions(submissions)\n                else:\n                    flash(\"Failed to generate PDF report\", \"error\")\n                    return redirect(url_for('status.view_status', submission_id=submission_id))\n            else:\n                flash(\"PDF export is not enabled\", \"error\")\n                return redirect(url_for('status.view_status', submission_id=submission_id))\n\n        # Get document title for the filename\n        doc_title = submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT_Report\")\n        # Clean the title for use in filename (replace spaces and special chars)\n        safe_title = \"\".join(c if c.isalnum() else \"_\" for c in doc_title)\n\n        # Generate download name with document title\n        download_name = f\"{safe_title}_{submission_id}.pdf\"\n\n        return send_file(pdf_path, as_attachment=True, download_name=download_name)\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in download_pdf: {e}\", exc_info=True)\n        flash(\"An error occurred while downloading the PDF\", \"error\")\n        return redirect(url_for('status.view_status', submission_id=submission_id))\n\n@status_bp.route('/list')\ndef list_submissions():\n    \"\"\"List all submissions (admin view)\"\"\"\n    try:\n        from models import Report, SATReport\n        import json\n\n        reports = Report.query.all()\n        submission_list = []\n\n        for report in reports:\n            sat_report = SATReport.query.filter_by(report_id=report.id).first()\n            if not sat_report:\n                continue # Skip if SAT report data is missing\n\n            stored_data = json.loads(sat_report.data_json)\n            approvals = json.loads(report.approvals_json) if report.approvals_json else []\n\n            statuses = [a.get(\"status\", \"pending\") for a in approvals]\n            if \"rejected\" in statuses:\n                overall_status = \"rejected\"\n            elif all(status == \"approved\" for status in statuses):\n                overall_status = \"approved\"\n            elif any(status == \"approved\" for status in statuses):\n                overall_status = \"partially_approved\"\n            else:\n                overall_status = \"pending\"\n\n            submission_list.append({\n                \"id\": report.id,\n                \"document_title\": stored_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\"),\n                \"client_name\": stored_data.get(\"context\", {}).get(\"CLIENT_NAME\", \"\"),\n                \"created_at\": report.created_at,\n                \"updated_at\": report.updated_at,\n                \"user_email\": report.user_email,\n                \"status\": overall_status\n            })\n\n        # Sort by most recent first\n        submission_list.sort(key=lambda x: x.get(\"updated_at\", \"\"), reverse=True)\n\n        return render_template(\"submissions_list.html\", submissions=submission_list)\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in list_submissions: {e}\", exc_info=True)\n        flash(\"An error occurred while listing submissions\", \"error\")\n        return redirect(url_for('main.index'))","size_bytes":9705},"static/css/form.css":{"content":":root {\n  /* — CULLY BRAND COLORS FROM LOGO — */\n  --cully-primary: #4DD0E1;           /* Main teal from Cully logo */\n  --cully-primary-light: #80DEEA;     /* Lighter teal */\n  --cully-primary-dark: #26C6DA;      /* Darker teal */\n  --cully-secondary: #00BCD4;         /* Accent teal from logo */\n  --cully-secondary-light: #4FC3F7;   /* Light accent teal */\n  --cully-accent: #00ACC1;           /* Deep teal accent */\n  --cully-accent-light: #40C4FF;     /* Light accent blue */\n\n  /* — CONSISTENT ALIASES — */\n  --primary: #4DD0E1;           \n  --primary-light: #80DEEA;     \n  --primary-dark: #26C6DA;      \n  --secondary: #00BCD4;         \n  --secondary-light: #4FC3F7;   \n  --accent: #00ACC1;           \n  --accent-light: #40C4FF;\n\n  /* — TEXT AND BACKGROUNDS — */\n  --text-primary: #1e293b;\n  --text-secondary: #64748b;\n  --text-muted: #94a3b8;\n  --bg-primary: #f8fafc;\n  --bg-secondary: #f1f5f9;\n  --bg-card: #ffffff;\n  --border-color: #e2e8f0;\n  --glass-bg: rgba(255, 255, 255, 0.85);\n  --shadow-color: rgba(77, 208, 225, 0.1);\n  --shadow-lg: rgba(77, 208, 225, 0.15);\n\n  /* — SHARED — */\n  --border-radius: 12px;\n  --border-radius-sm: 8px;\n  --border-radius-lg: 16px;\n  --transition: 0.3s ease;\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --spacing-md: 1rem;\n  --spacing-lg: 1.5rem;\n  --spacing-xl: 2rem;\n}\n\n/* Import notification styles */\n@import url('notifications.css');\n\n/* Base styling */\nbody {\n    font-family: 'Arial', sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f5f5f5;\n}\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Poppins', sans-serif;\n  color: var(--text);\n  background: linear-gradient(135deg, var(--bg-start), var(--bg-end));\n  min-height: 100vh;\n  line-height: 1.5;\n}\n\n/* — LOGO HEADER — */\n.logo-header {\n  text-align: left;\n  padding: 2rem 0 1rem;\n}\n.logo-header img {\n  height: 64px;\n  filter: drop-shadow(0 4px 6px rgba(0,0,0,0.1));\n}\n\n/* Modern Navigation Bar - Space Efficient */\n    .modern-nav {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      background: linear-gradient(135deg, white 0%, rgba(77, 208, 225, 0.05) 100%);\n      padding: 8px 16px; /* Reduced from 16px 32px */\n      box-shadow: 0 2px 8px rgba(77, 208, 225, 0.1); /* Reduced shadow */\n      border-bottom: 1px solid var(--cully-primary); /* Reduced from 2px */\n      margin-bottom: 0;\n      width: 100%;\n      box-sizing: border-box;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n      overflow: hidden;\n      transition: all 0.3s ease;\n    }\n\n    /* Dynamic navigation sizing */\n    @media (max-width: 1200px) {\n      .modern-nav {\n        padding: 6px 12px;\n      }\n\n      .brand-text {\n        font-size: 16px;\n      }\n\n      .nav-actions {\n        gap: 8px;\n      }\n    }\n\n    @media (max-width: 768px) {\n      .modern-nav {\n        padding: 4px 8px;\n        flex-wrap: wrap;\n        gap: 4px;\n      }\n\n      .brand-text {\n        display: none; /* Hide brand text on small screens */\n      }\n\n      .brand-logo {\n        height: 28px; /* Smaller logo */\n      }\n    }\n\n    @media (max-width: 480px) {\n      .modern-nav {\n        padding: 2px 4px;\n        min-height: 40px;\n      }\n    }\n\n.nav-brand {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.brand-logo {\n  height: 40px;\n  width: auto;\n}\n\n.brand-text {\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.nav-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex-wrap: nowrap;\n}\n\n/* Quick Actions */\n.quick-table-access {\n  position: relative;\n  margin-right: 16px;\n}\n\n.quick-access-btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  background: linear-gradient(135deg, var(--cully-accent) 0%, var(--cully-primary) 100%);\n  color: white;\n  border: none;\n  border-radius: var(--border-radius-sm);\n  font-weight: 600;\n  font-size: 14px;\n  cursor: pointer;\n  transition: var(--transition);\n  box-shadow: 0 2px 8px rgba(77, 208, 225, 0.25);\n}\n\n.quick-access-btn:hover {\n  background: linear-gradient(135deg, var(--cully-accent-light) 0%, var(--cully-primary-light) 100%);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(77, 208, 225, 0.4);\n}\n\n.quick-access-dropdown {\n  display: none;\n  position: absolute;\n  top: 100%;\n  left: 0;\n  background: white;\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n  min-width: 200px;\n  z-index: 1000;\n  opacity: 0;\n  visibility: hidden;\n  transform: translateY(-10px);\n  transition: all 0.3s ease;\n  margin-top: 8px;\n}\n\n.quick-access-dropdown.show {\n  display: block;\n  opacity: 1;\n  visibility: visible;\n  transform: translateY(0);\n}\n\n.quick-table-access.open .quick-access-dropdown {\n  display: block;\n  opacity: 1;\n  visibility: visible;\n  transform: translateY(0);\n}\n\n.quick-access-dropdown a {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 16px;\n  color: var(--text-primary);\n  text-decoration: none;\n  transition: var(--transition);\n  border-bottom: 1px solid var(--border-color);\n}\n\n.quick-access-dropdown a:last-child {\n  border-bottom: none;\n}\n\n.quick-access-dropdown a:hover {\n  background: var(--bg-secondary);\n  color: var(--primary);\n}\n\n.quick-access-dropdown i {\n  width: 16px;\n  text-align: center;\n}\n\n/* Special styling for logout option */\n.quick-access-dropdown a[href*=\"logout\"] {\n  color: #ef4444;\n}\n\n.quick-access-dropdown a[href*=\"logout\"]:hover {\n  background: #fee2e2;\n  color: #dc2626;\n}\n\n.quick-access-dropdown a[href*=\"logout\"] i {\n  color: #ef4444;\n}\n\n/* User Profile Section */\n.user-profile {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  position: relative;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  background: linear-gradient(135deg, var(--cully-primary), var(--cully-primary-dark));\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 18px;\n  box-shadow: 0 2px 10px rgba(77, 208, 225, 0.3);\n  border: 2px solid white;\n}\n\n.user-details {\n  cursor: pointer;\n  padding: 8px 12px;\n  border-radius: var(--border-radius-sm);\n  transition: var(--transition);\n  min-width: 120px;\n}\n\n.user-details:hover {\n  background: var(--bg-secondary);\n}\n\n.user-name {\n  font-weight: 600;\n  font-size: 14px;\n  color: var(--text-primary);\n  margin-bottom: 2px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 150px;\n}\n\n.user-role {\n  font-size: 12px;\n  color: var(--text-secondary);\n}\n\n/* User Dropdown Menu */\n.user-dropdown-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: white;\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n  min-width: 200px;\n  z-index: 1000;\n  opacity: 0;\n  visibility: hidden;\n  transform: translateY(-10px);\n  transition: all 0.3s ease;\n  margin-top: 8px;\n}\n\n.user-dropdown-menu.show {\n  opacity: 1;\n  visibility: visible;\n  transform: translateY(0);\n}\n\n.user-dropdown-menu a {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 16px;\n  color: var(--text-primary);\n  text-decoration: none;\n  transition: var(--transition);\n  border-bottom: 1px solid var(--border-color);\n}\n\n.user-dropdown-menu a:last-child {\n  border-bottom: none;\n}\n\n.user-dropdown-menu a:hover {\n  background: var(--bg-secondary);\n  color: var(--primary);\n}\n\n.user-dropdown-menu i {\n  width: 16px;\n  text-align: center;\n}\n\n.dropdown-divider {\n  height: 1px;\n  background: var(--border-color);\n  margin: 4px 0;\n}\n\n/* — WELCOME SCREEN — */\n.welcome-page {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  text-align: center;\n  background: linear-gradient(135deg, var(--primary) 0%, #2c5aa0 100%);\n  color: white;\n  padding: 2rem;\n}\n.welcome-page h2 {\n  font-size: 2.5rem;\n  color: var(--primary-light);\n  margin: 1rem 0;\n}\n.welcome-page p {\n  margin-bottom: 2rem;\n  color: #555;\n}\n\n/* — BUTTONS — */\n.btn-primary,\n.btn-secondary {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: var(--border-radius);\n  cursor: pointer;\n  transition: var(--transition);\n  text-decoration: none;\n}\n.btn-primary {\n  background: linear-gradient(135deg, var(--cully-primary) 0%, var(--cully-secondary) 100%);\n  color: white;\n  box-shadow: 0 6px 20px rgba(77, 208, 225, 0.3);\n  border: none;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, var(--cully-primary-light) 0%, var(--cully-secondary-light) 100%);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(77, 208, 225, 0.4);\n}\n.btn-secondary {\n  background: transparent;\n  color: var(--primary-light);\n  border: 2px solid var(--primary-light);\n  box-shadow: 0 4px 12px var(--shadow-color);\n}\n.btn-secondary:hover {\n  background: rgba(47,132,189,0.1);\n  transform: translateY(-1px);\n}\n\n/* Save Progress Button */\n.save-progress-btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  background: linear-gradient(135deg, var(--cully-secondary) 0%, var(--cully-accent) 100%);\n  color: white;\n  border: none;\n  border-radius: var(--border-radius-sm);\n  font-weight: 600;\n  font-size: 14px;\n  cursor: pointer;\n  transition: var(--transition);\n  margin-right: 12px;\n  white-space: nowrap;\n  box-shadow: 0 2px 8px rgba(0, 188, 212, 0.25);\n}\n\n.save-progress-btn:hover {\n  background: linear-gradient(135deg, var(--cully-secondary-light) 0%, var(--cully-accent-light) 100%);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 188, 212, 0.4);\n}\n\n.save-progress-btn i {\n  font-size: 14px;\n}\n\n/* — FULL-WIDTH CONTAINER SYSTEM — */\n.container {\n  max-width: none;\n  margin: 0;\n  padding: 0;\n  background: transparent;\n  border-radius: 0;\n  box-shadow: none;\n  backdrop-filter: none;\n  overflow-x: hidden;\n  width: 100vw;\n  box-sizing: border-box;\n}\n\n/* Override any existing container restrictions */\nbody .container {\n  width: 100vw !important;\n  max-width: none !important;\n  margin: 0 !important;\n  padding: 0 !important;\n}\n\n/* Body adjustments for full-width design */\nbody.dashboard-layout {\n  margin: 0;\n  padding: 0;\n  width: 100vw;\n  overflow-x: hidden;\n  box-sizing: border-box;\n  background: linear-gradient(135deg, var(--cully-primary-light) 0%, var(--cully-secondary-light) 50%, var(--cully-primary-light) 100%);\n  min-height: 100vh;\n}\nform fieldset {\n  border: none;\n  margin-bottom: 2rem;\n  display: none;\n  padding: 1rem 0;\n}\nform fieldset.active {\n  display: block;\n  animation: fadeIn 0.5s ease-out;\n}\n.step-legend {\n      font-size: 1.3rem; /* Reduced from 1.75rem */\n      font-weight: 700;\n      color: var(--cully-primary);\n      margin-bottom: 12px; /* Reduced from 24px */\n      display: flex;\n      align-items: center;\n      gap: 8px; /* Reduced from 12px */\n    }\n\n    .step-legend i {\n      color: var(--cully-secondary);\n      font-size: 1.1rem; /* Smaller icon */\n    }\n\n    /* Compact Form Sections */\n    .form-section {\n      background: rgba(248, 250, 252, 0.3); /* More transparent */\n      border: 1px solid var(--border-color);\n      border-radius: var(--border-radius-sm);\n      padding: 16px; /* Reduced from 24px */\n      margin: 16px 0; /* Reduced from 24px */\n    }\n\n    .form-section h4 {\n      color: var(--cully-primary);\n      font-size: 1rem; /* Reduced from 1.1rem */\n      font-weight: 600;\n      margin-bottom: 12px; /* Reduced from 16px */\n      display: flex;\n      align-items: center;\n      gap: 6px; /* Reduced from 8px */\n    }\n\n/* — PROGRESS BAR — */\nnav.progress {\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  margin: 1.5rem 0;\n}\n.progress-step {\n  text-align: center;\n  cursor: pointer;\n  transition: var(--transition);\n}\n.progress-step.disabled {\n  opacity: 0.3;\n}\n.progress-step .circle {\n  width: 42px;\n  height: 42px;\n  margin: 0 auto 0.3rem;\n  border-radius: 50%;\n  background: #e0e0e0;\n  color: #555;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n}\n.progress-step.active .circle {\n  background: linear-gradient(135deg, var(--cully-primary) 0%, var(--cully-secondary) 100%);\n  color: #fff;\n  box-shadow: 0 0 20px rgba(77, 208, 225, 0.5);\n  border: 2px solid var(--cully-primary-light);\n}\n.progress-step span {\n  display: block;\n  font-size: 0.85rem;\n  color: var(--text);\n}\n\n/* — LABELS & INPUTS — */\nlabel {\n  display: block;\n  margin-top: 1.2rem;\n  font-weight: 500;\n}\n.required {\n  color: var(--accent);\n}\ninput, textarea, select {\n  width: 100%;\n  margin-top: 0.4rem;\n  padding: 0.75rem 1rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: var(--border-radius);\n  background: #f5f5f5;\n  box-shadow: inset 0 2px 5px var(--shadow-color);\n  transition: var(--transition);\n}\ninput:focus, textarea:focus, select:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(47,132,189,0.2);\n}\nselect {\n  appearance: none;\n  background-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg width='10' height='5' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0l5 5 5-5z' fill='%23666'/%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: right 1rem center;\n  background-size: 10px 5px;\n}\ntextarea { min-height: 100px; resize: vertical; }\n\n/* — ERROR TEXT — */\n.error {\n  display: none;\n  color: #e53935;\n  font-size: 0.85rem;\n  margin-top: 0.3rem;\n}\ninput:invalid + .error,\ntextarea:invalid + .error {\n  display: block;\n}\n\n/* ===== COMPLETE RESPONSIVE DESIGN SYSTEM ===== */\n\n/* Main Layout - Full Width Design */\n    .main-layout {\n      display: flex;\n      min-height: calc(100vh - 50px); /* Reduced nav height */\n      width: 100vw;\n      max-width: 100vw;\n      margin: 0;\n      gap: 0;\n      padding: 0;\n      overflow-x: hidden;\n    }\n\n    /* Left Sidebar for Progress - Compact */\n    .progress-sidebar {\n      width: 220px; /* Reduced from 250px */\n      min-width: 220px;\n      flex-shrink: 0;\n      background: rgba(255, 255, 255, 0.98);\n      backdrop-filter: blur(10px);\n      border-radius: 0;\n      padding: 16px; /* Reduced from 24px */\n      height: fit-content;\n      position: sticky;\n      top: 50px; /* Adjusted for smaller nav */\n      box-shadow: 1px 0 8px rgba(0,0,0,0.06); /* Reduced shadow */\n      border-right: 1px solid var(--border-color);\n      transition: all 0.3s ease;\n    }\n\n    /* Form Container - Maximum Width Utilization */\n    .form-container {\n      flex: 1;\n      min-width: 0;\n      width: calc(100vw - 220px); /* Adjusted for smaller sidebar */\n      max-width: calc(100vw - 220px);\n      background: rgba(255, 255, 255, 0.98);\n      backdrop-filter: blur(15px);\n      border-radius: 0;\n      padding: 16px; /* Reduced from 30px for more data area */\n      box-shadow: none;\n      border-left: 1px solid var(--border-color);\n      margin: 0;\n      box-sizing: border-box;\n      overflow-x: auto; /* Allow horizontal scroll if needed */\n    }\n\n    /* Compact Vertical Progress Steps */\n    .progress-nav {\n      display: flex;\n      flex-direction: column;\n      gap: 4px; /* Reduced from 8px */\n    }\n\n    .progress-step {\n      display: flex;\n      align-items: center;\n      gap: 12px; /* Reduced from 16px */\n      padding: 8px 12px; /* Reduced from 16px */\n      border-radius: var(--border-radius-sm);\n      cursor: pointer;\n      transition: var(--transition);\n      border: 1px solid transparent; /* Reduced from 2px */\n    }\n\n.step-circle {\n      width: 28px; /* Reduced from 40px */\n      height: 28px;\n      border-radius: 50%;\n      background: #e2e8f0;\n      color: var(--text-secondary);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-weight: 600;\n      font-size: 12px; /* Reduced from 14px */\n      transition: var(--transition);\n      flex-shrink: 0;\n    }\n\n    .progress-step.active .step-circle {\n      background: rgba(255, 255, 255, 0.2);\n      color: white;\n    }\n\n    .step-info {\n      flex: 1;\n      min-width: 0; /* Allow text truncation */\n    }\n\n    .step-title {\n      font-weight: 600;\n      font-size: 12px; /* Reduced from 14px */\n      margin-bottom: 2px; /* Reduced from 4px */\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .step-description {\n      font-size: 10px; /* Reduced from 12px */\n      opacity: 0.8;\n      display: none; /* Hidden by default to save space */\n      white-space: nowrap;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n\n    .progress-step:hover .step-description {\n      display: block !important;\n    }\n\n    .progress-step.active .step-description {\n      color: rgba(255, 255, 255, 0.9);\n      display: block; /* Show for active step */\n    }\n\n/* Space-Efficient Cards */\n    .card {\n      background: white;\n      border-radius: var(--border-radius-sm);\n      border: 1px solid var(--border-color);\n      margin: 12px 0; /* Reduced from 24px */\n      overflow: hidden;\n      box-shadow: 0 1px 6px rgba(0, 0, 0, 0.04); /* Reduced shadow */\n    }\n\n    .card-header {\n      background: linear-gradient(135deg, var(--cully-primary) 0%, var(--cully-primary-light) 100%);\n      color: white;\n      padding: 10px 16px; /* Reduced from 16px 24px */\n      font-weight: 600;\n      font-size: 14px; /* Slightly smaller */\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .card-body {\n      padding: 12px; /* Reduced from 24px */\n    }\n\n/* Tables - Full Width Responsive */\n    .table-responsive {\n      position: relative;\n      margin: 8px 0; /* Reduced from 16px */\n      border-radius: var(--border-radius-sm);\n      box-shadow: 0 1px 4px rgba(0,0,0,0.06);\n      background: white;\n      width: 100%;\n      max-width: 100%;\n      overflow-x: auto; /* Horizontal scroll when needed */\n      -webkit-overflow-scrolling: touch; /* Smooth scrolling on mobile */\n    }\n\n    /* Smart table behavior based on screen size */\n    @media (min-width: 1200px) {\n      .table-responsive {\n        overflow-x: auto;\n      }\n    }\n\n    @media (max-width: 1199px) {\n      .table-responsive {\n        overflow: visible;\n      }\n\n      /* Hide low priority columns on smaller screens */\n      .col-priority-low {\n        display: none !important;\n      }\n\n      /* Make medium priority columns smaller */\n      .col-priority-medium {\n        font-size: 11px !important;\n        padding: 6px 4px !important;\n      }\n    }\n\n    @media (max-width: 768px) {\n      .table-responsive {\n        overflow: visible;\n      }\n\n      /* Switch to card layout on mobile */\n      .table-responsive table {\n        display: none;\n      }\n\n      .mobile-table-cards {\n        display: block !important;\n      }\n    }\n\n    /* Base Table Styles - Full Width */\n    table {\n      width: 100%;\n      min-width: 100%; /* Ensure table uses full container width */\n      border-collapse: collapse;\n      background: white;\n      border-radius: var(--border-radius-sm);\n      table-layout: auto; /* Allow automatic column sizing */\n      font-size: 13px; /* Smaller base font for more data */\n    }\n\n/* Compact Table Headers */\n    .digital-signals th,\n    .digital-outputs th,\n    .analogue-inputs th,\n    .analogue-outputs th,\n    .approvals th,\n    .documents th,\n    .pretest-table th,\n    .key-components th,\n    .ip-records th,\n    .modbus-digital th,\n    .modbus-analogue th,\n    .process-tests th,\n    .scada-verification th,\n    .trends-testing th,\n    .alarm-signals th {\n      background: var(--cully-primary);\n      color: white;\n      padding: 8px 6px; /* Reduced from 14px 16px */\n      text-align: left;\n      font-weight: 600;\n      font-size: 11px; /* Reduced from 14px */\n      border-bottom: 1px solid var(--cully-primary-dark);\n      white-space: nowrap;\n      position: sticky;\n      top: 0;\n      z-index: 10;\n    }\n\n    /* Compact Table Cells */\n    .digital-signals td,\n    .digital-outputs td,\n    .analogue-inputs td,\n    .analogue-outputs td,\n    .approvals td,\n    .documents td,\n    .pretest-table td,\n    .key-components td,\n    .ip-records td,\n    .modbus-digital td,\n    .modbus-analogue td,\n    .process-tests td,\n    .scada-verification td,\n    .trends-testing td,\n    .alarm-signals td {\n      padding: 6px 4px; /* Reduced from 14px 16px */\n      border-bottom: 1px solid #f1f5f9;\n      color: var(--text-primary);\n      font-size: 12px; /* Reduced from 14px */\n      vertical-align: top;\n    }\n\n    /* Alternating row colors for better readability */\n    tbody tr:nth-child(even) {\n      background: #f8fafc;\n    }\n\n    tbody tr:hover {\n      background: rgba(77, 208, 225, 0.08);\n    }\n\n/* Professional Form Controls */\ntbody td input,\ntbody td textarea,\ntbody td select {\n  width: 100%;\n  min-width: 0;\n  padding: 10px 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  font-size: 13px;\n  margin: 0;\n  line-height: 1.4;\n  background: white;\n  transition: all 0.25s ease;\n  box-shadow: 0 1px 2px rgba(0,0,0,0.05);\n  font-family: inherit;\n  box-sizing: border-box;\n}\n\n/* Focus States */\ntbody td input:focus,\ntbody td textarea:focus,\ntbody td select:focus {\n  outline: none;\n  border-color: var(--primary);\n  box-shadow: 0 0 0 2px rgba(77, 208, 225, 0.15);\n  background: #fefefe;\n}\n\ntbody td textarea {\n  min-height: 80px;\n  resize: vertical;\n  font-family: inherit;\n}\n\n/* Professional Action Buttons */\n.table-actions-cell {\n  text-align: center;\n  padding: 8px 4px !important;\n  min-width: 120px;\n}\n\n.table-action-buttons {\n  display: flex;\n  gap: 4px;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: nowrap;\n}\n\n.table-action-btn {\n  padding: 6px 8px;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 11px;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  min-width: 32px;\n  height: 28px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n}\n\n.table-action-btn.edit-btn {\n  background: linear-gradient(135deg, #3b82f6, #2563eb);\n  color: white;\n  box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);\n}\n\n.table-action-btn.edit-btn:hover {\n  background: linear-gradient(135deg, #2563eb, #1d4ed8);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(59, 130, 246, 0.4);\n}\n\n.table-action-btn.delete-btn {\n  background: linear-gradient(135deg, #ef4444, #dc2626);\n  color: white;\n  box-shadow: 0 2px 4px rgba(239, 68, 68, 0.3);\n}\n\n.table-action-btn.delete-btn:hover {\n  background: linear-gradient(135deg, #dc2626, #b91c1c);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(239, 68, 68, 0.4);\n}\n\n.table-action-btn.move-btn {\n  background: linear-gradient(135deg, #6b7280, #4b5563);\n  color: white;\n  box-shadow: 0 2px 4px rgba(107, 114, 128, 0.3);\n}\n\n.table-action-btn.move-btn:hover {\n  background: linear-gradient(135deg, #4b5563, #374151);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(107, 114, 128, 0.4);\n}\n\n/* Legacy support for existing remove buttons */\n.remove-row-btn, .btn-remove {\n  background: linear-gradient(135deg, #ef4444, #dc2626);\n  color: white;\n  border: none;\n  padding: 8px 12px;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(239, 68, 68, 0.3);\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.remove-row-btn:hover, .btn-remove:hover {\n  background: linear-gradient(135deg, #dc2626, #b91c1c);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(239, 68, 68, 0.4);\n}\n\n/* Intelligent Column Sizing for Professional Layout */\n\n/* Digital Signals Table - Precise Column Widths */\n.digital-signals th:nth-child(1), .digital-signals td:nth-child(1) { width: 60px; max-width: 60px; } /* S.No */\n.digital-signals th:nth-child(2), .digital-signals td:nth-child(2) { width: 80px; max-width: 80px; } /* Rack No */\n.digital-signals th:nth-child(3), .digital-signals td:nth-child(3) { width: 120px; max-width: 120px; } /* Module Position */\n.digital-signals th:nth-child(4), .digital-signals td:nth-child(4) { width: 140px; max-width: 140px; } /* Signal TAG */\n.digital-signals th:nth-child(5), .digital-signals td:nth-child(5) { width: 200px; min-width: 200px; } /* Description */\n.digital-signals th:nth-child(6), .digital-signals td:nth-child(6) { width: 100px; max-width: 100px; } /* Result */\n.digital-signals th:nth-child(7), .digital-signals td:nth-child(7) { width: 150px; max-width: 150px; } /* Punch Item */\n.digital-signals th:nth-child(8), .digital-signals td:nth-child(8) { width: 120px; max-width: 120px; } /* Verified By */\n.digital-signals th:nth-child(9), .digital-signals td:nth-child(9) { width: 150px; min-width: 150px; } /* Comment */\n.digital-signals th:nth-child(10), .digital-signals td:nth-child(10) { width: 80px; max-width: 80px; } /* Action */\n\n/* Digital Outputs Table */\n.digital-outputs th:nth-child(1), .digital-outputs td:nth-child(1) { width: 60px; max-width: 60px; }\n.digital-outputs th:nth-child(2), .digital-outputs td:nth-child(2) { width: 80px; max-width: 80px; }\n.digital-outputs th:nth-child(3), .digital-outputs td:nth-child(3) { width: 120px; max-width: 120px; }\n.digital-outputs th:nth-child(4), .digital-outputs td:nth-child(4) { width: 140px; max-width: 140px; }\n.digital-outputs th:nth-child(5), .digital-outputs td:nth-child(5) { width: 200px; min-width: 200px; }\n.digital-outputs th:nth-child(6), .digital-outputs td:nth-child(6) { width: 100px; max-width: 100px; }\n.digital-outputs th:nth-child(7), .digital-outputs td:nth-child(7) { width: 150px; max-width: 150px; }\n.digital-outputs th:nth-child(8), .digital-outputs td:nth-child(8) { width: 120px; max-width: 120px; }\n.digital-outputs th:nth-child(9), .digital-outputs td:nth-child(9) { width: 150px; min-width: 150px; }\n.digital-outputs th:nth-child(10), .digital-outputs td:nth-child(10) { width: 80px; max-width: 80px; }\n\n/* Analogue Inputs Table */\n.analogue-inputs th:nth-child(1), .analogue-inputs td:nth-child(1) { width: 60px; max-width: 60px; }\n.analogue-inputs th:nth-child(2), .analogue-inputs td:nth-child(2) { width: 80px; max-width: 80px; }\n.analogue-inputs th:nth-child(3), .analogue-inputs td:nth-child(3) { width: 120px; max-width: 120px; }\n.analogue-inputs th:nth-child(4), .analogue-inputs td:nth-child(4) { width: 140px; max-width: 140px; }\n.analogue-inputs th:nth-child(5), .analogue-inputs td:nth-child(5) { width: 200px; min-width: 200px; }\n.analogue-inputs th:nth-child(6), .analogue-inputs td:nth-child(6) { width: 100px; max-width: 100px; }\n.analogue-inputs th:nth-child(7), .analogue-inputs td:nth-child(7) { width: 150px; max-width: 150px; }\n.analogue-inputs th:nth-child(8), .analogue-inputs td:nth-child(8) { width: 120px; max-width: 120px; }\n.analogue-inputs th:nth-child(9), .analogue-inputs td:nth-child(9) { width: 150px; min-width: 150px; }\n.analogue-inputs th:nth-child(10), .analogue-inputs td:nth-child(10) { width: 80px; max-width: 80px; }\n\n/* Analogue Outputs Table */\n.analogue-outputs th:nth-child(1), .analogue-outputs td:nth-child(1) { width: 60px; max-width: 60px; }\n.analogue-outputs th:nth-child(2), .analogue-outputs td:nth-child(2) { width: 80px; max-width: 80px; }\n.analogue-outputs th:nth-child(3), .analogue-outputs td:nth-child(3) { width: 120px; max-width: 120px; }\n.analogue-outputs th:nth-child(4), .analogue-outputs td:nth-child(4) { width: 140px; max-width: 140px; }\n.analogue-outputs th:nth-child(5), .analogue-outputs td:nth-child(5) { width: 200px; min-width: 200px; }\n.analogue-outputs th:nth-child(6), .analogue-outputs td:nth-child(6) { width: 100px; max-width: 100px; }\n.analogue-outputs th:nth-child(7), .analogue-outputs td:nth-child(7) { width: 150px; max-width: 150px; }\n.analogue-outputs th:nth-child(8), .analogue-outputs td:nth-child(8) { width: 120px; max-width: 120px; }\n.analogue-outputs th:nth-child(9), .analogue-outputs td:nth-child(9) { width: 150px; min-width: 150px; }\n.analogue-outputs th:nth-child(10), .analogue-outputs td:nth-child(10) { width: 80px; max-width: 80px; }\n\n/* Other Tables - Flexible Widths */\n.approvals th:nth-child(1), .approvals td:nth-child(1) { width: 25%; }\n.approvals th:nth-child(2), .approvals td:nth-child(2) { width: 20%; }\n.approvals th:nth-child(3), .approvals td:nth-child(3) { width: 15%; }\n.approvals th:nth-child(4), .approvals td:nth-child(4) { width: 15%; }\n.approvals th:nth-child(5), .approvals td:nth-child(5) { width: 20%; }\n.approvals th:nth-child(6), .approvals td:nth-child(6) { width: 5%; }\n\n.documents th:nth-child(1), .documents td:nth-child(1) { width: 30%; }\n.documents th:nth-child(2), .documents td:nth-child(2) { width: 60%; }\n.documents th:nth-child(3), .documents td:nth-child(3) { width: 10%; }\n\n.key-components th:nth-child(1), .key-components td:nth-child(1) { width: 10%; }\n.key-components th:nth-child(2), .key-components td:nth-child(2) { width: 25%; }\n.key-components th:nth-child(3), .key-components td:nth-child(3) { width: 45%; }\n.key-components th:nth-child(4), .key-components td:nth-child(4) { width: 15%; }\n.key-components th:nth-child(5), .key-components td:nth-child(5) { width: 5%; }\n\n.ip-records th:nth-child(1), .ip-records td:nth-child(1) { width: 30%; }\n.ip-records th:nth-child(2), .ip-records td:nth-child(2) { width: 25%; }\n.ip-records th:nth-child(3), .ip-records td:nth-child(3) { width: 40%; }\n.ip-records th:nth-child(4), .ip-records td:nth-child(4) { width: 5%; }\n\n/* Perfect Input Alignment Within Table Cells */\n.digital-signals td input,\n.digital-signals td select,\n.digital-signals td textarea,\n.digital-outputs td input,\n.digital-outputs td select,\n.digital-outputs td textarea,\n.analogue-inputs td input,\n.analogue-inputs td select,\n.analogue-inputs td textarea,\n.analogue-outputs td input,\n.analogue-outputs td select,\n.analogue-outputs td textarea,\n.approvals td input,\n.approvals td select,\n.approvals td textarea,\n.documents td input,\n.documents td textarea,\n.pretest-table td input,\n.pretest-table td select,\n.pretest-table td textarea,\n.key-components td input,\n.key-components td textarea,\n.ip-records td input,\n.ip-records td textarea,\n.modbus-digital td input,\n.modbus-digital td select,\n.modbus-digital td textarea,\n.modbus-analogue td input,\n.modbus-analogue td select,\n.modbus-analogue td textarea,\n.process-tests td input,\n.process-tests td select,\n.process-tests td textarea,\n.scada-verification td input,\n.scada-verification td select,\n.scada-verification td textarea,\n.trends-testing td input,\n.trends-testing td select,\n.trends-testing td textarea,\n.alarm-signals td input,\n.alarm-signals td select,\n.alarm-signals td textarea {\n  width: calc(100% - 2px);\n  margin: 0;\n  padding: 6px 8px;\n  font-size: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  box-sizing: border-box;\n  background: white;\n  text-align: center;\n  vertical-align: middle;\n  outline: none;\n  transition: all 0.2s ease;\n}\n\n/* Special alignment for S.No column */\n.digital-signals td:nth-child(1) input,\n.digital-outputs td:nth-child(1) input,\n.analogue-inputs td:nth-child(1) input,\n.analogue-outputs td:nth-child(1) input {\n  text-align: center;\n  font-weight: 600;\n  color: var(--cully-primary);\n}\n\n/* Special styling for Result columns */\n.digital-signals td:nth-child(6) select,\n.digital-outputs td:nth-child(6) select,\n.analogue-inputs td:nth-child(6) select,\n.analogue-outputs td:nth-child(6) select {\n  text-align-last: center;\n  font-weight: 500;\n}\n\n/* Textarea specific styling */\n.digital-signals td textarea,\n.digital-outputs td textarea,\n.analogue-inputs td textarea,\n.analogue-outputs td textarea {\n  min-height: 60px;\n  resize: vertical;\n  text-align: left;\n  vertical-align: top;\n  padding: 8px;\n}\n\n/* Focus States */\n.digital-signals td input:focus,\n.digital-signals td select:focus,\n.digital-signals td textarea:focus,\n.digital-outputs td input:focus,\n.digital-outputs td select:focus,\n.digital-outputs td textarea:focus,\n.analogue-inputs td input:focus,\n.analogue-inputs td select:focus,\n.analogue-inputs td textarea:focus,\n.analogue-outputs td input:focus,\n.analogue-outputs td select:focus,\n.analogue-outputs td textarea:focus,\n.approvals td input:focus,\n.approvals td select:focus,\n.approvals td textarea:focus,\n.documents td input:focus,\n.documents td textarea:focus,\n.pretest-table td input:focus,\n.pretest-table td select:focus,\n.pretest-table td textarea:focus,\n.key-components td input:focus,\n.key-components td textarea:focus,\n.ip-records td input:focus,\n.ip-records td textarea:focus,\n.modbus-digital td input:focus,\n.modbus-digital td select:focus,\n.modbus-digital td textarea:focus,\n.modbus-analogue td input:focus,\n.modbus-analogue td select:focus,\n.modbus-analogue td textarea:focus,\n.process-tests td input:focus,\n.process-tests td select:focus,\n.process-tests td textarea:focus,\n.scada-verification td input:focus,\n.scada-verification td select:focus,\n.scada-verification td textarea:focus,\n.trends-testing td input:focus,\n.trends-testing td select:focus,\n.trends-testing td textarea:focus,\n.alarm-signals td input:focus,\n.alarm-signals td select:focus,\n.alarm-signals td textarea:focus {\n  border-color: var(--cully-primary);\n  box-shadow: 0 0 0 2px rgba(77, 208, 225, 0.15);\n  background: #fefefe;\n}\n\n/* — UTILITY BUTTON GROUP — */\n.button-group {\n  margin-top: 1.5rem;\n  display: flex;\n  gap: 1rem;\n}\n\n/* — ANIMATIONS — */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes fadeOut {\n  from { opacity: 1; transform: scale(1); }\n  to { opacity: 0; transform: scale(0.95); }\n}\n\n/* — DYNAMIC ROW ANIMATIONS — */\n.fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n\n.fade-out {\n  animation: fadeOut 0.3s ease-out;\n  pointer-events: none;\n}\n\n/* — IMAGE PREVIEWS — */\n.file-list {\n  list-style: none;\n  margin-top: 0.5rem;\n}\n.file-list li {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-bottom: 0.5rem;\n}\n.file-list img.preview-thumb {\n  max-width: 60px;\n  max-height: 60px;\n  border-radius: var(--border-radius);\n  object-fit: cover;\n}\n\n.error {\n  color: #e74c3c;\n  font-size: 0.85rem;\n  display: none;\n}\n\n.form-step.invalid input:invalid {\n  border-color: #e74c3c;\n}\n\n.signature-pad-container {\n  border: 1px dashed #ccc;\n  margin-bottom: 20px;\n  height: 200px;\n  width: 100%;\n  background-color: #f9f9f9;\n}\n\n#sig_prepared_canvas {\n  width: 100%;\n  height: 100%;\n  cursor: crosshair;\n}\n\n.signature-pad-container {\n  position: relative;\n  width: 100%;\n  height: 150px;\n  border: 1px solid #ccc;\n}\n\n#sig_prepared_canvas {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n  /* Add a hint message */\n  .signature-pad-container::before {\n    content: \"Click and drag to sign here\";\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: #aaa;\n    pointer-events: none;\n    z-index: 1;\n  }\n\n\n.required-field {\n  border-left: 3px solid var(--accent);\n}\n\n.invalid-field {\n  border-color: #e74c3c;\n  box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.2);\n}\n\n/* Error message styling */\n.error {\n  color: #e74c3c;\n  font-size: 0.85rem;\n  margin-top: 0.3rem;\n  display: none;\n  animation: fadeIn 0.3s ease-out;\n}\n\n/* Improved focus styles */\ninput:focus, textarea:focus, select:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(47,132,189,0.2);\n  border-color: var(--primary);\n}\n\n/* Signature pad improvements */\n.signature-pad-container {\n  position: relative;\n  border: 1px solid #ccc;\n  margin-bottom: 20px;\n  border-radius: var(--border-radius);\n  overflow: hidden;\n}\n\n.signature-pad-container:before {\n  content: \"Sign here\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #ccc;\n  font-size: 1.5rem;\n  pointer-events: none;\n  opacity: 0.7;\n  z-index: 0;\n}\n\n/* Button styles */\nbutton[type=\"submit\"].btn-primary {\n  position: relative;\n  background: var(--primary);\n  color: white;\n  font-weight: 600;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: var(--border-radius);\n  cursor: pointer;\n  transition: var(--transition);\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n\nbutton[type=\"submit\"].btn-primary:hover {\n  background: var(--primary-light);\n  transform: translateY(-2px);\n}\n\nbutton[type=\"submit\"].btn-primary:active {\n  transform: translateY(0);\n}\n\n/* Form step transition improvements */\n.form-step {\n  transition: opacity 0.3s ease;\n  opacity: 0;\n  display: none;\n}\n\n.form-step.active {\n  opacity: 1;\n  display: block;\n  animation: fadeInStep 0.5s ease-out;\n}\n\n@keyframes fadeInStep {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n/* File upload styling improvements */\ninput[type=\"file\"] {\n  border: 2px dashed #ccc;\n  padding: 20px;\n  background: #f8f9fa;\n  border-radius: var(--border-radius);\n  transition: border-color 0.3s;\n  cursor: pointer;\n}\n\ninput[type=\"file\"]:hover {\n  border-color: var(--primary-light);\n}\n\n.file-list {\n  margin-top: 10px;\n}\n\n.file-list li {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  padding: 8px;\n  background: white;\n  border-radius: var(--border-radius);\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.file-list img.preview-thumb {\n  width: 60px;\n  height: 60px;\n  object-fit: cover;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n\n.file-list button {\n  background: transparent;\n  border: none;\n  color: #e74c3c;\n  cursor: pointer;\n  padding: 5px;\n  margin-left: 10px;\n}\n\n/* Tooltip styling */\n.tooltip {\n  position: relative;\n  display: inline-block;\n  margin-left: 5px;\n  cursor: help;\n}\n\n.tooltip .tooltip-icon {\n  width: 18px;\n  height: 18px;\n  background: var(--primary);\n  color: white;\n  border-radius: 50%;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  font-weight: bold;\n}\n\n.tooltip .tooltip-text {\n  visibility: hidden;\n  width: 200px;\n  background: #333;\n  color: white;\n  text-align: center;\n  border-radius: 6px;\n  padding: 8px;\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  transform: translateX(-50%);\n  opacity: 0;\n  transition: opacity 0.3s;\n  font-size: 0.8rem;\n  pointer-events: none;\n}\n\n.tooltip:hover .tooltip-text {\n  visibility: visible;\n  opacity: 1;\n}\n\n/* Mobile Responsiveness Improvements */\n@media screen and (max-width: 768px) {\n  /* General styles */\n  .container {\n    padding: 1rem;\n    margin: 1rem;\n  }\n\n  /* Form controls become full width */\n  input, textarea, select {\n    width: 100%;\n    padding: 0.75rem;\n  }\n\n  /* Logo size adjustment */\n  .logo-header img {\n    height: 40px;\n  }\n\n  /* Button group stacking */\n  .button-group {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n\n  .button-group button,\n  .button-group a {\n    width: 100%;\n    text-align: center;\n  }\n\n  /* Progress navigation stacking */\n  nav.progress {\n    flex-wrap: wrap;\n    gap: 0.5rem;\n  }\n\n  .progress-step {\n    width: 30%; /* 3 steps per row */\n  }\n\n  /* Tables responsive handling */\n  .table-responsive {\n    max-width: 100%;\n    overflow-x: auto;\n  }\n\n  table {\n    min-width: 600px; /* Ensure minimum width for horizontal scroll */\n  }\n\n  /* File upload improvements */\n  input[type=\"file\"] {\n    padding: 0.5rem;\n  }\n\n  .file-list li {\n    flex-wrap: wrap;\n  }\n\n  .file-list .preview-thumb {\n    width: 40px;\n    height: 40px;\n  }\n\n  /* Card adjustments */\n  .card {\n    margin: 1rem 0;\n  }\n\n  .card-header {\n    padding: 0.6rem 1rem;\n  }\n\n  .card-body {\n    padding: 0.75rem;\n  }\n\n  /* Signature pad sizing */\n  .signature-pad-container {\n    height: 150px;\n  }\n\n  /* Status page adjustments */\n  .status-badge {\n    display: block;\n    width: 100%;\n  }\n\n  .progress-tracker .step-content {\n    padding: 10px;\n  }\n\n  .document-info h3 {\n    font-size: 1.2rem;\n  }\n}\n\n/* Even smaller screens (phones) */\n@media screen and (max-width: 480px) {\n  .main-layout {\n    padding: 12px;\n    gap: 16px;\n  }\n\n  .form-container {\n    padding: 16px;\n  }\n\n  .table-responsive {\n    margin: 16px -16px;\n    padding: 0 16px;\n    position: relative;\n  }\n\n  table {\n    min-width: 800px; /* Ensure horizontal scroll on phones */\n  }\n\n  /* Add scroll indicator for mobile */\n  .table-responsive::before {\n    content: \"← Scroll horizontally to see all columns →\";\n    display: block;\n    text-align: center;\n    color: var(--cully-primary);\n    font-size: 12px;\n    font-weight: 600;\n    padding: 8px;\n    background: rgba(77, 208, 225, 0.1);\n    margin-bottom: 10px;\n    border-radius: 4px;\n    animation: gentle-pulse 2s infinite;\n  }\n\n  @keyframes gentle-pulse {\n    0%, 100% { opacity: 0.7; }\n    50% { opacity: 1; }\n  }\n\n  /* Smaller input fields on mobile */\n  tbody td input, tbody td select, tbody td textarea {\n    padding: 8px 10px;\n    font-size: 13px;\n    min-width: 120px;\n  }\n\n  /* Progress steps adjustment */\n  .progress-step .step-circle {\n    width: 32px;\n    height: 32px;\n    font-size: 12px;\n  }\n\n  .step-legend {\n    font-size: 1.3rem;\n  }\n}\n\n/* Email Selection Styling */\n.email-selection-container {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.email-select {\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 14px;\n  background-color: #f8f9fa;\n  cursor: pointer;\n  transition: border-color 0.2s;\n}\n\n.email-select:hover {\n  border-color: #007bff;\n}\n\n.email-select:focus {\n  outline: none;\n  border-color: #007bff;\n  box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\n}\n\n/* Show version info prominently */\n.version-display {\n  background: linear-gradient(135deg, #28a745 0%, #20c997 100%);\n  color: white;\n  padding: 8px 16px;\n  border-radius: 20px;\n  font-weight: 600;\n  display: inline-block;\n  margin-left: 10px;\n  font-size: 0.9rem;\n}\n\n/* Report Type Selection Page */\n.report-type-page {\n  min-height: 100vh;\n  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n  padding: 2rem;\n}\n\n.report-type-page h1 {\n  text-align: center;\n  color: var(--primary);\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  font-weight: 600;\n}\n\n.subtitle {\n  text-align: center;\n  color: #6c757d;\n  font-size: 1.1rem;\n  margin-bottom: 3rem;\n  max-width: 600px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.report-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  gap: 2rem;\n  max-width: 1200px;\n  margin: 0 auto 3rem auto;\n}\n\n.report-card {\n  background: white;\n  border-radius: 12px;\n  padding: 2rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  position: relative;\n  border: 2px solid transparent;\n}\n\n.report-card:hover:not(.coming-soon) {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n  border-color: var(--primary);\n}\n\n.report-card.coming-soon {\n  opacity: 0.7;\n  background: #f8f9fa;\n}\n\n.report-icon {\n  font-size: 3rem;\n  color: var(--primary);\n  margin-bottom: 1rem;\n}\n\n.report-card.coming-soon .report-icon {\n  color: #6c757d;\n}\n\n.report-card h3 {\n  color: var(--text-dark);\n  font-size: 1.25rem;\n  margin-bottom: 1rem;\n  font-weight: 600;\n}\n\n.report-card p {\n  color: #6c757d;\n  line-height: 1.6;\n  margin-bottom: 1.5rem;\n  font-size: 0.95rem;\n}\n\n.report-btn {\n  width: 100%;\n  padding: 0.75rem 1.5rem;\n  font-size: 1rem;\n  border-radius: 6px;\n  transition: all 0.3s ease;\n}\n\n.coming-soon-badge {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  background: #ffc107;\n  color: #212529;\n  padding: 0.25rem 0.75rem;\n  border-radius: 12px;\n  font-size: 0.75rem;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n\n.back-button-container {\n  text-align: center;\n  max-width: 1200px;\n  margin: 0 auto;\n}\n\n/* ===== UNIFIED ADMIN LAYOUT STYLES ===== */\n\n/* Page Actions Bar */\n.page-actions {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 24px;\n    gap: 16px;\n    flex-wrap: wrap;\n}\n\n.search-container {\n    flex: 1;\n    max-width: 400px;\n}\n\n.search-box {\n    position: relative;\n    display: flex;\n    align-items: center;\n}\n\n.search-box i {\n    position: absolute;\n    left: 12px;\n    color: var(--text-muted);\n    z-index: 1;\n}\n\n.search-box input {\n    width: 100%;\n    padding: 12px 12px 12px 40px;\n    border: 1px solid var(--border-color);\n    border-radius: 8px;\n    font-size: 14px;\n    background: white;\n    transition: border-color 0.2s, box-shadow 0.2s;\n}\n\n.search-box input:focus {\n    outline: none;\n    border-color: var(--cully-primary);\n    box-shadow: 0 0 0 3px rgba(77, 208, 225, 0.1);\n}\n\n.action-buttons {\n    display: flex;\n    gap: 12px;\n    flex-wrap: wrap;\n}\n\n/* Unified Button Styles */\n.btn {\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n    padding: 12px 20px;\n    border: none;\n    border-radius: 8px;\n    font-size: 14px;\n    font-weight: 600;\n    cursor: pointer;\n    text-decoration: none;\n    transition: all 0.2s ease;\n    white-space: nowrap;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, var(--cully-primary), var(--cully-primary-dark));\n    color: white;\n    box-shadow: 0 2px 8px rgba(77, 208, 225, 0.25);\n}\n\n.btn-primary:hover {\n    background: linear-gradient(135deg, var(--cully-primary-light), var(--cully-primary));\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(77, 208, 225, 0.35);\n}\n\n.btn-secondary {\n    background: #6b7280;\n    color: white;\n    box-shadow: 0 2px 8px rgba(107, 114, 128, 0.25);\n}\n\n.btn-secondary:hover {\n    background: #4b5563;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(107, 114, 128, 0.35);\n}\n\n/* Filter Tabs */\n.filter-tabs {\n    display: flex;\n    background: white;\n    border-radius: 12px;\n    border: 1px solid var(--border-color);\n    padding: 4px;\n    margin-bottom: 24px;\n    overflow-x: auto;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n}\n\n.filter-tab {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    padding: 12px 16px;\n    border-radius: 8px;\n    text-decoration: none;\n    color: var(--text-secondary);\n    font-weight: 500;\n    transition: all 0.2s;\n    white-space: nowrap;\n    min-width: fit-content;\n}\n\n.filter-tab:hover:not(.active) {\n    background: var(--bg-secondary);\n    color: var(--text-primary);\n}\n\n.filter-tab.active {\n    background: var(--cully-primary);\n    color: white;\n    box-shadow: 0 2px 8px rgba(77, 208, 225, 0.25);\n}\n\n.tab-badge {\n    background: var(--border-color);\n    color: var(--text-secondary);\n    padding: 2px 8px;\n    border-radius: 12px;\n    font-size: 12px;\n    font-weight: 600;\n    min-width: 20px;\n    text-align: center;\n}\n\n.filter-tab.active .tab-badge {\n    background: rgba(255, 255, 255, 0.3);\n    color: white;\n}\n\n.tab-badge.pending {\n    background: #fef3c7;\n    color: #92400e;\n}\n\n.tab-badge.active {\n    background: #d1fae5;\n    color: #065f46;\n}\n\n.tab-badge.disabled {\n    background: #fee2e2;\n    color: #991b1b;\n}\n\n/* User Table Styles */\n.users-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n.users-table th {\n    background: var(--bg-secondary);\n    color: var(--text-primary);\n    padding: 16px 20px;\n    text-align: left;\n    font-weight: 600;\n    font-size: 14px;\n    border-bottom: 1px solid var(--border-color);\n}\n\n.users-table td {\n    padding: 16px 20px;\n    border-bottom: 1px solid #f1f5f9;\n    vertical-align: middle;\n}\n\n.users-table tr:hover {\n    background: var(--bg-secondary);\n}\n\n.user-details {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n}\n\n.user-avatar {\n    color: var(--text-muted);\n    font-size: 24px;\n}\n\n.user-name {\n    font-weight: 600;\n    color: var(--text-primary);\n    font-size: 14px;\n    margin-bottom: 2px;\n}\n\n.user-email {\n    color: var(--text-secondary);\n    font-size: 13px;\n}\n\n.requested-role {\n    color: #f59e0b;\n    font-size: 12px;\n    font-style: italic;\n    margin-top: 2px;\n}\n\n/* Status and Role Badges */\n.status-badge,\n.role-badge {\n    display: inline-flex;\n    align-items: center;\n    gap: 6px;\n    padding: 6px 12px;\n    border-radius: 20px;\n    font-weight: 600;\n    font-size: 12px;\n    white-space: nowrap;\n}\n\n.status-pending,\n.role-pending {\n    background: #fef3c7;\n    color: #92400e;\n}\n\n.status-active {\n    background: #d1fae5;\n    color: #065f46;\n}\n\n.status-disabled {\n    background: #fee2e2;\n    color: #991b1b;\n}\n\n.status-connected {\n    background: #d1fae5;\n    color: #065f46;\n}\n\n.status-disconnected {\n    background: #fee2e2;\n    color: #991b1b;\n}\n\n.status-warning {\n    background: #fef3c7;\n    color: #92400e;\n}\n\n.role-admin {\n    background: #fef2f2;\n    color: #991b1b;\n}\n\n.role-engineer {\n    background: #eff6ff;\n    color: #1d4ed8;\n}\n\n.role-tm {\n    background: #f0f9ff;\n    color: #0369a1;\n}\n\n.role-pm {\n    background: #ecfdf5;\n    color: #065f46;\n}\n\n/* User Actions */\n.user-actions {\n    display: flex;\n    gap: 8px;\n    justify-content: flex-end;\n    flex-wrap: wrap;\n}\n\n.role-select {\n    padding: 6px 8px;\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    font-size: 12px;\n    background: white;\n    margin-right: 8px;\n}\n\n.btn-small {\n    padding: 6px 12px;\n    font-size: 12px;\n    border-radius: 6px;\n    border: none;\n    cursor: pointer;\n    font-weight: 600;\n    transition: all 0.2s ease;\n    display: inline-flex;\n    align-items: center;\n    gap: 4px;\n    white-space: nowrap;\n}\n\n.btn-approve-small {\n    background: linear-gradient(135deg, #10b981, #059669);\n    color: white;\n    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.3);\n}\n\n.btn-approve-small:hover {\n    background: linear-gradient(135deg, #059669, #047857);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(16, 185, 129, 0.4);\n}\n\n.btn-disable {\n    background: linear-gradient(135deg, #ef4444, #dc2626);\n    color: white;\n    box-shadow: 0 2px 4px rgba(239, 68, 68, 0.3);\n}\n\n.btn-disable:hover {\n    background: linear-gradient(135deg, #dc2626, #b91c1c);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(239, 68, 68, 0.4);\n}\n\n.btn-enable {\n    background: linear-gradient(135deg, #3b82f6, #2563eb);\n    color: white;\n    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);\n}\n\n.btn-enable:hover {\n    background: linear-gradient(135deg, #2563eb, #1d4ed8);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(59, 130, 246, 0.4);\n}\n\n.date-text {\n    color: var(--text-secondary);\n    font-size: 13px;\n}\n\n/* Form Styles */\n.form-group {\n    margin-bottom: 20px;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 8px;\n    font-weight: 500;\n    color: var(--text-primary);\n}\n\n.form-group input,\n.form-group select,\n.form-group textarea {\n    width: 100%;\n    padding: 12px;\n    border: 1px solid var(--border-color);\n    border-radius: 6px;\n    font-size: 14px;\n    background: white;\n    transition: border-color 0.2s, box-shadow 0.2s;\n}\n\n.form-group input:focus,\n.form-group select:focus,\n.form-group textarea:focus {\n    outline: none;\n    border-color: var(--cully-primary);\n    box-shadow: 0 0 0 3px rgba(77, 208, 225, 0.1);\n}\n\n.required {\n    color: #ef4444;\n}\n\n.form-actions {\n    margin-top: 24px;\n    display: flex;\n    gap: 12px;\n}\n\n/* Mobile Card Layout Styles */\n.mobile-table-cards {\n  display: none;\n}\n\n.mobile-card {\n  background: white;\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  margin-bottom: 16px;\n  box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  overflow: hidden;\n  transition: box-shadow 0.2s ease;\n}\n\n.mobile-card:hover {\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n}\n\n.mobile-card-header {\n  background: linear-gradient(135deg, var(--cully-primary) 0%, var(--cully-primary-light) 100%);\n  color: white;\n  padding: 12px 16px;\n  font-weight: 600;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.mobile-card-body {\n  padding: 16px;\n}\n\n.mobile-field-group {\n  margin-bottom: 12px;\n}\n\n.mobile-field-label {\n  font-size: 12px;\n  font-weight: 600;\n  color: var(--text-secondary);\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  margin-bottom: 4px;\n}\n\n.mobile-field-value {\n  position: relative;\n}\n\n.mobile-field-value input,\n.mobile-field-value select,\n.mobile-field-value textarea {\n  width: 100%;\n  padding: 8px 12px;\n  border: 1px solid var(--border-color);\n  border-radius: 6px;\n  font-size: 14px;\n  background: white;\n  transition: border-color 0.2s ease;\n}\n\n.mobile-field-value input:focus,\n.mobile-field-value select:focus,\n.mobile-field-value textarea:focus {\n  outline: none;\n  border-color: var(--cully-primary);\n  box-shadow: 0 0 0 2px rgba(77, 208, 225, 0.15);\n}\n\n.mobile-card-actions {\n  display: flex;\n  gap: 8px;\n  padding-top: 12px;\n  border-top: 1px solid var(--border-color);\n  margin-top: 12px;\n  justify-content: flex-end;\n}\n\n.mobile-action-btn {\n  padding: 6px 12px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  display: flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.mobile-action-btn.edit {\n  background: #3b82f6;\n  color: white;\n}\n\n.mobile-action-btn.delete {\n  background: #ef4444;\n  color: white;\n}\n\n.mobile-action-btn:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n}\n\n/* Responsive Grid for Essential Fields */\n.mobile-essential-fields {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.mobile-essential-fields .mobile-field-group {\n  margin-bottom: 0;\n}\n\n/* Expandable Details */\n.mobile-expandable {\n  border-top: 1px solid var(--border-color);\n  margin-top: 12px;\n}\n\n.mobile-expand-toggle {\n  width: 100%;\n  background: none;\n  border: none;\n  padding: 8px 0;\n  color: var(--cully-primary);\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 600;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 4px;\n  transition: color 0.2s ease;\n}\n\n.mobile-expand-toggle:hover {\n  color: var(--cully-primary-dark);\n}\n\n.mobile-expandable-content {\n  display: none;\n  padding-top: 12px;\n  animation: slideDown 0.3s ease;\n}\n\n.mobile-expandable.expanded .mobile-expandable-content {\n  display: block;\n}\n\n.mobile-expandable.expanded .mobile-expand-toggle .fa-chevron-down {\n  transform: rotate(180deg);\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Sticky Action Buttons */\n.mobile-sticky-actions {\n  position: sticky;\n  bottom: 0;\n  background: white;\n  border-top: 1px solid var(--border-color);\n  padding: 12px 16px;\n  box-shadow: 0 -2px 8px rgba(0,0,0,0.1);\n}\n\n/* Column Priority System for Tablet */\n@media (min-width: 768px) and (max-width: 1024px) {\n  /* Show abbreviated table on tablet */\n  .table-responsive table {\n    display: table;\n  }\n\n  .mobile-table-cards {\n    display: none;\n  }\n\n  /* Hide low priority columns on tablet */\n  .col-priority-low {\n    display: none !important;\n  }\n\n  /* Abbreviate headers on tablet */\n  .table-responsive th {\n    font-size: 11px;\n    padding: 8px 4px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .table-responsive td {\n    padding: 8px 4px;\n    font-size: 12px;\n  }\n\n  /* Sticky essential columns */\n  .col-sticky {\n    position: sticky;\n    left: 0;\n    background: white;\n    z-index: 10;\n    box-shadow: 2px 0 4px rgba(0,0,0,0.1);\n  }\n\n  .col-sticky-actions {\n    position: sticky;\n    right: 0;\n    background: white;\n    z-index: 10;\n    box-shadow: -2px 0 4px rgba(0,0,0,0.1);\n  }\n}\n\n/* Mobile Large (481px - 767px) */\n@media (min-width: 481px) and (max-width: 767px) {\n  body {\n    font-size: 14px;\n  }\n\n  .main-layout {\n    flex-direction: column;\n    width: 100vw;\n    max-width: 100vw;\n    padding: 0;\n    gap: 0;\n    overflow-x: hidden;\n  }\n\n  .progress-sidebar {\n    width: 100%;\n    min-width: auto;\n    position: relative; /* Reset position */\n    top: auto;\n    border-radius: 0;\n    border-right: none;\n    border-bottom: 1px solid var(--border-color);\n    padding: 15px;\n    height: auto; /* Adjust height */\n  }\n\n  .progress-nav {\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 12px;\n    justify-content: center;\n  }\n\n  .progress-step {\n    flex: 1;\n    min-width: 200px;\n  }\n\n  .form-container {\n    width: 100%;\n    max-width: 100%;\n    border-left: none; /* Remove left border */\n    margin: 0;\n    padding: 15px;\n    overflow-x: hidden; /* Ensure no horizontal scroll */\n  }\n\n  .card {\n    margin: 8px 0;\n    border-radius: 8px;\n  }\n\n  .card-header {\n    padding: 10px 12px;\n    font-size: 14px;\n  }\n\n  .table-responsive {\n    overflow-x: auto;\n    margin: 8px 0; /* Reduce margin */\n    border-radius: 8px; /* Smaller border radius */\n  }\n\n  table {\n    min-width: 600px; /* Ensure minimum width for horizontal scroll */\n    font-size: 12px; /* Smaller font size */\n  }\n\n  thead th {\n    padding: 8px 6px;\n    font-size: 12px;\n  }\n\n  tbody td {\n    padding: 8px 6px;\n    max-width: 120px;\n  }\n\n  tbody td input,\n  tbody td textarea,\n  tbody td select {\n    min-width: 100px;\n    font-size: 12px;\n  }\n\n  .modern-nav {\n    padding: 6px 12px;\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .nav-brand {\n    justify-content: center;\n  }\n\n  .nav-actions {\n    justify-content: center;\n    flex-wrap: wrap;\n    gap: 4px;\n  }\n\n  .brand-text {\n    display: none;\n  }\n\n  .brand-logo {\n    height: 24px;\n  }\n\n  .quick-access-btn, .save-progress-btn {\n    padding: 4px 8px;\n    font-size: 11px;\n    white-space: nowrap;\n    flex-shrink: 0;\n  }\n\n  .user-avatar {\n    width: 24px;\n    height: 24px;\n    font-size: 10px;\n  }\n\n  .user-details {\n    display: none;\n  }\n\n  .table-responsive::after {\n    content: \"📱 Swipe left/right to see all columns\";\n    display: block;\n    text-align: center;\n    color: var(--primary);\n    font-size: 10px;\n    padding: 6px;\n    background: rgba(77, 208, 225, 0.1);\n    margin: 8px 0;\n    border-radius: 4px;\n    position: sticky;\n    bottom: 0;\n    z-index: 5;\n  }\n}\n\n/* Mobile Small (320px - 480px) */\n@media (max-width: 480px) {\n  body {\n    font-size: 12px;\n    overflow-x: hidden;\n  }\n\n  .main-layout {\n    flex-direction: column;\n    width: 100vw;\n    max-width: 100vw;\n    overflow-x: hidden;\n    min-height: calc(100vh - 40px);\n  }\n\n  .progress-sidebar {\n    width: 100%;\n    padding: 6px 8px;\n    border-radius: 0;\n    border-right: none;\n    border-bottom: 1px solid var(--border-color);\n    overflow-x: auto;\n  }\n\n  .progress-nav {\n    display: flex;\n    flex-direction: row;\n    overflow-x: auto;\n    gap: 4px;\n    padding: 4px 0;\n    -webkit-overflow-scrolling: touch;\n    min-width: max-content;\n  }\n\n  .progress-step {\n    flex-shrink: 0;\n    min-width: 80px;\n    padding: 4px;\n    text-align: center;\n  }\n\n  .step-circle {\n    width: 24px;\n    height: 24px;\n    font-size: 10px;\n  }\n\n  .step-label {\n    font-size: 9px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .form-container {\n    width: 100%;\n    max-width: 100%;\n    padding: 6px 8px;\n    margin: 0;\n    border-radius: 0;\n    overflow-x: hidden;\n    box-sizing: border-box;\n  }\n\n  .card {\n    margin: 4px 0;\n    border-radius: 4px;\n    width: 100%;\n    max-width: 100%;\n    box-sizing: border-box;\n    overflow: hidden;\n  }\n\n  .card-header {\n    padding: 6px 8px;\n    font-size: 12px;\n    word-wrap: break-word;\n  }\n\n  .table-responsive {\n    overflow-x: auto;\n    margin: 4px 0;\n    padding: 0;\n    border-radius: 4px;\n    -webkit-overflow-scrolling: touch;\n    width: 100%;\n    max-width: 100%;\n    box-sizing: border-box;\n    position: relative;\n  }\n\n  table {\n    min-width: 400px;\n    width: 400px;\n    font-size: 9px;\n    table-layout: fixed;\n  }\n\n  thead th {\n    padding: 4px 2px;\n    font-size: 8px;\n    white-space: nowrap;\n    word-wrap: break-word;\n  }\n\n  tbody td {\n    padding: 3px 1px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  tbody td input,\n  tbody td textarea,\n  tbody td select {\n    padding: 1px 2px;\n    font-size: 8px;\n    min-width: 40px;\n    width: 100%;\n    box-sizing: border-box;\n  }\n\n  .modern-nav {\n    padding: 2px 4px;\n    gap: 2px;\n  }\n\n  .nav-brand {\n    flex-shrink: 0;\n    order: 1;\n  }\n\n  .nav-actions {\n    flex: 1;\n    justify-content: flex-end;\n    flex-wrap: nowrap;\n    gap: 2px;\n    overflow-x: auto;\n    order: 2;\n  }\n\n  .brand-text {\n    display: none;\n  }\n\n  .brand-logo {\n    height: 20px;\n  }\n\n  .quick-access-btn, .save-progress-btn {\n    padding: 1px 3px;\n    font-size: 7px;\n    white-space: nowrap;\n    flex-shrink: 0;\n  }\n\n  .user-avatar {\n    width: 20px;\n    height: 20px;\n    font-size: 8px;\n  }\n\n  .table-responsive::after {\n    content: \"⬅️➡️ Scroll horizontally\";\n    display: block;\n    text-align: center;\n    color: var(--primary);\n    font-size: 7px;\n    padding: 2px;\n    background: rgba(77, 208, 225, 0.1);\n    margin: 2px 0;\n    border-radius: 3px;\n    position: sticky;\n    bottom: 0;\n    z-index: 5;\n  }\n\n  .button-group {\n    flex-direction: column;\n    gap: 6px;\n  }\n\n  .button-group button,\n  .button-group a {\n    width: 100%;\n    padding: 8px;\n    text-align: center;\n    font-size: 11px;\n  }\n}\n\n/* Landscape orientation on small screens */\n@media (max-width: 767px) and (orientation: landscape) {\n  .progress-sidebar {\n    position: fixed;\n    left: -250px;\n    top: 0;\n    height: 100vh;\n    width: 250px;\n    z-index: 1000;\n    transition: left 0.3s ease;\n    background: white;\n    box-shadow: 2px 0 10px rgba(0,0,0,0.1);\n  }\n\n  .progress-sidebar.open {\n    left: 0;\n  }\n\n  .form-container {\n    width: 100%;\n    max-width: 100%;\n    margin-left: 0;\n  }\n\n  .sidebar-toggle {\n    display: block;\n    position: fixed;\n    top: 10px;\n    left: 10px;\n    z-index: 1001;\n    background: var(--primary);\n    color: white;\n    border: none;\n    padding: 8px;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n}\n\n/* Report grid responsiveness */\n@media (max-width: 768px) {\n  .report-grid {\n    grid-template-columns: 1fr;\n    gap: 1.5rem;\n    padding: 0 1rem;\n  }\n\n  .report-type-page h1 {\n    font-size: 2rem;\n  }\n\n  .report-card {\n    padding: 1.5rem;\n  }\n\n  .report-icon {\n    font-size: 2.5rem;\n  }\n}\n\n/* Ultra-wide screens (1600px+) */\n@media (min-width: 1600px) {\n  .main-layout {\n    max-width: 1600px;\n    margin: 0 auto;\n  }\n\n  .progress-sidebar {\n    width: 300px;\n    min-width: 300px;\n  }\n\n  .form-container {\n    width: calc(100vw - 300px);\n    max-width: calc(1600px - 300px);\n    padding: 40px 50px;\n  }\n\n  table {\n    font-size: 16px;\n  }\n\n  thead th {\n    padding: 20px 18px;\n    font-size: 15px;\n  }\n\n  tbody td {\n    padding: 18px 16px;\n  }\n}\n\n/* Improved table responsiveness */\n.table-responsive {\n  overflow-x: auto;\n  position: relative;\n}\n\n.mobile-table-notice {\n  display: none;\n  text-align: center;\n  color: #666;\n  font-style: italic;\n  margin-bottom: 5px;\n  font-size: 0.8rem;\n}\n\n.mobile-table-wrapper::after {\n  display: none;\n}\n\n/* Only show scroll indicators when actually needed */\n@media (max-width: 1200px) {\n  .table-responsive table {\n    min-width: 800px;\n  }\n\n  .mobile-table-notice {\n    display: block;\n  }\n\n  .mobile-table-wrapper::after {\n    content: \"→\";\n    position: absolute;\n    right: 10px;\n    top: 50%;\n    transform: translateY(-50%);\n    font-size: 1.5rem;\n    color: rgba(0,0,0,0.3);\n    animation: pulse 1.5s infinite;\n    pointer-events: none;\n    display: block;\n  }\n}\n\n/* Pre-submission checklist improvements */\n.checklist-container {\n  background: white;\n  border-radius: var(--border-radius);\n  padding: var(--spacing-lg);\n  margin: var(--spacing-lg) 0;\n  box-shadow: 0 2px 10px var(--shadow-color);\n}\n\n.checklist-header {\n  background: var(--primary);\n  color: white;\n  padding: var(--spacing-md) var(--spacing-lg);\n  margin: calc(-1 * var(--spacing-lg)) calc(-1 * var(--spacing-lg)) var(--spacing-lg);\n  border-radius: var(--border-radius) var(--border-radius) 0 0;\n  font-weight: 600;\n  font-size: 1.1rem;\n}\n\n.checklist-item {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--spacing-md);\n  padding: var(--spacing-md) 0;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.checklist-item:last-child {\n  border-bottom: none;\n}\n\n.checklist-item input[type=\"checkbox\"] {\n  width: 18px;\n  height: 18px;\n  margin: 0;\n  margin-top: 2px;\n  accent-color: var(--primary);\n}\n\n.checklist-text {\n  flex: 1;\n  line-height: 1.5;\n}\n\n.checklist-text.required {\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.checklist-text.required::after {\n  content: \" *\";\n  color: var(--accent);\n  font-weight: bold;\n}\n\n.recovery-notification {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(33, 150, 243, 0.1);\n  backdrop-filter: blur(8px);\n  z-index: 1000;\n  padding: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  animation: slideDown 0.3s ease-out;\n  border-bottom: 1px solid rgba(33, 150, 243, 0.3);\n}\n\n@keyframes slideDown {\n  from { transform: translateY(-100%); }\n  to { transform: translateY(0); }\n}\n\n.recovery-content {\n  max-width: 1000px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  background-color: white;\n  border-radius: var(--border-radius);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.recovery-icon {\n  font-size: 2rem;\n  color: var(--primary);\n  margin-right: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.recovery-message {\n  flex: 1;\n}\n\n.recovery-message h4 {\n  margin: 0 0 5px 0;\n  color: var(--primary);\n}\n\n.recovery-message p {\n  margin: 0;\n  font-size: 0.9rem;\n  color: #666;\n}\n\n.recovery-actions {\n  display: flex;\n  gap: 10px;\n  margin-left: 15px;\n}\n\n.recovery-actions button {\n  padding: 8px 15px;\n  font-size: 0.9rem;\n}\n\n@media screen and (max-width: 768px) {\n  .recovery-content {\n    flex-direction: column;\n    text-align: center;\n    padding: 15px;\n  }\n\n  .recovery-icon {\n    margin-right: 0;\n    margin-bottom: 10px;\n  }\n\n  .recovery-actions {\n    margin-left: 0;\n    margin-top: 15px;\n    width: 100%;\n    justify-content: center;\n  }\n}\n\n/* Flash message styling */\n.flash-messages {\n  margin-bottom: 20px;\n  width: 100%;\n}\n\n.alert {\n  padding: 15px;\n  border-radius: var(--border-radius);\n  margin-bottom: 10px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.alert-success {\n  background-color: #d4edda;\n  color: #155724;\n  border: 1px solid #c3e6cb;\n}\n\n.alert-warning {\n  background-color: #fff3cd;\n  color: #856404;\n  border: 1px solid #ffeeba;\n}\n\n.alert-error {\n  background-color: #f8d7da;\n  color: #721c24;\n  border: 1px solid #f5c6cb;\n}\n\n.alert-info {\n  background-color: #d1ecf1;\n  color: #0c5460;\n  border: 1px solid #bee5eb;\n}\n\n.watermark-img {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) rotate(0deg);\n  width: 300px;\n  height: auto;\n  max-width: 80vw;\n  max-height: 80vh;\n  opacity: 0.1;\n  pointer-events: none;\n  z-index: 9998;\n}\n\n/* Mobile-specific watermark adjustments */\n@media screen and (max-width: 768px) {\n  .watermark-img {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 250px;\n    max-width: 70vw;\n    max-height: 70vh;\n    opacity: 0.08;\n  }\n\n  /* Ensure container has relative positioning for absolute watermark */\n  .container {\n    position: relative;\n  }\n}\n\n/* I/O Builder Styles */\n.io-builder-container {\n    background: #f8f9fa;\n    border-radius: 8px;\n    padding: 20px;\n    margin: 20px 0;\n}\n\n.io-builder-header {\n    text-align: center;\n    margin-bottom: 30px;\n}\n\n.io-builder-header h3 {\n    color: var(--primary);\n    margin-bottom: 8px;\n}\n\n.io-builder-header p {\n    color: #666;\n    margin: 0;\n}\n\n.module-config-section,\n.modbus-config-section {\n    background: white;\n    border-radius: 8px;\n    padding: 20px;\n    margin-bottom: 20px;\n    border: 1px solid #e1e5e9;\n}\n\n.module-config-section h4,\n.modbus-config-section h4 {\n    color: var(--primary);\n    margin-bottom: 16px;\n}\n\n/* Generated Tables Styles */\n.generation-summary {\n    background: #e8f5e8;\n    border: 1px solid #4caf50;\n    border-radius: 8px;\n    padding: 16px;\n    margin-bottom: 20px;\n}\n\n.generation-summary h4 {\n    color: #2e7d32;\n    margin-bottom: 12px;\n}\n\n.summary-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 12px;\n}\n\n.summary-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background: rgba(255, 255, 255, 0.8);\n    padding: 8px 12px;\n    border-radius: 4px;\n}\n\n.summary-item .label {\n    font-weight: 600;\n    color: #333;\n}\n\n.summary-item .value {\n    font-weight: 700;\n    color: #2e7d32;\n    background: #c8e6c9;\n    padding: 4px 8px;\n    border-radius: 4px;\n}\n\n.table-section {\n    margin-bottom: 30px;\n}\n\n.table-section h5 {\n    color: var(--primary);\n    margin-bottom: 12px;\n    border-bottom: 2px solid var(--primary);\n    padding-bottom: 8px;\n}\n\n.table-responsive {\n    overflow-x: auto;\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.io-table {\n    width: 100%;\n    border-collapse: collapse;\n    margin: 0;\n    font-size: 14px;\n}\n\n.io-table thead {\n    background: var(--primary);\n    color: white;\n}\n\n.io-table th,\n.io-table td {\n    padding: 12px 8px;\n    text-align: left;\n    border-bottom: 1px solid #ddd;\n}\n\n.io-table th {\n    font-weight: 600;\n    font-size: 12px;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.io-table tbody tr:nth-child(even) {\n    background: #f8f9fa;\n}\n\n.io-table tbody tr:hover {\n    background: #e3f2fd;\n}\n\n.io-table td {\n    font-family: 'Courier New', monospace;\n    font-size: 13px;\n}\n\n#generation_results {\n    margin-top: 20px;\n    padding: 20px;\n    background: white;\n    border-radius: 8px;\n    border: 1px solid #e1e5e9;\n} 20px;\n    border-bottom: 2px solid var(--primary);\n    padding-bottom: 8px;\n}\n\n.module-stats {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: 15px;\n    margin-bottom: 20px;\n    padding: 15px;\n    background: #f1f3f4;\n    border-radius: 6px;\n}\n\n.stat-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.stat-item label {\n    font-size: 12px;\n    font-weight: 600;\n    color: #666;\n    margin-bottom: 5px;\n}\n\n.stat-item input {\n    width: 60px;\n    text-align: center;\n    font-weight: bold;\n    background: #fff;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    padding: 5px;\n}\n\n.module-entry-form,\n.modbus-entry-form {\n    border: 1px solid #e1e5e9;\n    border-radius: 6px;\n    padding: 20px;\n    margin-bottom: 20px;\n    background: #fafbfc;\n}\n\n.form-row {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 15px;\n    margin-bottom: 15px;\n}\n\n.btn-lookup {\n    background: var(--primary);\n    color: white;\n    border: none;\n    padding: 8px 12px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 12px;\n    margin-left: 8px;\n    transition: background 0.2s;\n}\n\n.btn-lookup:hover {\n    background: var(--primary-dark, #0056b3);\n}\n\n.module-spec {\n    border: 2px solid var(--primary);\n    border-radius: 8px;\n    padding: 15px;\n    margin: 15px 0;\n    background: #f0f7ff;\n}\n\n.module-spec h5 {\n    color: var(--primary);\n    margin-bottom: 15px;\n}\n\n.spec-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: 10px;\n}\n\n.spec-item {\n    display: flex;\n    justify-content: space-between;\n    padding: 5px 10px;\n    background: white;\n    border-radius: 4px;\n    border: 1px solid #ddd;\n}\n\n.spec-item label {\n    font-weight: 600;\n    color: #555;\n}\n\n.spec-item span {\n    font-weight: bold;\n    color: var(--primary);\n}\n\n.source-indicator {\n    margin-bottom: 10px;\n}\n\n.source-badge {\n    display: inline-block;\n    padding: 4px 8px;\n    border-radius: 12px;\n    font-size: 11px;\n    font-weight: bold;\n    text-transform: uppercase;\n}\n\n.source-database {\n    background: #d4edda;\n    color: #155724;\n}\n\n.source-web {\n    background: #d1ecf1;\n    color: #0c5460;\n}\n\n.source-manual {\n    background: #fff3cd;\n    color: #856404;\n}\n\n.manual-override {\n    border-top: 1px solid #ddd;\n    margin-top: 15px;\n    padding-top: 15px;\n}\n\n.manual-override h6 {\n    color: #856404;\n    margin-bottom: 10px;\n}\n\n.modules-list,\n.modbus-ranges-list {\n    margin-top: 20px;\n}\n\n.modules-container,\n.ranges-container {\n    max-height: 300px;\n    overflow-y: auto;\n    border: 1px solid #e1e5e9;\n    border-radius: 6px;\n    background: white;\n}\n\n.module-item,\n.range-item {\n    padding: 15px;\n    border-bottom: 1px solid #f1f3f4;\n    transition: background 0.2s;\n}\n\n.module-item:hover,\n.range-item:hover {\n    background: #f8f9fa;\n}\n\n.module-item:last-child,\n.range-item:last-child {\n    border-bottom: none;\n}\n\n.module-header,\n.range-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 8px;\n}\n\n.module-header h5,\n.range-header h6 {\n    margin: 0;\n    color: var(--primary);\n}\n\n.remove-module-btn,\n.remove-range-btn {\n    background: #dc3545;\n    color: white;\n    border: none;\n    padding: 6px 8px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 12px;\n    transition: background 0.2s;\n}\n\n.remove-module-btn:hover,\n.remove-range-btn:hover {\n    background: #c82333;\n}\n\n.module-details,\n.range-details {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    font-size: 12px;\n    color: #666;\n}\n\n.module-details span,\n.range-details span {\n    padding: 2px 6px;\n    background: #e9ecef;\n    border-radius: 3px;\n}\n\n.no-modules,\n.no-ranges {\n    text-align: center;\n    padding: 40px 20px;\n    color: #666;\n    font-style: italic;\n}\n\n.generation-section {\n    background: white;\n    border-radius: 8px;\n    padding: 20px;\n    text-align: center;\n    border: 1px solid #e1e5e9;\n}\n\n.generation-actions {\n    margin-bottom: 15px;\n}\n\n.btn-large {\n    padding: 15px 30px;\n    font-size: 16px;\n    font-weight: bold;\n    margin: 0 10px;\n}\n\n.generation-status {\n    padding: 10px;\n    border-radius: 6px;\n    margin-top: 10px;\n}\n\n.generation-status.info {\n    background: #d1ecf1;\n    color: #0c5460;\n    border: 1px solid #bee5eb;\n}\n\n.generation-status.success {\n    background: #d4edda;\n    color: #155724;\n    border: 1px solid #c3e6cb;\n}\n\n.generation-status.error {\n    background: #f8d7da;\n    color: #721c24;\n    border: 1px solid #f5c6cb;\n}\n\n.hidden {\n    display: none !important;\n}\n\n/* Mobile responsiveness for I/O builder */\n@media (max-width: 768px) {\n    .form-row {\n        grid-template-columns: 1fr;\n    }\n\n    .module-stats {\n        grid-template-columns: repeat(2, 1fr);\n    }\n\n    .spec-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .module-details,\n    .range-details {\n        flex-direction: column;\n        gap: 5px;\n    }\n\n    .btn-large {\n        width: 100%;\n        margin: 5px 0;\n    }\n\n    /* Mobile navigation adjustments */\n    .modern-nav {\n        padding: 8px 16px;\n        flex-wrap: wrap;\n        gap: 8px;\n    }\n\n    .nav-actions {\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n        gap: 4px;\n        width: 100%;\n        flex-wrap: wrap;\n    }\n\n    .quick-table-access {\n        order: 1;\n        margin-right: 4px;\n    }\n\n    .save-progress-btn {\n        order: 2;\n        margin-right: 4px;\n        padding: 6px 12px;\n        font-size: 12px;\n    }\n\n    .user-profile {\n        order: 3;\n        min-width: auto;\n    }\n\n    .user-name {\n        max-width: 100px;\n    }\n\n    .brand-text {\n        display: none;\n    }\n\n    .quick-access-btn {\n        padding: 6px 12px;\n        font-size: 12px;\n    }\n\n    .quick-access-dropdown {\n        min-width: 180px;\n        left: -20px;\n    }\n\n    /* Mobile table improvements */\n    .table-responsive {\n        border-radius: 0;\n        margin: 0.5rem 0;\n    }\n\n    table {\n        min-width: 600px;\n        font-size: 12px;\n    }\n\n    thead th {\n        padding: 8px 6px;\n        font-size: 12px;\n    }\n\n    tbody td {\n        padding: 8px 6px;\n        max-width: 120px;\n    }\n\n    tbody td input,\n    tbody td textarea,\n    tbody td select {\n        min-width: 100px;\n        font-size: 12px;\n    }\n}\n\n/* ===== UNIFIED DASHBOARD STYLES — */\n.dashboard-container {\n    min-height: 100vh;\n    background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);\n    padding: 0;\n    margin: 0;\n    width: 100vw;\n    overflow-x: hidden;\n}\n\n.dashboard-header {\n    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);\n    color: white;\n    padding: var(--spacing-lg) var(--spacing-xl);\n    box-shadow: 0 4px 20px var(--shadow-lg);\n    margin-bottom: var(--spacing-xl);\n}\n\n.dashboard-header h1 {\n    font-size: 2.25rem;\n    font-weight: 700;\n    margin: 0 0 var(--spacing-sm) 0;\n    color: white;\n}\n\n.dashboard-header .subtitle {\n    font-size: 1.1rem;\n    opacity: 0.9;\n    margin: 0;\n    color: rgba(255, 255, 255, 0.9);\n}\n\n.dashboard-content {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 0 var(--spacing-xl) var(--spacing-xl);\n    width: 100%;\n    box-sizing: border-box;\n}\n\n.dashboard-nav {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background: var(--bg-card);\n    padding: var(--spacing-md) var(--spacing-lg);\n    border-radius: var(--border-radius);\n    box-shadow: 0 2px 10px var(--shadow-color);\n    margin-bottom: var(--spacing-xl);\n    border: 1px solid var(--border-color);\n}\n\n.nav-links {\n    display: flex;\n    gap: var(--spacing-lg);\n    align-items: center;\n}\n\n.nav-link {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n    padding: var(--spacing-sm) var(--spacing-md);\n    border-radius: var(--border-radius-sm);\n    text-decoration: none;\n    color: var(--text-secondary);\n    font-weight: 500;\n    transition: var(--transition);\n    border: 1px solid transparent;\n}\n\n.nav-link:hover {\n    background: var(--bg-secondary);\n    color: var(--primary);\n    border-color: var(--border-color);\n}\n\n.nav-link.active {\n    background: var(--primary);\n    color: white;\n}\n\n.user-info {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-md);\n    position: relative;\n}\n\n.user-avatar {\n    width: 40px;\n    height: 40px;\n    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-weight: 600;\n    font-size: 16px;\n}\n\n.user-details {\n    cursor: pointer;\n    padding: var(--spacing-sm);\n    border-radius: var(--border-radius-sm);\n    transition: var(--transition);\n    position: relative;\n}\n\n.user-details:hover {\n    background: var(--bg-secondary);\n}\n\n.user-details h4 {\n    margin: 0;\n    color: var(--text-primary);\n    font-size: 14px;\n    font-weight: 600;\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-xs);\n}\n\n.user-details h4::after {\n    content: '▼';\n    font-size: 10px;\n    transition: transform var(--transition);\n}\n\n.user-details.open h4::after {\n    transform: rotate(180deg);\n}\n\n/* User Dropdown Menu */\n.user-dropdown {\n    position: absolute;\n    top: 100%;\n    right: 0;\n    background: var(--bg-card);\n    border: 1px solid var(--border-color);\n    border-radius: var(--border-radius);\n    box-shadow: 0 4px 20px var(--shadow-lg);\n    min-width: 220px;\n    z-index: 1000;\n    opacity: 0;\n    visibility: hidden;\n    transform: translateY(-10px);\n    transition: all var(--transition);\n}\n\n.user-dropdown.open {\n    opacity: 1;\n    visibility: visible;\n    transform: translateY(0);\n}\n\n.dropdown-item {\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-sm);\n    padding: var(--spacing-md);\n    color: var(--text-primary);\n    text-decoration: none;\n    transition: var(--transition);\n    border-bottom: 1px solid var(--border-color);\n}\n\n.dropdown-item:last-child {\n    border-bottom: none;\n}\n\n.dropdown-item:hover {\n    background: var(--bg-secondary);\n    color: var(--primary);\n}\n\n.dropdown-item.logout {\n    color: #ef4444;\n}\n\n.dropdown-item.logout:hover {\n    background: #fee2e2;\n    color: #dc2626;\n}\n\n.dropdown-item i {\n    width: 16px;\n    text-align: center;\n}\n\n.dropdown-item .item-description {\n    font-size: 12px;\n    color: var(--text-muted);\n    margin-top: 2px;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n    gap: var(--spacing-lg);\n    margin-bottom: var(--spacing-xl);\n}\n\n.stat-card {\n    background: var(--bg-card);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-lg);\n    box-shadow: 0 4px 16px var(--shadow-color);\n    border: 1px solid var(--border-color);\n    position: relative;\n    overflow: hidden;\n    transition: var(--transition);\n}\n\n.stat-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 30px var(--shadow-lg);\n}\n\n.stat-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 4px;\n}\n\n.stat-card.primary::before {\n    background: linear-gradient(90deg, var(--primary), var(--primary-light));\n}\n\n.stat-card.secondary::before {\n    background: linear-gradient(90deg, var(--secondary), var(--secondary-light));\n}\n\n.stat-card.accent::before {\n    background: linear-gradient(90deg, var(--accent), var(--accent-light));\n}\n\n.stat-card.info::before {\n    background: linear-gradient(90deg, var(--primary-light), var(--primary));\n}\n\n.stat-icon {\n    width: 56px;\n    height: 56px;\n    border-radius: var(--border-radius);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 24px;\n    margin-bottom: var(--spacing-md);\n}\n\n.stat-card.primary .stat-icon {\n    background: rgba(59, 130, 246, 0.1);\n    color: var(--primary);\n}\n\n.stat-card.secondary .stat-icon {\n    background: rgba(5, 150, 105, 0.1);\n    color: var(--secondary);\n}\n\n.stat-card.accent .stat-icon {\n    background: rgba(245, 158, 11, 0.1);\n    color: var(--accent);\n}\n\n.stat-card.info .stat-icon {\n    background: rgba(59, 130, 246, 0.1);\n    color: var(--primary-light);\n}\n\n.stat-number {\n    font-size: 2rem;\n    font-weight: 700;\n    color: var(--text-primary);\n    line-height: 1;\n    margin-bottom: var(--spacing-xs);\n}\n\n.stat-label {\n    color: var(--text-secondary);\n    font-size: 14px;\n    font-weight: 500;\n    margin-bottom: var(--spacing-sm);\n}\n\n.stat-change {\n    font-size: 12px;\n    font-weight: 600;\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-xs);\n}\n\n.stat-change.positive {\n    color: var(--secondary);\n}\n\n.stat-change.negative {\n    color: #ef4444;\n}\n\n.dashboard-section {\n    background: var(--bg-card);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-lg);\n    margin-bottom: var(--spacing-lg);\n    box-shadow: 0 2px 10px var(--shadow-color);\n    border: 1px solid var(--border-color);\n}\n\n.section-header {\n    display: flex;\n    justify-content: between;\n    align-items: center;\n    margin-bottom: var(--spacing-lg);\n    padding-bottom: var(--spacing-md);\n    border-bottom: 2px solid var(--border-color);\n}\n\n.section-header h2 {\n    color: var(--text-primary);\n    font-size: 1.5rem;\n    font-weight: 600;\n    margin: 0;\n}\n\n.quick-actions {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: var(--spacing-md);\n    margin-bottom: var(--spacing-xl);\n}\n\n.action-card {\n    background: var(--bg-card);\n    border: 2px solid var(--border-color);\n    border-radius: var(--border-radius);\n    padding: var(--spacing-lg);\n    text-align: center;\n    transition: var(--transition);\n    cursor: pointer;\n    text-decoration: none;\n    color: var(--text-primary);\n}\n\n.action-card:hover {\n    border-color: var(--primary);\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px var(--shadow-lg);\n    color: var(--text-primary);\n}\n\n.action-icon {\n    font-size: 2.5rem;\n    color: var(--primary);\n    margin-bottom: var(--spacing-md);\n}\n\n.action-card h3 {\n    margin: 0 0 var(--spacing-sm) 0;\n    color: var(--text-primary);\n    font-size: 1.1rem;\n    font-weight: 600;\n}\n\n.action-card p {\n    margin: 0;\n    color: var(--text-secondary);\n    font-size: 14px;\n    line-height: 1.4;\n}\n\n/* Mobile Dashboard Responsiveness */\n@media (max-width: 768px) {\n    .dashboard-header {\n        padding: var(--spacing-md);\n    }\n\n    .dashboard-header h1 {\n        font-size: 1.75rem;\n    }\n\n    .dashboard-content {\n        padding: 0 var(--spacing-md) var(--spacing-md);\n    }\n\n    .dashboard-nav {\n        flex-direction: column;\n        gap: var(--spacing-md);\n        align-items: stretch;\n    }\n\n    .nav-links {\n        flex-wrap: wrap;\n        justify-content: center;\n    }\n\n    .stats-grid {\n        grid-template-columns: 1fr;\n        gap: var(--spacing-md);\n    }\n\n    .quick-actions {\n        grid-template-columns: 1fr;\n        gap: var(--spacing-md);\n    }\n\n    .user-info {\n        justify-content: center;\n        text-align: center;\n    }\n}\n\n/* ===== MAIN CONTENT LAYOUT ===== */\n.main-content {\n  flex-grow: 1;\n  padding: 20px 24px;\n  background-color: #f8f9fa;\n  overflow-y: auto; /* Allow scrolling within the main content area */\n}\n\n/* Adjustments for the dashboard layout */\nbody.dashboard-layout .main-content {\n  padding: 0; /* Reset padding for dashboard */\n  background: linear-gradient(135deg, #E3F4F4 0%, #D1E9FE 50%, #E3F4F4 100%);\n}\n\n/* Specific padding for the form container within the main layout */\n.main-layout .form-container {\n  padding: 20px 24px;\n}\n\n/* Responsive adjustments for the main content */\n@media (max-width: 1200px) {\n  .main-layout .form-container {\n    padding: 16px;\n  }\n}\n\n@media (max-width: 768px) {\n  .main-content {\n    padding: 16px;\n  }\n  .main-layout .form-container {\n    padding: 12px;\n  }\n}\n\n/* ===== FINAL RESPONSIVE LAYOUT ADJUSTMENTS ===== */\n\n/* Ensure sidebar and content take up appropriate space */\n.main-layout {\n  display: flex;\n  flex-direction: row; /* Default to row layout */\n  min-height: calc(100vh - 50px); /* Adjusted for sticky header */\n  width: 100vw;\n  max-width: 100vw;\n  margin: 0;\n  gap: 0;\n  padding: 0;\n  overflow-x: hidden; /* Prevent horizontal scroll on the main layout */\n}\n\n/* Sidebar adjustments */\n.progress-sidebar {\n  width: 220px; /* Default width */\n  min-width: 220px;\n  flex-shrink: 0;\n  background: rgba(255, 255, 255, 0.98);\n  backdrop-filter: blur(10px);\n  border-radius: 0;\n  padding: 16px;\n  height: fit-content;\n  position: sticky;\n  top: 50px; /* Position below the sticky header */\n  box-shadow: 1px 0 8px rgba(0,0,0,0.06);\n  border-right: 1px solid var(--border-color);\n  transition: all 0.3s ease;\n}\n\n/* Content area adjustments */\n.form-container {\n  flex: 1;\n  min-width: 0;\n  width: calc(100vw - 220px); /* Takes remaining space */\n  max-width: calc(100vw - 220px);\n  background: rgba(255, 255, 255, 0.98);\n  backdrop-filter: blur(15px);\n  border-radius: 0;\n  padding: 16px;\n  box-shadow: none;\n  border-left: 1px solid var(--border-color);\n  margin: 0;\n  box-sizing: border-box;\n  overflow-x: auto; /* Allow horizontal scroll if content exceeds width */\n}\n\n/* Media query for tablets and smaller desktops */\n@media (max-width: 1200px) {\n  .progress-sidebar {\n    width: 180px; /* Narrower sidebar */\n    min-width: 180px;\n    padding: 12px;\n  }\n  .form-container {\n    width: calc(100vw - 180px); /* Adjust content width */\n    max-width: calc(100vw - 180px);\n    padding: 12px;\n  }\n}\n\n/* Media query for tablets */\n@media (max-width: 991px) {\n  .main-layout {\n    flex-direction: column; /* Stack sidebar and content */\n    min-height: calc(100vh - 50px); /* Adjust height */\n  }\n  .progress-sidebar {\n    width: 100%;\n    min-width: auto;\n    position: relative; /* Reset position */\n    top: auto;\n    border-radius: 0;\n    border-right: none;\n    border-bottom: 1px solid var(--border-color);\n    padding: 15px;\n    height: auto; /* Adjust height */\n  }\n  .form-container {\n    width: 100%;\n    max-width: 100%;\n    border-left: none; /* Remove left border */\n    margin: 0;\n    padding: 15px;\n    overflow-x: hidden; /* Ensure no horizontal scroll */\n  }\n}\n\n/* Media query for mobile devices */\n@media (max-width: 768px) {\n  .main-layout {\n    min-height: calc(100vh - 50px); /* Adjust height */\n  }\n  .progress-sidebar {\n    padding: 10px 12px;\n  }\n  .form-container {\n    padding: 10px;\n  }\n  /* Further tablet adjustments */\n  .table-responsive {\n    margin: 8px 0; /* Reduce margin */\n    border-radius: 8px; /* Smaller border radius */\n  }\n  table {\n    min-width: 600px; /* Ensure minimum width for horizontal scroll */\n    font-size: 12px; /* Smaller font size */\n  }\n  thead th, tbody td {\n    padding: 8px 6px; /* Reduced padding */\n    font-size: 11px; /* Smaller font size */\n  }\n  tbody td input, tbody td select, tbody td textarea {\n    font-size: 12px; /* Smaller input font size */\n    padding: 6px 8px;\n  }\n}\n\n/* Media query for very small mobile devices */\n@media (max-width: 480px) {\n  .main-layout {\n    min-height: calc(100vh - 40px); /* Further adjust height */\n  }\n  .progress-sidebar {\n    padding: 6px 8px; /* More compact sidebar */\n  }\n  .form-container {\n    padding: 6px 8px; /* More compact content */\n  }\n  table {\n    min-width: 400px; /* Further reduce minimum width */\n    font-size: 10px; /* Smaller font size */\n  }\n  thead th, tbody td {\n    padding: 4px 2px; /* Even less padding */\n    font-size: 10px; /* Smaller font size */\n  }\n  tbody td input, tbody td select, tbody td textarea {\n    font-size: 10px; /* Smallest input font size */\n    padding: 3px 4px;\n  }\n}","size_bytes":88966},"static/css/form.js":{"content":"// ========== RESPONSIVE TABLE SYSTEM WITH SMART COLUMN MANAGEMENT ==========\n  function initializeResponsiveTables() {\n    const tables = document.querySelectorAll('table');\n\n    tables.forEach(table => {\n      createMobileCardLayout(table);\n      setupColumnPriorities(table);\n      setupStickyColumns(table);\n      addHeaderTooltips(table);\n      implementSmartColumnHiding(table);\n    });\n\n    // Handle window resize with debouncing\n    window.addEventListener('resize', debounce(handleTableResize, 100));\n\n    // Initial optimization\n    optimizeForCurrentScreenSize();\n  }\n\n  function implementSmartColumnHiding(table) {\n    const headers = table.querySelectorAll('th');\n    const rows = table.querySelectorAll('tbody tr');\n\n    // Add column visibility controls\n    const tableContainer = table.closest('.table-responsive');\n    if (tableContainer) {\n      const controlsContainer = document.createElement('div');\n      controlsContainer.className = 'table-column-controls';\n      controlsContainer.innerHTML = `\n        <div class=\"column-toggle-buttons\">\n          <button type=\"button\" class=\"btn-secondary btn-small\" onclick=\"toggleAllColumns(this)\">\n            <i class=\"fas fa-columns\"></i> Show All Columns\n          </button>\n          <button type=\"button\" class=\"btn-secondary btn-small\" onclick=\"toggleEssentialColumns(this)\">\n            <i class=\"fas fa-eye\"></i> Essential Only\n          </button>\n        </div>\n      `;\n      tableContainer.prepend(controlsContainer);\n    }\n  }\n\n  function optimizeForCurrentScreenSize() {\n    const screenWidth = window.innerWidth;\n\n    // Adjust layout based on screen size\n    if (screenWidth < 1200) {\n      // Reduce padding and margins for more space\n      document.documentElement.style.setProperty('--dynamic-padding', '8px');\n      document.documentElement.style.setProperty('--dynamic-margin', '4px');\n\n      // Hide non-essential UI elements\n      hideNonEssentialElements();\n    } else {\n      document.documentElement.style.setProperty('--dynamic-padding', '16px');\n      document.documentElement.style.setProperty('--dynamic-margin', '12px');\n\n      showAllElements();\n    }\n  }\n\n  function hideNonEssentialElements() {\n    // Hide step descriptions in progress sidebar\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'none';\n    });\n\n    // Collapse form section descriptions\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'none';\n    });\n\n    // Make progress header more compact\n    const progressHeader = document.querySelector('.progress-header p');\n    if (progressHeader) progressHeader.style.display = 'none';\n  }\n\n  function showAllElements() {\n    // Show step descriptions\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'block';\n    });\n\n    // Show form section descriptions\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'block';\n    });\n\n    // Show progress header description\n    const progressHeader = document.querySelector('.progress-header p');\n    if (progressHeader) progressHeader.style.display = 'block';\n  }","size_bytes":3184},"static/css/notifications.css":{"content":"\n/* Notification Bell */\n.notification-wrapper {\n    position: relative;\n    display: inline-block;\n    margin-left: 15px;\n}\n\n.notification-bell {\n    background: none;\n    border: none;\n    color: #333;\n    font-size: 18px;\n    cursor: pointer;\n    padding: 8px;\n    border-radius: 50%;\n    transition: background-color 0.2s ease;\n    position: relative;\n}\n\n.notification-bell:hover {\n    background-color: #f5f5f5;\n}\n\n.notification-badge {\n    position: absolute;\n    top: 0;\n    right: 0;\n    background-color: #e74c3c;\n    color: white;\n    border-radius: 50%;\n    padding: 2px 6px;\n    font-size: 11px;\n    font-weight: bold;\n    min-width: 18px;\n    height: 18px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n/* Notification Dropdown */\n.notification-dropdown {\n    position: absolute;\n    top: 100%;\n    right: 0;\n    width: 350px;\n    max-height: 500px;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    z-index: 1000;\n    overflow: hidden;\n}\n\n.notification-header {\n    padding: 15px;\n    border-bottom: 1px solid #eee;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #f8f9fa;\n}\n\n.notification-header h3 {\n    margin: 0;\n    font-size: 16px;\n    color: #333;\n}\n\n.mark-all-read {\n    background: none;\n    border: none;\n    color: #007bff;\n    font-size: 12px;\n    cursor: pointer;\n    text-decoration: underline;\n}\n\n.mark-all-read:hover {\n    color: #0056b3;\n}\n\n.notification-list {\n    max-height: 350px;\n    overflow-y: auto;\n}\n\n.notification-item {\n    padding: 12px 15px;\n    border-bottom: 1px solid #f0f0f0;\n    transition: background-color 0.2s ease;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n}\n\n.notification-item:hover {\n    background-color: #f8f9fa;\n}\n\n.notification-item.unread {\n    background-color: #e3f2fd;\n    border-left: 3px solid #2196f3;\n}\n\n.notification-item.read {\n    opacity: 0.7;\n}\n\n.notification-content {\n    flex: 1;\n    margin-right: 10px;\n}\n\n.notification-content h4 {\n    margin: 0 0 5px 0;\n    font-size: 14px;\n    font-weight: 600;\n    color: #333;\n}\n\n.notification-content p {\n    margin: 0 0 5px 0;\n    font-size: 13px;\n    color: #666;\n    line-height: 1.4;\n}\n\n.notification-time {\n    font-size: 11px;\n    color: #999;\n}\n\n.notification-actions {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.notification-action,\n.mark-read {\n    background: #007bff;\n    color: white;\n    border: none;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 11px;\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n}\n\n.notification-action:hover {\n    background: #0056b3;\n}\n\n.mark-read {\n    background: #6c757d;\n}\n\n.mark-read:hover {\n    background: #545b62;\n}\n\n.notification-footer {\n    padding: 10px 15px;\n    text-align: center;\n    border-top: 1px solid #eee;\n    background-color: #f8f9fa;\n}\n\n.view-all {\n    color: #007bff;\n    text-decoration: none;\n    font-size: 13px;\n    font-weight: 500;\n}\n\n.view-all:hover {\n    text-decoration: underline;\n}\n\n.loading,\n.error,\n.no-notifications {\n    padding: 20px;\n    text-align: center;\n    color: #666;\n    font-style: italic;\n}\n\n.error {\n    color: #e74c3c;\n}\n\n/* Toast Notifications */\n.notification-toast {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    padding: 15px;\n    min-width: 300px;\n    z-index: 1001;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    animation: slideIn 0.3s ease;\n}\n\n@keyframes slideIn {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n.notification-toast.notification-success {\n    border-left: 4px solid #28a745;\n}\n\n.notification-toast.notification-error {\n    border-left: 4px solid #dc3545;\n}\n\n.notification-toast.notification-warning {\n    border-left: 4px solid #ffc107;\n}\n\n.notification-toast.notification-info {\n    border-left: 4px solid #17a2b8;\n}\n\n.toast-content h4 {\n    margin: 0 0 5px 0;\n    font-size: 14px;\n    font-weight: 600;\n}\n\n.toast-content p {\n    margin: 0;\n    font-size: 13px;\n    color: #666;\n}\n\n.toast-close {\n    background: none;\n    border: none;\n    font-size: 18px;\n    cursor: pointer;\n    color: #999;\n    margin-left: 10px;\n}\n\n.toast-close:hover {\n    color: #333;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .notification-dropdown {\n        width: 300px;\n        right: -50px;\n    }\n    \n    .notification-toast {\n        right: 10px;\n        left: 10px;\n        min-width: auto;\n    }\n}\n","size_bytes":4922},"static/js/form.js":{"content":"// Wrapped in an IIFE to prevent global scope pollution\n(function() {\n  // Track current step\n  let currentStep = 1;\n\n  // Define functions first so they can be used\n  function goToStep(step) {\n    const currentFs = document.getElementById(`step-${currentStep}`);\n\n    // Clear previous validation states\n    if (currentFs) {\n      currentFs.classList.remove('invalid');\n      currentFs.querySelectorAll('.error').forEach(el => el.style.display = 'none');\n\n      if (step > currentStep) {\n        if (!currentFs.checkValidity()) {\n          currentFs.classList.add('invalid');\n\n          // Show error messages\n          currentFs.querySelectorAll(':invalid').forEach(field => {\n            const errorEl = field.nextElementSibling;\n            if (errorEl && errorEl.classList.contains('error')) {\n              errorEl.style.display = 'inline-block';\n            }\n          });\n\n          currentFs.querySelector(':invalid')?.focus();\n          return;\n        }\n      }\n    }\n\n    currentStep = step;\n\n    for (let i = 1; i <= 10; i++) {\n      const stepEl = document.getElementById(`step-${i}`);\n      const progEl = document.getElementById(`prog-${i}`);\n      if (stepEl) stepEl.classList.toggle('active', i === step);\n      if (progEl) {\n        progEl.classList.toggle('active', i === step);\n        progEl.classList.toggle('disabled', i !== step);\n      }\n    }\n\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    saveState();\n  }\n\n  // Define startProcess function\n  function startProcess() {\n    document.getElementById('welcomePage').style.display = 'none';\n    document.getElementById('reportTypePage').style.display = 'block';\n  }\n\n  // Function to show SAT form\n  function showSATForm() {\n    window.location.href = '/reports/new/sat/full';\n  }\n\n  // Function to go back to welcome\n  function backToWelcome() {\n    document.getElementById('reportTypePage').style.display = 'none';\n    document.getElementById('welcomePage').style.display = 'block';\n  }\n\n  // LOCALSTORAGE STATE PERSISTENCE\n  const FORM_KEY = 'satFormState';\n  function saveState() {\n    const form = document.getElementById('satForm');\n    if (!form) return;\n\n    const data = {};\n    Array.from(form.elements).forEach(el => {\n      if (!el.name || el.type === 'file') return;\n      if ((el.type === 'checkbox' || el.type === 'radio') && !el.checked) return;\n      data[el.name] = el.value;\n    });\n    localStorage.setItem(FORM_KEY, JSON.stringify(data));\n  }\n\n  function loadState() {\n    const stored = localStorage.getItem(FORM_KEY);\n    if (!stored) return;\n\n    const data = JSON.parse(stored);\n    const form = document.getElementById('satForm');\n    if (!form) return;\n\n    Object.entries(data).forEach(([name, val]) => {\n      const el = form.elements[name];\n      if (el) el.value = val;\n    });\n  }\n\n  function removeRow(button) {\n    const row = button.closest('tr');\n    if (row) row.remove();\n  }\n\n  function addRow(templateId, tbodyId) {\n    // Clear any existing message about scrolling first\n    const tbody = document.getElementById(tbodyId);\n    if (!tbody) return;\n\n    // Remove any text nodes (which contain the scroll messages)\n    Array.from(tbody.childNodes).forEach(node => {\n      if (node.nodeType === Node.TEXT_NODE || \n          (node.nodeType === Node.ELEMENT_NODE && node.tagName !== 'TR')) {\n        tbody.removeChild(node);\n      }\n    });\n\n    // Now add the new row\n    const tpl = document.getElementById(templateId);\n    if (!tpl) return;\n\n    const clone = tpl.content.cloneNode(true);\n    const row = clone.querySelector('tr');\n    if (row) row.classList.add('fade-in');\n\n    tbody.appendChild(clone);\n  }\n\n  function setupEventHandlers() {\n    // Wire up progress nav clicks\n    document.querySelectorAll('.progress-step').forEach(el => {\n      el.style.cursor = 'pointer';\n      el.addEventListener('click', () => {\n        const step = Number(el.id.split('-')[1]);\n        goToStep(step);\n      });\n    });\n\n    // Setup report type selection handlers\n    document.addEventListener('click', (e) => {\n      // Handle SAT report selection\n      if (e.target.closest('[data-report-type=\"sat\"]')) {\n        showSATForm();\n      }\n\n      // Handle back to welcome button\n      if (e.target.closest('#backToWelcomeButton')) {\n        backToWelcome();\n      }\n    });\n\n    setupAddButtons();\n\n    // Setup navigation buttons with delegation\n    document.addEventListener('click', (e) => {\n      // Next step\n      if (e.target.closest('[data-next-step]')) {\n        const btn = e.target.closest('[data-next-step]');\n        goToStep(parseInt(btn.dataset.nextStep));\n      }\n      // Previous step\n      if (e.target.closest('[data-prev-step]')) {\n        const btn = e.target.closest('[data-prev-step]');\n        goToStep(parseInt(btn.dataset.prevStep));\n      }\n      // Remove row\n      if (e.target.closest('.remove-row-btn')) {\n        const btn = e.target.closest('.remove-row-btn');\n        removeRow(btn);\n        saveState();\n      }\n    });\n\n    // Setup file uploads\n    setupFileInputs();\n\n    // Save on input change\n    document.getElementById('satForm')?.addEventListener('input', saveState);\n  }\n\n  function setupAddButtons() {\n    const buttonMappings = [\n      { btnId: 'add-related-doc-btn', tmplId: 'tmpl-related-doc', tbodyId: 'related-documents-body' },\n      { btnId: 'add-pre-approval-btn', tmplId: 'tmpl-pre-approval', tbodyId: 'pre-approvals-body' },\n      { btnId: 'add-post-approval-btn', tmplId: 'tmpl-post-approval', tbodyId: 'post-approvals-body' },\n      { btnId: 'add-pretest-btn', tmplId: 'tmpl-pretest', tbodyId: 'pretest-body' },\n      { btnId: 'add-keycomp-btn', tmplId: 'tmpl-keycomp', tbodyId: 'key-components-body' },\n      { btnId: 'add-iprecord-btn', tmplId: 'tmpl-iprecord', tbodyId: 'ip-records-body' },\n      { btnId: 'add-digital-signal-btn', tmplId: 'tmpl-digital-signal', tbodyId: 'digital-signals-body' },\n      { btnId: 'add-digital-output-btn', tmplId: 'tmpl-digital-output', tbodyId: 'digital-outputs-body' },\n      { btnId: 'add-analogue-input-btn', tmplId: 'tmpl-analogue-input', tbodyId: 'analogue-inputs-body' },\n      { btnId: 'add-analogue-output-btn', tmplId: 'tmpl-analogue-output', tbodyId: 'analogue-outputs-body' },\n      { btnId: 'add-modbus-digital-btn', tmplId: 'tmpl-modbus-digital', tbodyId: 'modbus-digital-body' },\n      { btnId: 'add-modbus-analogue-btn', tmplId: 'tmpl-modbus-analogue', tbodyId: 'modbus-analogue-body' },\n      { btnId: 'add-process-test-btn', tmplId: 'tmpl-process-test', tbodyId: 'process-test-body' },\n      { btnId: 'add-scada-ver-btn', tmplId: 'tmpl-scada-verification', tbodyId: 'scada-verification-body' },\n      { btnId: 'add-trends-testing-btn', tmplId: 'tmpl-trends-testing', tbodyId: 'trends-testing-body' },\n      { btnId: 'add-alarm-list-btn', tmplId: 'tmpl-alarm-list', tbodyId: 'alarm-body' }\n    ];\n\n    buttonMappings.forEach(mapping => {\n      const btn = document.getElementById(mapping.btnId);\n      if (btn) {\n        // Remove existing listeners first (using cloned button technique)\n        const newBtn = btn.cloneNode(true);\n        btn.parentNode.replaceChild(newBtn, btn);\n\n        // Add new listener\n        newBtn.addEventListener('click', () => {\n          addRow(mapping.tmplId, mapping.tbodyId);\n          saveState();\n        });\n      }\n    });\n  }\n\n  function setupFileInputs() {\n    // Setup file inputs with image preview\n    setupFileInput('scada-input', 'scada-file-list');\n    setupFileInput('trends-input', 'trends-file-list');\n    setupFileInput('alarm-input', 'alarm-file-list');\n  }\n\n  function setupFileInput(inputId, listId) {\n    const input = document.getElementById(inputId);\n    const listEl = document.getElementById(listId);\n    if (!input || !listEl) return;\n\n    // Store files in a custom property to maintain them across selections\n    if (!input._accumulatedFiles) {\n      input._accumulatedFiles = [];\n    }\n\n    input.addEventListener('change', (e) => {\n      // Get newly selected files\n      const newFiles = Array.from(e.target.files);\n\n      // Add new files to accumulated files (avoid duplicates by name)\n      newFiles.forEach(newFile => {\n        const exists = input._accumulatedFiles.some(existingFile => \n          existingFile.name === newFile.name && existingFile.size === newFile.size\n        );\n        if (!exists) {\n          input._accumulatedFiles.push(newFile);\n        }\n      });\n\n      // Update the input's files property with accumulated files\n      const dt = new DataTransfer();\n      input._accumulatedFiles.forEach(file => {\n        dt.items.add(file);\n      });\n      input.files = dt.files;\n\n      // Update the display\n      updateFileList(input, listEl);\n      saveState();\n    });\n  }\n\n  function updateFileList(input, listEl) {\n    // Clear the display list\n    listEl.innerHTML = '';\n\n    // Re-populate with current files in the input\n    Array.from(input.files).forEach((file, idx) => {\n      const li = document.createElement('li');\n      li.dataset.fileIndex = idx; // Store the file index for removal\n\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const img = document.createElement('img');\n          img.src = reader.result;\n          img.alt = file.name;\n          img.classList.add('preview-thumb');\n          li.appendChild(img);\n          addFileDetails(li, file, idx);\n        };\n        reader.readAsDataURL(file);\n      } else {\n        addFileDetails(li, file, idx);\n      }\n      listEl.appendChild(li);\n    });\n  }\n\n  function addFileDetails(li, file, idx) {\n    const span = document.createElement('span');\n    span.textContent = file.name;\n    span.classList.add('file-name');\n    li.appendChild(span);\n\n    const btn = document.createElement('button');\n    btn.type = 'button';\n    btn.textContent = 'Remove';\n    btn.classList.add('remove-file-btn');\n    btn.addEventListener('click', () => {\n      const input = li.closest('ul').previousElementSibling;\n      const fileIndex = parseInt(li.dataset.fileIndex);\n      removeFile(input, fileIndex);\n    });\n\n    li.appendChild(btn);\n  }\n\n  function removeFile(input, removeIndex) {\n    try {\n      // Remove from accumulated files array\n      if (input._accumulatedFiles && input._accumulatedFiles[removeIndex]) {\n        input._accumulatedFiles.splice(removeIndex, 1);\n      }\n\n      // Update the input's files property\n      const dt = new DataTransfer();\n      if (input._accumulatedFiles) {\n        input._accumulatedFiles.forEach(file => {\n          dt.items.add(file);\n        });\n      } else {\n        // Fallback to current files if accumulated files not available\n        Array.from(input.files).forEach((file, i) => {\n          if (i !== removeIndex) {\n            dt.items.add(file);\n          }\n        });\n      }\n\n      // Update the input's files\n      input.files = dt.files;\n\n      // Update the display\n      const listEl = input.nextElementSibling;\n      if (listEl && listEl.classList.contains('file-list')) {\n        updateFileList(input, listEl);\n      }\n\n      // Save state after removal\n      saveState();\n\n    } catch (error) {\n      console.error('Error removing file:', error);\n      // Fallback: trigger change event to refresh the list\n      input.dispatchEvent(new Event('change'));\n    }\n  }\n\n  function improveSignaturePad() {\n    const canvasId = 'fixed_signature_canvas';\n    const canvas = document.getElementById(canvasId);\n    if (!canvas) return;\n\n    // Check if SignaturePad library is available\n    if (typeof SignaturePad === 'undefined') {\n      console.error(\"SignaturePad library not loaded.\");\n      return;\n    }\n\n    // Get canvas context with willReadFrequently to address performance warning\n    const ctx = canvas.getContext('2d', { willReadFrequently: true });\n\n    // Create a variable to store the signature pad instance\n    let signaturePadInstance;\n\n    try {\n      // Initialize SignaturePad\n      signaturePadInstance = new SignaturePad(canvas, {\n        minWidth: 1,\n        maxWidth: 2.5,\n        penColor: \"black\",\n        backgroundColor: \"rgba(255, 255, 255, 0)\"\n      });\n\n      // Make it available globally for other functions\n      window.signaturePadInstance = signaturePadInstance;\n\n      // Handle window resize\n      const resizeCanvas = function() {\n        // Resize canvas while maintaining content\n        const data = signaturePadInstance.toData();\n        const ratio = Math.max(window.devicePixelRatio || 1, 1);\n        canvas.width = canvas.offsetWidth * ratio;\n        canvas.height = canvas.offsetHeight * ratio;\n        ctx.scale(ratio, ratio);\n        signaturePadInstance.clear(); // Clear canvas without clearing data\n        if (data) {\n          signaturePadInstance.fromData(data); // Redraw signature\n        }\n      };\n\n      // Initial sizing\n      resizeCanvas();\n\n      // Attach resize event\n      window.addEventListener('resize', resizeCanvas);\n\n      // Handle the clear button\n      const clearButton = document.getElementById('fixed_clear_btn');\n      if (clearButton) {\n        clearButton.addEventListener('click', function() {\n          signaturePadInstance.clear();\n        });\n      }\n\n      // Note: Removed the form submit handler from here as it's now consolidated\n\n      console.log(\"SignaturePad successfully initialized\");\n    } catch (e) {\n      console.error(\"Error initializing SignaturePad:\", e);\n    }\n\n    return signaturePadInstance;\n  }\n\n  function validateField(field) {\n    const formGroup = field.closest('.form-section') || field.parentElement;\n\n    if (!field.checkValidity()) {\n      field.classList.add('invalid-field');\n      field.classList.remove('valid');\n      formGroup.classList.add('has-error');\n      formGroup.classList.remove('has-success');\n\n      // Find or create error message\n      let errorMsg = field.parentElement.querySelector('.error-message');\n      if (!errorMsg) {\n        errorMsg = document.createElement('div');\n        errorMsg.classList.add('error-message');\n        field.parentElement.appendChild(errorMsg);\n      }\n\n      // Set appropriate error message with icon\n      let message = '';\n      if (field.validity.valueMissing) {\n        message = 'This field is required';\n      } else if (field.validity.typeMismatch) {\n        if (field.type === 'email') {\n          message = 'Please enter a valid email address';\n        } else {\n          message = `Please enter a valid ${field.type}`;\n        }\n      } else if (field.validity.patternMismatch) {\n        message = 'Please enter a value in the required format';\n      } else {\n        message = 'Invalid value';\n      }\n\n      errorMsg.innerHTML = `<i class=\"fas fa-exclamation-triangle\" aria-hidden=\"true\"></i> ${message}`;\n      errorMsg.style.display = 'flex';\n\n      // Announce error to screen readers\n      field.setAttribute('aria-invalid', 'true');\n      field.setAttribute('aria-describedby', errorMsg.id || '');\n    } else {\n      field.classList.remove('invalid-field');\n      field.classList.add('valid');\n      formGroup.classList.remove('has-error');\n      formGroup.classList.add('has-success');\n\n      // Hide error message\n      const errorMsg = field.parentElement.querySelector('.error-message');\n      if (errorMsg) {\n        errorMsg.style.display = 'none';\n      }\n\n      // Remove aria attributes\n      field.setAttribute('aria-invalid', 'false');\n      field.removeAttribute('aria-describedby');\n    }\n  }\n\n  // Enhanced real-time validation\n  function setupRealtimeValidation() {\n    document.querySelectorAll('input[required], textarea[required], select[required]').forEach(field => {\n      // Validate on blur (when user leaves field)\n      field.addEventListener('blur', function() {\n        if (this.value.trim() !== '') {\n          validateField(this);\n        }\n      });\n\n      // Clear errors on input (as user types)\n      field.addEventListener('input', function() {\n        if (this.classList.contains('invalid-field') && this.checkValidity()) {\n          validateField(this);\n        }\n      });\n\n      // Special handling for email fields\n      if (field.type === 'email') {\n        field.addEventListener('input', function() {\n          // Real-time email validation\n          const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n          if (this.value && !emailRegex.test(this.value)) {\n            this.setCustomValidity('Please enter a valid email address');\n          } else {\n            this.setCustomValidity('');\n          }\n        });\n      }\n    });\n  }\n\n  // Enhanced keyboard navigation\n  function setupKeyboardNavigation() {\n    document.addEventListener('keydown', function(e) {\n      // Allow Ctrl+Enter to submit form from any field\n      if (e.ctrlKey && e.key === 'Enter') {\n        const form = document.getElementById('satForm');\n        if (form) {\n          form.dispatchEvent(new Event('submit'));\n        }\n      }\n\n      // Enhanced tab navigation for progress steps\n      if (e.key === 'Tab' && e.ctrlKey) {\n        e.preventDefault();\n        const steps = document.querySelectorAll('.progress-step:not(.disabled)');\n        const currentStep = document.querySelector('.progress-step.active');\n        const currentIndex = Array.from(steps).indexOf(currentStep);\n\n        if (e.shiftKey) {\n          // Go to previous step\n          const prevIndex = currentIndex > 0 ? currentIndex - 1 : steps.length - 1;\n          goToStep(parseInt(steps[prevIndex].id.split('-')[1]));\n        } else {\n          // Go to next step\n          const nextIndex = currentIndex < steps.length - 1 ? currentIndex + 1 : 0;\n          goToStep(parseInt(steps[nextIndex].id.split('-')[1]));\n        }\n      }\n    });\n  }\n\n  // Progress step keyboard navigation\n  function makeProgressStepsAccessible() {\n    document.querySelectorAll('.progress-step').forEach((step, index) => {\n      step.setAttribute('role', 'tab');\n      step.setAttribute('tabindex', step.classList.contains('active') ? '0' : '-1');\n      step.setAttribute('aria-selected', step.classList.contains('active').toString());\n\n      step.addEventListener('keydown', function(e) {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault();\n          const stepNumber = parseInt(this.id.split('-')[1]);\n          goToStep(stepNumber);\n        }\n      });\n    });\n  }\n\n  function setupFieldValidation() {\n    document.querySelectorAll('input, select, textarea').forEach(field => {\n      field.addEventListener('blur', function() {\n        validateField(field);\n      });\n    });\n  }\n\n  function showLoadingOverlay(message) {\n    // Create overlay element\n    const overlay = document.createElement('div');\n    overlay.style.position = 'fixed';\n    overlay.style.top = '0';\n    overlay.style.left = '0';\n    overlay.style.width = '100%';\n    overlay.style.height = '100%';\n    overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    overlay.style.zIndex = '9999';\n    overlay.style.display = 'flex';\n    overlay.style.flexDirection = 'column';\n    overlay.style.alignItems = 'center';\n    overlay.style.justifyContent = 'center';\n    overlay.style.color = 'white';\n    overlay.style.fontFamily = 'Poppins, sans-serif';\n    overlay.className = 'loading-overlay'; // Add class for easier selection\n\n    // Create spinner\n    const spinner = document.createElement('div');\n    spinner.className = 'spinner';\n    spinner.style.border = '5px solid #f3f3f3';\n    spinner.style.borderTop = '5px solid var(--primary)';\n    spinner.style.borderRadius = '50%';\n    spinner.style.width = '50px';\n    spinner.style.height = '50px';\n    spinner.style.animation = 'spin 2s linear infinite';\n    overlay.appendChild(spinner);\n\n    // Add spinner animation\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    `;\n    document.head.appendChild(style);\n\n    // Add message\n    const messageEl = document.createElement('p');\n    messageEl.textContent = message || 'Processing...';\n    messageEl.style.marginTop = '20px';\n    messageEl.style.fontSize = '18px';\n    overlay.appendChild(messageEl);\n\n    // Add a tip for large forms\n    const tipEl = document.createElement('p');\n    tipEl.textContent = 'This may take a minute for large reports.';\n    tipEl.style.marginTop = '10px';\n    tipEl.style.fontSize = '14px';\n    tipEl.style.opacity = '0.8';\n    overlay.appendChild(tipEl);\n\n    // Add to the document\n    document.body.appendChild(overlay);\n\n    return overlay;\n  }\n\n  function hasSignature(pixelBuffer) {\n    // Check if there are any non-white pixels\n    for (let i = 0; i < pixelBuffer.length; i++) {\n      if (pixelBuffer[i] !== 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function isCurrentStepActive(stepNumber) {\n    return document.getElementById(`step-${stepNumber}`).classList.contains('active');\n  }\n\n  // Helper function to show success message (reused in submission)\n  function showSuccessMessage(message) {\n    // Create a success overlay\n    const successOverlay = document.createElement('div');\n    successOverlay.style.position = 'fixed';\n    successOverlay.style.top = '0';\n    successOverlay.style.left = '0';\n    successOverlay.style.width = '100%';\n    successOverlay.style.height = '100%';\n    successOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    successOverlay.style.zIndex = '9999';\n    successOverlay.style.display = 'flex';\n    successOverlay.style.flexDirection = 'column';\n    successOverlay.style.alignItems = 'center';\n    successOverlay.style.justifyContent = 'center';\n    successOverlay.style.color = 'white';\n    successOverlay.style.fontFamily = 'Poppins, sans-serif';\n\n    // Create success icon\n    const icon = document.createElement('div');\n    icon.innerHTML = '<i class=\"fa fa-check-circle\" style=\"font-size: 60px; color: #4CAF50;\"></i>';\n    successOverlay.appendChild(icon);\n\n    // Add message\n    const messageEl = document.createElement('h2');\n    messageEl.textContent = message;\n    messageEl.style.marginTop = '20px';\n    messageEl.style.fontSize = '24px';\n    successOverlay.appendChild(messageEl);\n\n    // Add details\n    const detailsEl = document.createElement('p');\n    detailsEl.textContent = 'Please check your email for the approval link.';\n    detailsEl.style.marginTop = '10px';\n    detailsEl.style.fontSize = '16px';\n    successOverlay.appendChild(detailsEl);\n\n    document.body.appendChild(successOverlay);\n    return successOverlay; // Return the created overlay\n  }\n\n  // Helper function to show error message\n  function showErrorMessage(message) {\n    // Create an error overlay (similar to success, but with error styling)\n    const errorOverlay = document.createElement('div');\n    errorOverlay.style.position = 'fixed';\n    errorOverlay.style.top = '0';\n    errorOverlay.style.left = '0';\n    errorOverlay.style.width = '100%';\n    errorOverlay.style.height = '100%';\n    errorOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';\n    errorOverlay.style.zIndex = '9999';\n    errorOverlay.style.display = 'flex';\n    errorOverlay.style.flexDirection = 'column';\n    errorOverlay.style.alignItems = 'center';\n    errorOverlay.style.justifyContent = 'center';\n    errorOverlay.style.color = 'white';\n    errorOverlay.style.fontFamily = 'Poppins, sans-serif';\n\n    // Create error icon\n    const icon = document.createElement('div');\n    icon.innerHTML = '<i class=\"fa fa-times-circle\" style=\"font-size: 60px; color: #f44336;\"></i>';\n    errorOverlay.appendChild(icon);\n\n    // Add message\n    const messageEl = document.createElement('h2');\n    messageEl.textContent = 'Submission Failed!';\n    messageEl.style.marginTop = '20px';\n    messageEl.style.fontSize = '24px';\n    errorOverlay.appendChild(messageEl);\n\n    // Add error details\n    const detailsEl = document.createElement('p');\n    detailsEl.textContent = message;\n    detailsEl.style.marginTop = '10px';\n    detailsEl.style.fontSize = '16px';\n    errorOverlay.appendChild(detailsEl);\n\n    document.body.appendChild(errorOverlay);\n    return errorOverlay; // Return the created overlay\n  }\n\n  // Function to show messages\n  function showMessage(message, type) {\n    // Remove any existing messages\n    const existingMessages = document.querySelectorAll('.message-banner');\n    existingMessages.forEach(msg => msg.remove());\n\n    // Create new message banner\n    const banner = document.createElement('div');\n    banner.className = `message-banner ${type}`;\n    banner.innerHTML = `\n      <span>${message}</span>\n      <button onclick=\"this.parentElement.remove()\" style=\"background: none; border: none; color: inherit; float: right; cursor: pointer; font-size: 18px;\">&times;</button>\n    `;\n\n    // Insert at top of form or body\n    const form = document.getElementById('reportForm');\n    const container = form || document.body;\n    if (container) {\n      container.insertBefore(banner, container.firstChild);\n    }\n\n    // For success messages, show longer\n    const autoRemoveTime = type === 'success' ? 8000 : 5000;\n\n    // Auto-remove after specified time\n    setTimeout(() => {\n      if (banner.parentElement) {\n        banner.remove();\n      }\n    }, autoRemoveTime);\n  }\n\n  function handleFormSubmission(e) {\n    e.preventDefault();\n\n    // Show loading overlay\n    const overlay = showLoadingOverlay('Submitting your report...');\n\n    // Submit the form via AJAX\n    const form = document.getElementById('satForm');\n    const formData = new FormData(form);\n\n    fetch(form.action, {\n      method: 'POST',\n      body: formData,\n      redirect: 'follow'\n    })\n    .then(response => {\n      // Hide loading overlay\n      const loadingOverlay = document.querySelector('.loading-overlay');\n      if (loadingOverlay) {\n        loadingOverlay.style.display = 'none';\n      }\n\n      // Handle different response types\n      if (response.headers.get('content-type')?.includes('application/json')) {\n        // JSON response - likely an error or success message\n        return response.json().then(data => {\n          if (data.success) {\n            // Success case\n            if (data.message) {\n              showMessage(data.message, 'success');\n            }\n\n            // Redirect to status page if provided\n            if (data.redirect_url) {\n              console.log('Redirecting to:', data.redirect_url);\n              setTimeout(() => {\n                window.location.href = data.redirect_url;\n              }, 2000);\n            }\n          } else {\n            // Error case\n            showMessage(data.message || 'An error occurred while generating the report', 'error');\n          }\n        });\n      } else {\n        // HTML response - likely a redirect or error page\n        return response.text().then(html => {\n          if (response.ok) {\n            // Successful HTML response, replace page content\n            document.open();\n            document.write(html);\n            document.close();\n          } else {\n            showMessage('An error occurred while generating the report', 'error');\n          }\n        });\n      }\n    })\n    .catch(error => {\n      console.error('Form submission error:', error);\n      showErrorMessage(error.message || 'An error occurred while submitting the form. Please try again.');\n\n      // Hide loading overlay on error\n      const loadingOverlay = document.querySelector('.loading-overlay');\n      if (loadingOverlay) {\n        loadingOverlay.style.display = 'none';\n      }\n    })\n    .finally(() => {\n      // Re-enable submit button\n      const submitButton = document.querySelector('button[type=\"submit\"]');\n      if (submitButton) {\n        submitButton.disabled = false;\n        submitButton.textContent = submitButton.getAttribute('data-original-text') || 'Generate Report';\n      }\n\n      // Ensure loading overlay is hidden\n      const loadingOverlay = document.querySelector('.loading-overlay');\n      if (loadingOverlay) {\n        loadingOverlay.style.display = 'none';\n      }\n    });\n  }\n\n  // Auto-save functionality\n  function setupAutoSave(form, submissionId) {\n    // Configuration\n    const AUTOSAVE_INTERVAL = 30000; // 30 seconds\n    const FORM_KEY_PREFIX = 'satFormAutoSave_';\n    let autoSaveTimer = null;\n    let lastSaveTime = 0;\n    let isDirty = false;\n\n    // Mark form as dirty when inputs change\n    form.addEventListener('input', function() {\n      isDirty = true;\n    });\n\n    // Setup interval for auto-save\n    autoSaveTimer = setInterval(function() {\n      if (isDirty && document.visibilityState !== 'hidden') {\n        saveFormState(form, submissionId);\n        isDirty = false;\n      }\n    }, AUTOSAVE_INTERVAL);\n\n    // Save when user leaves the page\n    window.addEventListener('beforeunload', function() {\n      if (isDirty) {\n        saveFormState(form, submissionId);\n      }\n    });\n\n    // Save when visibility changes (user switches tabs)\n    document.addEventListener('visibilitychange', function() {\n      if (document.visibilityState === 'hidden' && isDirty) {\n        saveFormState(form, submissionId);\n        isDirty = false;\n      }\n    });\n\n    // Setup manual save button if present\n    const saveBtn = document.getElementById('save-progress-btn');\n    if (saveBtn) {\n      saveBtn.addEventListener('click', function(e) {\n        e.preventDefault();\n        saveFormState(form, submissionId, true); // true means show notification\n        isDirty = false;\n      });\n    }\n  }\n\n  async function saveFormState(form, submissionId, showNotification = false) {\n    // Don't save too frequently\n    const now = Date.now();\n    if (now - lastSaveTime < 5000) return; // Minimum 5 seconds between saves\n\n    lastSaveTime = now;\n\n    // Use the same auto-save function for consistency\n    const success = await saveFormProgress();\n    if (success && showNotification) {\n      showSaveNotification();\n    }\n    return;\n\n    // Note: This function now delegates to the server-side auto-save\n  }\n\n  function showSaveNotification() {\n    // Create or get notification element\n    let notification = document.getElementById('save-notification');\n    if (!notification) {\n      notification = document.createElement('div');\n      notification.id = 'save-notification';\n      notification.style.position = 'fixed';\n      notification.style.bottom = '20px';\n      notification.style.right = '20px';\n      notification.style.backgroundColor = '#4CAF50';\n      notification.style.color = 'white';\n      notification.style.padding = '10px 20px';\n      notification.style.borderRadius = '4px';\n      notification.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';\n      notification.style.zIndex = '9999';\n      notification.style.transition = 'opacity 0.5s';\n      document.body.appendChild(notification);\n    }\n\n    notification.textContent = 'Progress saved!';\n    notification.style.opacity = '1';\n\n    // Hide after 3 seconds\n    setTimeout(() => {\n      notification.style.opacity = '0';\n    }, 3000);\n  }\n\n  function loadAutoSavedState(submissionId) {\n    try {\n      const savedDataString = localStorage.getItem('satFormAutoSave_' + submissionId);\n      if (!savedDataString) return false;\n\n      const savedData = JSON.parse(savedDataString);\n      const form = document.getElementById('satForm');\n\n      if (!form || !savedData.fields) return false;\n\n      // Restore form fields\n      Object.entries(savedData.fields).forEach(([name, val]) => {\n        // Handle multi-value fields (arrays)\n        if (Array.isArray(val)) {\n          // Find all elements with this base name plus []\n          const elements = form.querySelectorAll(`[name=\"${name}[]\"]`);\n          elements.forEach((el, index) => {\n            if (index < val.length) {\n              el.value = val[index];\n            }\n          });\n\n          // If we need more elements than exist, add them\n          const parent = elements.length > 0 ? elements[0].closest('tbody') : null;\n          if (parent) {\n            const templateId = getTemplateIdForTable(parent.id);\n            if (templateId) {\n              // Add rows for any additional values\n              for (let i = elements.length; i < val.length; i++) {\n                addRow(templateId, parent.id);\n                // Find the newly added element\n                const newElements = parent.querySelectorAll(`[name=\"${name}[]\"]`);\n                if (newElements[i]) {\n                  newElements[i].value = val[i];\n                }\n              }\n            }\n          }\n        } else {\n          // Handle single value fields\n          const el = form.querySelector(`[name=\"${name}\"]`);\n          if (el) {\n            if (el.type === 'checkbox' || el.type === 'radio') {\n              el.checked = (el.value === val);\n            } else {\n              el.value = val;\n            }\n          }\n        }\n      });\n\n      // Restore signature if present\n      if (savedData.signature) {\n        const signaturePad = document.getElementById('fixed_signature_canvas');\n        if (signaturePad) {\n          const ctx = signaturePad.getContext('2d', { willReadFrequently: true });\n          const img = new Image();\n          img.onload = function() {\n            ctx.drawImage(img, 0, 0);\n          };\n          img.src = savedData.signature;\n        }\n      }\n\n      // Restore current step\n      if (savedData.currentStep) {\n        goToStep(savedData.currentStep);\n      }\n\n      console.log(\"Form state restored from auto-save\");\n      showRestoreNotification();\n      return true;\n\n    } catch (e) {\n      console.error('Error restoring auto-saved form:', e);\n      return false;\n    }\n  }\n\n  function getTemplateIdForTable(tbodyId) {\n    const templateMap = {\n      'related-documents-body': 'tmpl-related-doc',\n      'pre-approvals-body': 'tmpl-pre-approval',\n      'post-approvals-body': 'tmpl-post-approval',\n      'pretest-body': 'tmpl-pretest',\n      'key-components-body': 'tmpl-keycomp',\n      'ip-records-body': 'tmpl-iprecord',\n      'digital-signals-body': 'tmpl-digital-signal',\n      'analogue-signals-body': 'tmpl-analogue-signal',\n      'modbus-digital-body': 'tmpl-modbus-digital',\n      'modbus-analogue-body': 'tmpl-modbus-analogue',\n      'process-test-body': 'tmpl-process-test',\n      'scada-verification-body': 'tmpl-scada-verification',\n      'trends-testing-body': 'tmpl-trends-testing',\n      'alarm-body': 'tmpl-alarm-list'\n    };\n\n    return templateMap[tbodyId];\n  }\n\n  function showRestoreNotification() {\n    // Create or get notification element\n    let notification = document.getElementById('restore-notification');\n    if (!notification) {\n      notification = document.createElement('div');\n      notification.id = 'restore-notification';\n      notification.style.position = 'fixed';\n      notification.style.bottom = '20px';\n      notification.style.right = '20px';\n      notification.style.backgroundColor = '#2196F3';\n      notification.style.color = 'white';\n      notification.style.padding = '10px 20px';\n      notification.style.borderRadius = '4px';\n      notification.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';\n      notification.style.zIndex = '9999';\n      notification.style.transition = 'opacity 0.5s';\n      document.body.appendChild(notification);\n    }\n\n    notification.textContent = 'Form restored from saved progress!';\n    notification.style.opacity = '1';\n\n    // Hide after 3 seconds\n    setTimeout(() => {\n      notification.style.opacity = '0';\n    }, 3000);\n  }\n\n  function cleanupOldSaves() {\n    // Find and remove old form saves to make space\n    const keys = [];\n    const FORM_KEY_PREFIX = 'satFormAutoSave_';\n\n    // Collect all form save keys\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith(FORM_KEY_PREFIX)) {\n        try {\n          const data = JSON.parse(localStorage.getItem(key));\n          keys.push({\n            key: key,\n            timestamp: data.timestamp || 0\n          });\n        } catch (e) {\n          // If we can't parse, assume it's old and add with timestamp 0\n          keys.push({ key: key, timestamp: 0 });\n        }\n      }\n    }\n\n    // Sort by timestamp (oldest first)\n    keys.sort((a, b) => a.timestamp - b.timestamp);\n\n    // Remove oldest saves (up to half of them)\n    const removeCount = Math.ceil(keys.length / 2);\n    for (let i = 0; i < removeCount; i++) {\n      if (keys[i]) {\n        localStorage.removeItem(keys[i].key);\n        console.log('Removed old form save:', keys[i].key);\n      }\n    }\n  }\n\n  // ========== RESPONSIVE TABLE SYSTEM ==========\n  function initializeResponsiveTables() {\n    const tables = document.querySelectorAll('table');\n\n    tables.forEach(table => {\n      createMobileCardLayout(table);\n      setupColumnPriorities(table);\n      setupStickyColumns(table);\n      addHeaderTooltips(table);\n    });\n\n    // Handle window resize\n    window.addEventListener('resize', debounce(handleTableResize, 250));\n  }\n\n  function createMobileCardLayout(table) {\n    const tableContainer = table.closest('.table-responsive');\n    if (!tableContainer) return;\n\n    // Wrap existing table for desktop\n    const desktopWrapper = document.createElement('div');\n    desktopWrapper.className = 'desktop-table-wrapper';\n    table.parentNode.insertBefore(desktopWrapper, table);\n    desktopWrapper.appendChild(table);\n\n    // Create mobile cards container\n    const mobileContainer = document.createElement('div');\n    mobileContainer.className = 'mobile-table-cards';\n\n    // Add scroll hint\n    const scrollHint = document.createElement('div');\n    scrollHint.className = 'mobile-scroll-hint';\n    scrollHint.textContent = '📱 Optimized for mobile viewing';\n    mobileContainer.appendChild(scrollHint);\n\n    // Extract table data and create cards\n    const headers = Array.from(table.querySelectorAll('thead th')).map(th => ({\n      text: th.textContent.trim(),\n      priority: getColumnPriority(th),\n      index: Array.from(th.parentNode.children).indexOf(th)\n    }));\n\n    const rows = Array.from(table.querySelectorAll('tbody tr'));\n\n    rows.forEach((row, index) => {\n      const card = createMobileCard(row, headers, index);\n      mobileContainer.appendChild(card);\n    });\n\n    tableContainer.appendChild(mobileContainer);\n\n    // Watch for table changes and update mobile cards\n    const observer = new MutationObserver(() => {\n      updateMobileCards(table, mobileContainer, headers);\n    });\n\n    observer.observe(table.querySelector('tbody'), {\n      childList: true,\n      subtree: true,\n      attributes: true\n    });\n  }\n\n  function createMobileCard(row, headers, index) {\n    const card = document.createElement('div');\n    card.className = 'mobile-card';\n    card.dataset.rowIndex = index;\n\n    const cells = Array.from(row.querySelectorAll('td'));\n\n    // Card header with primary information\n    const header = document.createElement('div');\n    header.className = 'mobile-card-header';\n\n    // Get primary identifier (usually first non-empty cell or signal tag)\n    let primaryId = `Item ${index + 1}`;\n    let signalTag = '';\n\n    // Look for Signal TAG column (usually around index 3-4)\n    const signalTagCell = cells.find((cell, idx) => {\n      const headerText = headers[idx]?.text.toLowerCase() || '';\n      return headerText.includes('signal') && headerText.includes('tag');\n    });\n\n    if (signalTagCell) {\n      const input = signalTagCell.querySelector('input');\n      signalTag = input ? input.value : signalTagCell.textContent.trim();\n    }\n\n    // Use S.No if available\n    if (cells[0]) {\n      const input = cells[0].querySelector('input');\n      const sno = input ? input.value : cells[0].textContent.trim();\n      if (sno) primaryId = sno;\n    }\n\n    header.innerHTML = `\n      <span class=\"mobile-card-title\">${signalTag || 'Signal'}</span>\n      <span class=\"mobile-card-number\">#${primaryId}</span>\n    `;\n\n    card.appendChild(header);\n\n    // Card body with essential fields\n    const body = document.createElement('div');\n    body.className = 'mobile-card-body';\n\n    // Essential fields (high priority columns)\n    const essentialFields = document.createElement('div');\n    essentialFields.className = 'mobile-essential-fields';\n\n    headers.forEach((header, colIndex) => {\n      if (header.priority === 'high' && colIndex < cells.length - 1) { // Exclude actions column\n        const cell = cells[colIndex];\n        if (cell) {\n          const fieldGroup = createMobileField(header.text, cell, colIndex);\n          essentialFields.appendChild(fieldGroup);\n        }\n      }\n    });\n\n    body.appendChild(essentialFields);\n\n    // Expandable section for other fields\n    const expandable = document.createElement('div');\n    expandable.className = 'mobile-expandable';\n\n    const toggle = document.createElement('button');\n    toggle.className = 'mobile-expand-toggle';\n    toggle.innerHTML = `\n      <span>More Details</span>\n      <i class=\"fas fa-chevron-down\"></i>\n    `;\n\n    toggle.addEventListener('click', (e) => {\n      e.preventDefault();\n      expandable.classList.toggle('expanded');\n    });\n\n    const expandableContent = document.createElement('div');\n    expandableContent.className = 'mobile-expandable-content';\n\n    headers.forEach((header, colIndex) => {\n      if (header.priority !== 'high' && colIndex < cells.length - 1) { // Exclude actions column\n        const cell = cells[colIndex];\n        if (cell) {\n          const fieldGroup = createMobileField(header.text, cell, colIndex);\n          expandableContent.appendChild(fieldGroup);\n        }\n      }\n    });\n\n    expandable.appendChild(toggle);\n    expandable.appendChild(expandableContent);\n    body.appendChild(expandable);\n\n    // Actions\n    const actionsCell = cells[cells.length - 1];\n    if (actionsCell) {\n      const actions = document.createElement('div');\n      actions.className = 'mobile-card-actions';\n\n      const buttons = actionsCell.querySelectorAll('button');\n      buttons.forEach(btn => {\n        const mobileBtn = btn.cloneNode(true);\n        mobileBtn.className = `mobile-action-btn ${btn.classList.contains('remove-row-btn') ? 'delete' : 'edit'}`;\n\n        // Ensure the cloned button maintains functionality\n        if (btn.classList.contains('remove-row-btn')) {\n          mobileBtn.addEventListener('click', () => {\n            // Remove both the original row and the mobile card\n            btn.click();\n            card.remove();\n          });\n        }\n\n        actions.appendChild(mobileBtn);\n      });\n\n      body.appendChild(actions);\n    }\n\n    card.appendChild(body);\n    return card;\n  }\n\n  function createMobileField(label, cell, colIndex) {\n    const fieldGroup = document.createElement('div');\n    fieldGroup.className = 'mobile-field-group';\n\n    const fieldLabel = document.createElement('div');\n    fieldLabel.className = 'mobile-field-label';\n    fieldLabel.textContent = label;\n\n    const fieldValue = document.createElement('div');\n    fieldValue.className = 'mobile-field-value';\n\n    // Clone the input/content from the cell\n    const input = cell.querySelector('input, select, textarea');\n    if (input) {\n      const clonedInput = input.cloneNode(true);\n\n      // Sync values between original table input and mobile card input\n      clonedInput.addEventListener('input', () => {\n        input.value = clonedInput.value;\n        input.dispatchEvent(new Event('input', { bubbles: true }));\n      });\n\n      input.addEventListener('input', () => {\n        clonedInput.value = input.value;\n      });\n\n      fieldValue.appendChild(clonedInput);\n    } else {\n      fieldValue.textContent = cell.textContent.trim();\n    }\n\n    fieldGroup.appendChild(fieldLabel);\n    fieldGroup.appendChild(fieldValue);\n\n    return fieldGroup;\n  }\n\n  function setupColumnPriorities(table) {\n    const headers = table.querySelectorAll('thead th');\n    const rows = table.querySelectorAll('tbody tr');\n\n    headers.forEach((header, index) => {\n      const priority = getColumnPriority(header);\n      header.classList.add(`col-priority-${priority}`);\n\n      // Apply same class to all cells in this column\n      rows.forEach(row => {\n        const cell = row.cells[index];\n        if (cell) {\n          cell.classList.add(`col-priority-${priority}`);\n        }\n      });\n\n      // Add sticky classes for important columns\n      const text = header.textContent.toLowerCase();\n      if (text.includes('signal') && text.includes('tag')) {\n        header.classList.add('col-sticky');\n        rows.forEach(row => {\n          const cell = row.cells[index];\n          if (cell) cell.classList.add('col-sticky');\n        });\n      }\n\n      // Make actions column sticky\n      if (text.includes('action') || index === headers.length - 1) {\n        header.classList.add('col-sticky-actions');\n        rows.forEach(row => {\n          const cell = row.cells[index];\n          if (cell) cell.classList.add('col-sticky-actions');\n        });\n      }\n    });\n  }\n\n  function getColumnPriority(header) {\n    const text = header.textContent.toLowerCase();\n\n    // High priority: essential for identification and results\n    if (text.includes('signal') || text.includes('tag') || text.includes('description') || \n        text.includes('result') || text.includes('action')) {\n      return 'high';\n    }\n\n    // Medium priority: important but not critical\n    if (text.includes('rack') || text.includes('position') || text.includes('verified') || \n        text.includes('punch')) {\n      return 'medium';\n    }\n\n    // Low priority: can be hidden on smaller screens\n    return 'low';\n  }\n\n  function updateMobileCards(table, mobileContainer, headers) {\n    // Find existing cards (skip the scroll hint)\n    const cards = Array.from(mobileContainer.querySelectorAll('.mobile-card'));\n    const rows = Array.from(table.querySelectorAll('tbody tr'));\n\n    // Remove excess cards\n    if (cards.length > rows.length) {\n      for (let i = rows.length; i < cards.length; i++) {\n        if (cards[i]) cards[i].remove();\n      }\n    }\n\n    // Add new cards for new rows\n    if (rows.length > cards.length) {\n      for (let i = cards.length; i < rows.length; i++) {\n        const card = createMobileCard(rows[i], headers, i);\n        mobileContainer.appendChild(card);\n      }\n    }\n\n    // Update existing cards\n    cards.forEach((card, index) => {\n      if (rows[index]) {\n        // Update card content if needed\n        const newCard = createMobileCard(rows[index], headers, index);\n        card.replaceWith(newCard);\n      }\n    });\n  }\n\n  function handleTableResize() {\n    // Refresh mobile cards when window resizes\n    setTimeout(() => {\n      const tables = document.querySelectorAll('table');\n      tables.forEach(table => {\n        const mobileContainer = table.closest('.table-responsive')?.querySelector('.mobile-table-cards');\n        if (mobileContainer) {\n          const headers = Array.from(table.querySelectorAll('thead th')).map(th => ({\n            text: th.textContent.trim(),\n            priority: getColumnPriority(th),\n            index: Array.from(th.parentNode.children).indexOf(th)\n          }));\n          updateMobileCards(table, mobileContainer, headers);\n        }\n      });\n    }, 100);\n  }\n\n  // ========== FULL-WIDTH TABLE ENHANCEMENTS ==========\n  document.addEventListener('DOMContentLoaded', function() {\n    // Initialize responsive tables\n    initializeResponsiveTables();\n\n    // Optimize tables for full-width display\n    const tables = document.querySelectorAll('table');\n\n    tables.forEach(table => {\n      // Skip if already optimized\n      if (table.classList.contains('full-width-optimized')) return;\n\n      // Mark as optimized\n      table.classList.add('full-width-optimized');\n\n      // Ensure table uses full available width\n      const tableResponsive = table.closest('.table-responsive');\n      if (tableResponsive) {\n        // Set table to use full container width\n        table.style.width = '100%';\n        table.style.tableLayout = 'fixed';\n\n        // Ensure inputs fit within their cells\n        const inputs = table.querySelectorAll('input, select, textarea');\n        inputs.forEach(input => {\n          input.style.width = 'calc(100% - 4px)';\n          input.style.boxSizing = 'border-box';\n        });\n      }\n\n      // Optimize table for available space\n      const headers = table.querySelectorAll('thead th');\n      if (headers.length > 0) {\n        // Apply percentage-based widths\n        const columnWidths = ['6%', '10%', '12%', '16%', '20%', '10%', '10%', '12%', '16%', '8%'];\n        headers.forEach((header, index) => {\n          if (columnWidths[index]) {\n            header.style.width = columnWidths[index];\n          }\n        });\n\n        // Apply same widths to body cells\n        const rows = table.querySelectorAll('tbody tr');\n        rows.forEach(row => {\n          const cells = row.querySelectorAll('td');\n          cells.forEach((cell, index) => {\n            if (columnWidths[index]) {\n              cell.style.width = columnWidths[index];\n            }\n          });\n        });\n      }\n    });\n\n    // Handle window resize\n    let resizeTimeout;\n    window.addEventListener('resize', function() {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(() => {\n        tables.forEach(table => {\n          if (table.classList.contains('full-width-optimized')) {\n            // Refresh table layout\n            table.style.width = '100%';\n            const inputs = table.querySelectorAll('input, select, textarea');\n            inputs.forEach(input => {\n              input.style.width = 'calc(100% - 4px)';\n            });\n          }\n        });\n      }, 250);\n    });\n\n    // Clean up any duplicate elements\n    document.querySelectorAll('tbody').forEach(tbody => {\n      Array.from(tbody.childNodes).forEach(node => {\n        if (node.nodeType === Node.TEXT_NODE && node.textContent.trim().includes('Scroll')) {\n          tbody.removeChild(node);\n        }\n      });\n    });\n  });\n\n  // ========== CONSOLIDATED FORM SUBMISSION HANDLER ==========\n  // This replaces all previous form submission handlers\n  document.addEventListener('DOMContentLoaded', function() {\n    const form = document.getElementById('satForm');\n    if (!form) return;\n\n    // Remove any existing submit handlers by cloning the form\n    const newForm = form.cloneNode(true);\n    form.parentNode.replaceChild(newForm, form);\n\n    // Add the single, clean submit handler\n    newForm.addEventListener('submit', async function(e) {\n      console.log(\"Form submission triggered\");\n\n      // Prevent default submission initially\n      e.preventDefault();\n\n      // First, try to refresh CSRF token\n      const tokenRefreshed = await refreshCsrfToken();\n      if (!tokenRefreshed) {\n        alert('Session validation failed. Please refresh the page and try again.');\n        return false;\n      }\n\n      // Update form's CSRF token with the new one\n      const newTokenInput = newForm.querySelector('[name=\"csrf_token\"]');\n      const newToken = document.querySelector('[name=\"csrf_token\"]').value;\n      if (newTokenInput && newToken) {\n        newTokenInput.value = newToken;\n      }\n\n      // Check if we're on the final step\n      const onFinalStep = isCurrentStepActive(10);\n      console.log(\"On final step:\", onFinalStep);\n\n      // Only validate signature if on final step\n      if (onFinalStep) {\n        // Check global signaturePad instance (preferred method)\n        if (window.signaturePadInstance) {\n          const isEmpty = window.signaturePadInstance.isEmpty();\n          console.log(\"SignaturePad is empty:\", isEmpty);\n\n          if (isEmpty) {\n            e.preventDefault();\n            alert('Please sign the document before submitting');\n            return false;\n          }\n\n          // Set the hidden field value with the signature data\n          const hiddenField = document.getElementById('sig_prepared_data');\n          if (hiddenField) {\n            hiddenField.value = window.signaturePadInstance.toDataURL('image/png');\n            console.log(\"Signature data saved to hidden field\");\n          }\n        } else {\n          // Fallback to canvas pixel inspection if global instance not available\n          const signaturePad = document.getElementById('fixed_signature_canvas');\n          if (signaturePad) {\n            const ctx = signaturePad.getContext('2d');\n            const pixelBuffer = new Uint32Array(\n              ctx.getImageData(0, 0, signaturePad.width, signaturePad.height).data.buffer\n            );\n\n            if (!hasSignature(pixelBuffer)) {\n              e.preventDefault();\n              alert('Please sign the document before submitting');\n              return false;\n            }\n\n            // Set the hidden field value\n            const hiddenField = document.getElementById('sig_prepared_data');\n            if (hiddenField) {\n              hiddenField.value = signaturePad.toDataURL('image/png');\n            }\n          }\n        }\n      }\n\n      // If we get here, the form is valid to submit\n      console.log(\"Form validation passed, proceeding with submission\");\n\n      // Show loading overlay\n      showLoadingOverlay('Submitting your report...');\n\n      // Submit the form programmatically\n      newForm.submit();\n    });\n  });\n\n  // Auto-save initialization\n  document.addEventListener('DOMContentLoaded', function() {\n    const form = document.getElementById('satForm');\n    if (!form) return;\n\n    // Get the submission ID or generate a temporary one\n    const submissionId = form.querySelector('[name=\"submission_id\"]')?.value || \n                         'temp_' + Math.random().toString(36).substring(2, 15);\n\n    // Set up auto-save functionality\n    setupAutoSave(form, submissionId);\n\n    // Look for a recovery notification element\n    const recoveryNotification = document.getElementById('recovery-notification');\n\n    // Check if there's a saved state to recover\n    const savedState = localStorage.getItem('satFormAutoSave_' + submissionId);\n    if (savedState && recoveryNotification) {\n      // Show recovery notification\n      recoveryNotification.style.display = 'block';\n\n      // Setup recovery actions\n      const recoverBtn = recoveryNotification.querySelector('.recover-btn');\n      const dismissBtn = recoveryNotification.querySelector('.dismiss-btn');\n\n      if (recoverBtn) {\n        recoverBtn.addEventListener('click', function() {\n          loadAutoSavedState(submissionId);\n          recoveryNotification.style.display = 'none';\n        });\n      }\n\n      if (dismissBtn) {\n        dismissBtn.addEventListener('click', function() {\n          recoveryNotification.style.display = 'none';\n        });\n      }\n    }\n  });\n\n  // Graceful error handling for external library dependencies\n  (function checkLibraries() {\n    const requiredLibraries = [\n      { name: 'SignaturePad', checker: () => typeof SignaturePad !== 'undefined' }\n    ];\n\n    requiredLibraries.forEach(lib => {\n      if (!lib.checker()) {\n        console.warn(`Warning: ${lib.name} library is not loaded. Some functionality may be limited.`);\n\n        // Optional: Create a notification for missing libraries\n        const notification = document.createElement('div');\n        notification.style.position = 'fixed';\n        notification.style.top = '10px';\n        notification.style.right = '10px';\n        notification.style.backgroundColor = '#f44336';\n        notification.style.color = 'white';\n        notification.style.padding = '10px';\n        notification.style.zIndex = '9999';\n        notification.textContent = `Missing ${lib.name} library. Some features may not work correctly.`;\n\n        document.body.appendChild(notification);\n\n        // Remove notification after 5 seconds\n        setTimeout(() => {\n          document.body.removeChild(notification);\n        }, 5000);\n      }\n    });\n  })();\n\n  // Shortcut functions for adding rows (convenience methods)\n  function addRelatedDoc() {\n    addRow('tmpl-related-doc', 'related-documents-body');\n    saveState();\n  }\n\n  function addPreApprovalRow() {\n    addRow('tmpl-pre-approval', 'pre-approvals-body');\n    saveState();\n  }\n\n  function addPostApprovalRow() {\n    addRow('tmpl-post-approval', 'post-approvals-body');\n    saveState();\n  }\n\n  function addPretestRow() {\n    addRow('tmpl-pretest', 'pretest-body');\n    saveState();\n  }\n\n  function addKeyComponentRow() {\n    addRow('tmpl-keycomp', 'key-components-body');\n    saveState();\n  }\n\n  function addIPRecordRow() {\n    addRow('tmpl-iprecord', 'ip-records-body');\n    saveState();\n  }\n\n  function addSignalListRow() {\n    addRow('tmpl-digital-signal', 'digital-signals-body');\n    saveState();\n  }\n\n  function addDigitalOutputRow() {\n    addRow('tmpl-digital-output', 'digital-outputs-body');\n    saveState();\n  }\n\n  function addAnalogueInputRow() {\n    addRow('tmpl-analogue-input', 'analogue-inputs-body');\n    saveState();\n  }\n\n  function addAnalogueOutputRow() {\n    addRow('tmpl-analogue-output', 'analogue-outputs-body');\n    saveState();\n  }\n\n  function addModbusDigitalRow() {\n    addRow('tmpl-modbus-digital', 'modbus-digital-body');\n    saveState();\n  }\n\n  function addModbusAnalogueRow() {\n    addRow('tmpl-modbus-analogue', 'modbus-analogue-body');\n    saveState();\n  }\n\n  function addProcessTestRow() {\n    addRow('tmpl-process-test', 'process-test-body');\n    saveState();\n  }\n\n  function addScadaVerificationRow() {\n    addRow('tmpl-scada-verification', 'scada-verification-body');\n    saveState();\n  }\n\n  function addTrendsTestingRow() {\n    addRow('tmpl-trends-testing', 'trends-testing-body');\n    saveState();\n  }\n\n  function addAlarmListRow() {\n    addRow('tmpl-alarm-list', 'alarm-body');\n    saveState();\n  }\n\n  // CSRF Protection (if jQuery is available)\n  function setupCSRF() {\n    if (typeof jQuery !== 'undefined') {\n      $.ajaxSetup({\n        beforeSend: function(xhr, settings) {\n          if (!/^(GET|HEAD|OPTIONS|TRACE)$/i.test(settings.type) && !this.crossDomain) {\n            xhr.setRequestHeader(\"X-CSRFToken\", $('input[name=\"csrf_token\"]').val());\n          }\n        }\n      });\n    }\n  }\n\n  // Add this function to your code to refresh the CSRF token periodically\n\n  // Initialize lastSaveTime variable\n  let lastSaveTime = null;\n\n  // Save state function\n  function saveState() {\n    lastSaveTime = new Date().getTime();\n    console.log('State saved at:', lastSaveTime);\n\n    // Also save to server every few seconds when user is actively editing\n    if (lastSaveTime % 30000 < 1000) { // Every 30 seconds approximately\n      saveFormProgress();\n    }\n  }\nfunction setupCsrfRefresh() {\n  // Refresh every 5 minutes (more frequent to prevent expiration)\n  const REFRESH_INTERVAL = 5 * 60 * 1000; \n\n  // Also refresh when the user comes back to the tab\n  document.addEventListener('visibilitychange', function() {\n    if (!document.hidden) {\n      refreshCsrfToken();\n    }\n  });\n\n  setInterval(refreshCsrfToken, REFRESH_INTERVAL);\n}\n\nasync function refreshCsrfToken() {\n  try {\n    // Fetch a new token from the server\n    const response = await fetch('/refresh_csrf', {\n      method: 'GET',\n      headers: {\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      // Update all CSRF token inputs on the page\n      document.querySelectorAll('input[name=\"csrf_token\"]').forEach(input => {\n        input.value = data.csrf_token;\n      });\n\n      // Update cookie as well\n      document.cookie = `csrf_token=${data.csrf_token}; path=/; SameSite=Lax`;\n\n      console.log('CSRF token refreshed successfully');\n      return true;\n    } else {\n      console.error('Failed to refresh CSRF token:', response.status);\n      return false;\n    }\n  } catch (error) {\n    console.error('Error refreshing CSRF token:', error);\n    return false;\n  }\n}\n\n// Auto-save function for form progress\nasync function saveFormProgress() {\n  const form = document.getElementById('satForm');\n  if (!form) return false;\n\n  try {\n    // First refresh CSRF token\n    await refreshCsrfToken();\n\n    // Collect form data as FormData to include CSRF token\n    const formData = new FormData(form);\n\n    const response = await fetch('/auto_save_progress', {\n      method: 'POST',\n      body: formData  // Send as FormData with CSRF token\n    });\n\n    if (response.ok) {\n      const result = await response.json();\n      console.log('Auto-save completed:', result.message);\n\n      // Update submission ID if it was generated\n      if (result.submission_id) {\n        const submissionIdInput = form.querySelector('[name=\"submission_id\"]');\n        if (submissionIdInput) {\n          submissionIdInput.value = result.submission_id;\n        }\n      }\n\n      return true;\n    } else {\n      console.error('Auto-save failed');\n      return false;\n    }\n  } catch (error) {\n    console.error('Error in auto-save:', error);\n    return false;\n  }\n}\n\n  // I/O Builder functionality\n  let configuredModules = [];\n  let configuredModbusRanges = [];\n  let currentModuleSpec = null;\n\n  function initializeIOBuilder() {\n    // Module lookup\n    document.getElementById('lookup_module_btn')?.addEventListener('click', lookupModule);\n\n    // Add module\n    document.getElementById('add_module_btn')?.addEventListener('click', addModule);\n\n    // Add Modbus range\n    document.getElementById('add_modbus_btn')?.addEventListener('click', addModbusRange);\n\n    // Generate tables\n    document.getElementById('generate_tables_btn')?.addEventListener('click', generateIOTables);\n\n    // Preview tables\n    document.getElementById('preview_tables_btn')?.addEventListener('click', previewTables);\n\n    // Module company change - reset model field\n    document.getElementById('module_company')?.addEventListener('change', function() {\n      document.getElementById('module_model').value = '';\n      hideModuleSpec();\n    });\n\n    // Enable manual override inputs\n    document.querySelectorAll('#manual_override input').forEach(input => {\n      input.addEventListener('input', updateManualSpec);\n      input.addEventListener('change', updateManualSpec);\n    });\n  }\n\n  async function lookupModule() {\n    const company = document.getElementById('module_company').value;\n    const model = document.getElementById('module_model').value.trim();\n\n    if (!company || !model) {\n      alert('Please select a company and enter a module model.');\n      return;\n    }\n\n    const lookupBtn = document.getElementById('lookup_module_btn');\n    lookupBtn.textContent = '🔍 Searching...';\n    lookupBtn.disabled = true;\n\n    try {\n      const response = await fetch('/io-builder/api/module-lookup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': document.querySelector('[name=\"csrf_token\"]').value\n        },\n        body: JSON.stringify({\n          company: company,\n          model: model\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        currentModuleSpec = data.module;\n        showModuleSpec(data.module, data.source);\n        document.getElementById('add_module_btn').disabled = false;\n      } else {\n        alert(`Error looking up module: ${data.error}`);\n        showManualOverride();\n      }\n    } catch (error) {\n      console.error('Module lookup error:', error);\n      alert('Error connecting to module lookup service');\n      showManualOverride();\n    } finally {\n      lookupBtn.textContent = '🔍 Lookup';\n      lookupBtn.disabled = false;\n    }\n  }\n\n  function showModuleSpec(spec, source) {\n    const specDisplay = document.getElementById('module_spec_display');\n    specDisplay.classList.remove('hidden');\n\n    document.getElementById('spec_description').textContent = spec.description || 'N/A';\n    document.getElementById('spec_di').textContent = spec.digital_inputs || 0;\n    document.getElementById('spec_do').textContent = spec.digital_outputs || 0;\n    document.getElementById('spec_ai').textContent = spec.analog_inputs || 0;\n    document.getElementById('spec_ao').textContent = spec.analog_outputs || 0;\n    document.getElementById('spec_total').textContent = spec.total_channels || 0;\n\n    // Show source indicator\n    const sourceIndicator = document.createElement('div');\n    sourceIndicator.className = 'source-indicator';\n    sourceIndicator.innerHTML = `\n      <span class=\"source-badge source-${source}\">\n        ${source === 'database' ? '📂 Cached' : source === 'web' ? '🌐 Web' : '✏️ Manual'}\n        ${source}\n      </span>\n    `;\n    specDisplay.prepend(sourceIndicator);\n\n    // Always show manual override section for user modifications\n    showManualOverride();\n\n    // Update manual override section title and message based on source\n    const manualSection = document.getElementById('manual_override');\n    if (manualSection) {\n      // Remove any existing messages\n      const existingMessage = manualSection.querySelector('.manual-entry-message');\n      if (existingMessage) {\n        existingMessage.remove();\n      }\n\n      // Create appropriate message\n      const manualMessage = document.createElement('div');\n      manualMessage.className = 'manual-entry-message';\n\n      if (source === 'manual' || (spec.total_channels === 0 && source !== 'web')) {\n        manualMessage.innerHTML = `\n          <p style=\"color: #f39c12; font-weight: bold; margin: 10px 0;\">\n            ⚠️ Module not found in database. Please enter channel counts manually below:\n          </p>\n        `;\n      } else {\n        manualMessage.innerHTML = `\n          <p style=\"color: #28a745; font-weight: bold; margin: 10px 0;\">\n            ✅ Module found! You can modify the values below if needed:\n          </p>\n        `;\n      }\n\n      manualSection.prepend(manualMessage);\n\n      // Pre-fill manual override fields with looked-up values\n      document.getElementById('manual_di').value = spec.digital_inputs || 0;\n      document.getElementById('manual_do').value = spec.digital_outputs || 0;\n      document.getElementById('manual_ai').value = spec.analog_inputs || 0;\n      document.getElementById('manual_ao').value = spec.analog_outputs || 0;\n    }\n  }\n\n  function showManualOverride() {\n    document.getElementById('manual_override').classList.remove('hidden');\n  }\n\n  function hideManualOverride() {\n    document.getElementById('manual_override').classList.add('hidden');\n  }\n\n  function hideModuleSpec() {\n    document.getElementById('module_spec_display').classList.add('hidden');\n    document.getElementById('add_module_btn').disabled = true;\n    currentModuleSpec = null;\n  }\n\n  function updateManualSpec() {\n    const di = parseInt(document.getElementById('manual_di').value) || 0;\n    const do_ = parseInt(document.getElementById('manual_do').value) || 0;\n    const ai = parseInt(document.getElementById('manual_ai').value) || 0;\n    const ao = parseInt(document.getElementById('manual_ao').value) || 0;\n    const total = di + do_ + ai + ao;\n\n    // Update displayed values\n    document.getElementById('spec_di').textContent = di;\n    document.getElementById('spec_do').textContent = do_;\n    document.getElementById('spec_ai').textContent = ai;\n    document.getElementById('spec_ao').textContent = ao;\n    document.getElementById('spec_total').textContent = total;\n\n    // Update currentModuleSpec if it exists\n    if (currentModuleSpec) {\n      currentModuleSpec.digital_inputs = di;\n      currentModuleSpec.digital_outputs = do_;\n      currentModuleSpec.analog_inputs = ai;\n      currentModuleSpec.analog_outputs = ao;\n      currentModuleSpec.total_channels = total;\n    }\n  }\n\n  function addModule() {\n    if (!currentModuleSpec) {\n      alert('Please lookup a module specification first.');\n      return;\n    }\n\n    console.log('Current module spec before adding:', currentModuleSpec);\n\n    const company = document.getElementById('module_company').value;\n    const model = document.getElementById('module_model').value.trim();\n    const rackNo = document.getElementById('module_rack').value;\n    const modulePosition = document.getElementById('module_position').value;\n    const startingSno = document.getElementById('module_starting_sno').value;\n\n    // Check for duplicate rack/position\n    const duplicate = configuredModules.find(m => \n      m.rack_no === rackNo && m.module_position === modulePosition\n    );\n\n    if (duplicate) {\n      alert(`A module is already configured at Rack ${rackNo}, Position ${modulePosition}`);\n      return;\n    }\n\n    // Get manual override values\n    const manualDI = document.getElementById('manual_di').value.trim();\n    const manualDO = document.getElementById('manual_do').value.trim();\n    const manualAI = document.getElementById('manual_ai').value.trim();\n    const manualAO = document.getElementById('manual_ao').value.trim();\n\n    // Use manual values if provided, otherwise use the displayed values (which are from lookup)\n    const digitalInputs = manualDI !== '' ? parseInt(manualDI) : parseInt(document.getElementById('spec_di').textContent) || 0;\n    const digitalOutputs = manualDO !== '' ? parseInt(manualDO) : parseInt(document.getElementById('spec_do').textContent) || 0;\n    const analogInputs = manualAI !== '' ? parseInt(manualAI) : parseInt(document.getElementById('spec_ai').textContent) || 0;\n    const analogOutputs = manualAO !== '' ? parseInt(manualAO) : parseInt(document.getElementById('spec_ao').textContent) || 0;\n\n    const moduleConfig = {\n      company: company,\n      model: model,\n      rack_no: rackNo,\n      module_position: modulePosition,\n      starting_sno: parseInt(startingSno) || 1,\n      digital_inputs: digitalInputs,\n      digital_outputs: digitalOutputs,\n      analog_inputs: analogInputs,\n      analog_outputs: analogOutputs,\n      spec: {\n        digital_inputs: digitalInputs,\n        digital_outputs: digitalOutputs,\n        analog_inputs: analogInputs,\n        analog_outputs: analogOutputs,\n        description: currentModuleSpec.description || `${company} ${model}`,\n        voltage_range: currentModuleSpec.voltage_range || '24 VDC',\n        current_range: currentModuleSpec.current_range || '4-20mA',\n        verified: true\n      }\n    };\n\n    console.log('Module config being added:', moduleConfig);\n\n    configuredModules.push(moduleConfig);\n    updateModulesList();\n    updateModuleStats();\n\n    // Clear form and manual overrides\n    document.getElementById('module_model').value = '';\n    document.getElementById('module_position').value = parseInt(modulePosition) + 1;\n    document.getElementById('manual_di').value = '';\n    document.getElementById('manual_do').value = '';\n    document.getElementById('manual_ai').value = '';\n    document.getElementById('manual_ao').value = '';\n    hideModuleSpec();\n\n    // Enable generation buttons\n    updateGenerationButtons();\n  }\n\n  function addModbusRange() {\n    const startAddr = parseInt(document.getElementById('modbus_start').value);\n    const endAddr = parseInt(document.getElementById('modbus_end').value);\n    const dataType = document.getElementById('modbus_type').value;\n    const description = document.getElementById('modbus_description').value.trim() || 'Modbus Range';\n    const range = document.getElementById('modbus_range').value.trim();\n\n    if (isNaN(startAddr) || isNaN(endAddr)) {\n      alert('Please enter valid start and end addresses.');\n      return;\n    }\n\n    if (startAddr > endAddr) {\n      alert('Start address must be less than or equal to end address.');\n      return;\n    }\n\n    // Check for overlapping ranges\n    const overlap = configuredModbusRanges.find(r => \n      r.data_type === dataType && (\n        (startAddr >= r.start_address && startAddr <= r.end_address) ||\n        (endAddr >= r.start_address && endAddr <= r.end_address) ||\n        (startAddr <= r.start_address && endAddr >= r.end_address)\n      )\n    );\n\n    if (overlap) {\n      alert(`Address range ${startAddr}-${endAddr} overlaps with existing ${dataType} range ${overlap.start_address}-${overlap.end_address}`);\n      return;\n    }\n\n    const rangeConfig = {\n      start_address: startAddr,\n      end_address: endAddr,\n      data_type: dataType,\n      description: description,\n      range: range\n    };\n\n    configuredModbusRanges.push(rangeConfig);\n    updateModbusRangesList();\n\n    // Clear form\n    document.getElementById('modbus_start').value = '';\n    document.getElementById('modbus_end').value = '';\n    document.getElementById('modbus_description').value = '';\n    document.getElementById('modbus_range').value = '';\n\n    // Enable generation buttons\n    updateGenerationButtons();\n  }\n\n  function updateModulesList() {\n    const container = document.getElementById('modules_container');\n\n    if (configuredModules.length === 0) {\n      container.innerHTML = '<p class=\"no-modules\">No modules configured yet. Add modules above to get started.</p>';\n      return;\n    }\n\n    const modulesHtml = configuredModules.map((module, index) => {\n      // Get channel counts from either spec object or top-level properties\n      const di = module.spec?.digital_inputs || module.digital_inputs || 0;\n      const do_ = module.spec?.digital_outputs || module.digital_outputs || 0;\n      const ai = module.spec?.analog_inputs || module.analog_inputs || 0;\n      const ao = module.spec?.analog_outputs || module.analog_outputs || 0;\n      const total = di + do_ + ai + ao;\n\n      return `\n        <div class=\"module-item\" data-index=\"${index}\">\n          <div class=\"module-header\">\n            <h5>${module.company} ${module.model}</h5>\n            <button type=\"button\" class=\"remove-module-btn\" onclick=\"removeModule(${index})\">\n              <i class=\"fa fa-trash\"></i>\n            </button>\n          </div>\n          <div class=\"module-details\">\n            <span>Rack: ${module.rack_no}</span>\n            <span>Position: ${module.module_position}</span>\n            <span>DI: ${di}</span>\n            <span>DO: ${do_}</span>\n            <span>AI: ${ai}</span>\n            <span>AO: ${ao}</span>\n            <span>Total: ${total} channels</span>\n          </div>\n        </div>\n      `;\n    }).join('');\n\n    container.innerHTML = modulesHtml;\n  }\n\n  function updateModbusRangesList() {\n    const container = document.getElementById('modbus_ranges_container');\n\n    if (configuredModbusRanges.length === 0) {\n      container.innerHTML = '<p class=\"no-ranges\">No Modbus ranges configured.</p>';\n      return;\n    }\n\n    const rangesHtml = configuredModbusRanges.map((range, index) => `\n      <div class=\"range-item\" data-index=\"${index}\">\n        <div class=\"range-header\">\n          <h6>${range.description}</h6>\n          <button type=\"button\" class=\"remove-range-btn\" onclick=\"removeModbusRange(${index})\">\n            <i class=\"fa fa-trash\"></i>\n          </button>\n        </div>\n        <div class=\"range-details\">\n          <span>Addresses: ${range.start_address}-${range.end_address}</span>\n          <span>Type: ${range.data_type}</span>\n          <span>Count: ${range.end_address - range.start_address + 1}</span>\n          ${range.range ? `<span>Range: ${range.range}</span>` : ''}\n        </div>\n      </div>\n    `).join('');\n\n    container.innerHTML = rangesHtml;\n  }\n\n  function updateModuleStats() {\n    const totalModules = configuredModules.length;\n\n    const digitalModules = configuredModules.filter(m => {\n      const di = m.spec?.digital_inputs || m.digital_inputs || 0;\n      const do_ = m.spec?.digital_outputs || m.digital_outputs || 0;\n      const ai = m.spec?.analog_inputs || m.analog_inputs || 0;\n      const ao = m.spec?.analog_outputs || m.analog_outputs || 0;\n      return (di > 0 || do_ > 0) && ai === 0 && ao === 0;\n    }).length;\n\n    const analogModules = configuredModules.filter(m => {\n      const di = m.spec?.digital_inputs || m.digital_inputs || 0;\n      const do_ = m.spec?.digital_outputs || m.digital_outputs || 0;\n      const ai = m.spec?.analog_inputs || m.analog_inputs || 0;\n      const ao = m.spec?.analog_outputs || m.analog_outputs || 0;\n      return (ai > 0 || ao > 0) && di === 0 && do_ === 0;\n    }).length;\n\n    const mixedModules = configuredModules.filter(m => {\n      const di = m.spec?.digital_inputs || m.digital_inputs || 0;\n      const do_ = m.spec?.digital_outputs || m.digital_outputs || 0;\n      const ai = m.spec?.analog_inputs || m.analog_inputs || 0;\n      const ao = m.spec?.analog_outputs || m.analog_outputs || 0;\n      return (di > 0 || do_ > 0) && (ai > 0 || ao > 0);\n    }).length;\n\n    document.getElementById('total_modules').value = totalModules;\n    document.getElementById('digital_modules').value = digitalModules;\n    document.getElementById('analog_modules').value = analogModules;\n    document.getElementById('mixed_modules').value = mixedModules;\n  }\n\n  function updateGenerationButtons() {\n    const hasModules = configuredModules.length > 0;\n    const hasModbus = configuredModbusRanges.length > 0;\n    const canGenerate = hasModules || hasModbus;\n\n    document.getElementById('generate_tables_btn').disabled = !canGenerate;\n    document.getElementById('preview_tables_btn').disabled = !canGenerate;\n  }\n\n  function removeModule(index) {\n    if (confirm('Are you sure you want to remove this module?')) {\n      configuredModules.splice(index, 1);\n      updateModulesList();\n      updateModuleStats();\n      updateGenerationButtons();\n    }\n  }\n\n  function removeModbusRange(index) {\n    if (confirm('Are you sure you want to remove this Modbus range?')) {\n      configuredModbusRanges.splice(index, 1);\n      updateModbusRangesList();\n      updateGenerationButtons();\n    }\n  }\n\n  async function generateIOTables() {\n    if (configuredModules.length === 0 && configuredModbusRanges.length === 0) {\n      alert('Please configure at least one module or Modbus range first.');\n      return;\n    }\n\n    const generateBtn = document.getElementById('generate_tables_btn');\n    generateBtn.textContent = '⚙️ Generating...';\n    generateBtn.disabled = true;\n\n    showGenerationStatus('Generating I/O tables...', 'info');\n\n    try {\n      const response = await fetch('/io-builder/api/generate-io-table', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': document.querySelector('[name=\"csrf_token\"]').value\n        },\n        body: JSON.stringify({\n          modules: configuredModules,\n          modbus_ranges: configuredModbusRanges\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        showGenerationStatus('I/O tables generated successfully!', 'success');\n        displayGeneratedTables(data.tables, data.summary);\n\n        // Store generated data for potential export\n        window.generatedIOData = data;\n\n        // Enable export button if available\n        const exportBtn = document.getElementById('export_tables_btn');\n        if (exportBtn) {\n          exportBtn.disabled = false;\n        }\n      } else {\n        showGenerationStatus(`Error: ${data.error}`, 'error');\n      }\n    } catch (error) {\n      console.error('Generation error:', error);\n      showGenerationStatus('Failed to generate I/O tables. Please try again.', 'error');\n    } finally {\n      generateBtn.textContent = '📊 Generate Tables';\n      generateBtn.disabled = false;\n    }\n  }\n\n  function displayGeneratedTables(tables, summary) {\n    const resultsContainer = document.getElementById('generation_results');\n    if (!resultsContainer) return;\n\n    let html = `\n      <div class=\"generation-summary\">\n        <h4>Generation Summary</h4>\n        <div class=\"summary-grid\">\n          <div class=\"summary-item\">\n            <span class=\"label\">Digital Inputs:</span>\n            <span class=\"value\">${summary.total_digital_inputs || 0}</span>\n          </div>\n          <div class=\"summary-item\">\n            <span class=\"label\">Digital Outputs:</span>\n            <span class=\"value\">${summary.total_digital_outputs || 0}</span>\n          </div>\n          <div class=\"summary-item\">\n            <span class=\"label\">Analog Inputs:</span>\n            <span class=\"value\">${summary.total_analog_inputs || 0}</span>\n          </div>\n          <div class=\"summary-item\">\n            <span class=\"label\">Analog Outputs:</span>\n            <span class=\"value\">${summary.total_analog_outputs || 0}</span>\n          </div>\n          <div class=\"summary-item\">\n            <span class=\"label\">Modbus Digital:</span>\n            <span class=\"value\">${summary.total_modbus_digital || 0}</span>\n          </div>\n          <div class=\"summary-item\">\n            <span class=\"label\">Modbus Analog:</span>\n            <span class=\"value\">${summary.total_modbus_analog || 0}</span>\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Digital Inputs Table\n    if (tables.digital_inputs && tables.digital_inputs.length > 0) {\n      html += generateTableHTML('Digital Inputs', tables.digital_inputs, [\n        'sno', 'rack_no', 'module_position', 'signal_tag', 'signal_description', 'result', 'punch_item', 'verified_by', 'comment'\n      ]);\n    }\n\n    // Digital Outputs Table\n    if (tables.digital_outputs && tables.digital_outputs.length > 0) {\n      html += generateTableHTML('Digital Outputs', tables.digital_outputs, [\n        'sno', 'rack_no', 'module_position', 'signal_tag', 'signal_description', 'result', 'punch_item', 'verified_by', 'comment'\n      ]);\n    }\n\n    // Analog Inputs Table\n    if (tables.analog_inputs && tables.analog_inputs.length > 0) {\n      html += generateTableHTML('Analog Inputs', tables.analog_inputs, [\n        'sno', 'rack_no', 'module_position', 'signal_tag', 'signal_description', 'result', 'punch_item', 'verified_by', 'comment'\n      ]);\n    }\n\n    // Analog Outputs Table\n    if (tables.analog_outputs && tables.analog_outputs.length > 0) {\n      html += generateTableHTML('Analog Outputs', tables.analog_outputs, [\n        'sno', 'rack_no', 'module_position', 'signal_tag', 'signal_description', 'result', 'punch_item', 'verified_by', 'comment'\n      ]);\n    }\n\n    // Modbus Digital Table\n    if (tables.modbus_digital && tables.modbus_digital.length > 0) {\n      html += generateTableHTML('Modbus Digital', tables.modbus_digital, [\n        'address', 'description', 'remarks', 'result', 'punch_item', 'verified_by', 'comment'\n      ]);\n    }\n\n    // Modbus Analog Table\n    if (tables.modbus_analog && tables.modbus_analog.length > 0) {\n      html += generateTableHTML('Modbus Analog', tables.modbus_analog, [\n        'address', 'description', 'range', 'result', 'punch_item', 'verified_by', 'comment'\n      ]);\n    }\n\n    resultsContainer.innerHTML = html;\n    resultsContainer.classList.remove('hidden');\n  }\n\n  function generateTableHTML(title, data, columns) {\n    let html = `\n      <div class=\"table-section\">\n        <h5>${title} (${data.length} entries)</h5>\n        <div class=\"table-responsive\">\n          <table class=\"io-table\">\n            <thead>\n              <tr>`;\n\n    // Generate headers\n    columns.forEach(col => {\n      html += `<th>${col.replace('_', ' ').toUpperCase()}</th>`;\n    });\n\n    html += `</tr></thead><tbody>`;\n\n    // Generate rows\n    data.forEach(row => {\n      html += '<tr>';\n      columns.forEach(col => {\n        html += `<td>${row[col] || ''}</td>`;\n      });\n      html += '</tr>';\n    });\n\n    html += '</tbody></table></div></div>';\n    return html;\n  }\n\n  async function previewTables() {\n    if (configuredModules.length === 0 && configuredModbusRanges.length === 0) {\n      alert('Please configure at least one module or Modbus range first.');\n      return;\n    }\n\n    // Show a preview modal or expand a preview section\n    showGenerationStatus('Generating preview...', 'info');\n\n    try {\n      const response = await fetch('/io-builder/api/generate-io-table', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': document.querySelector('[name=\"csrf_token\"]').value\n        },\n        body: JSON.stringify({\n          modules: configuredModules,\n          modbus_ranges: configuredModbusRanges\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        // Create a preview display\n        let previewContent = `\n          <h4>Table Preview</h4>\n          <p><strong>Digital Inputs:</strong> ${data.summary.total_digital_inputs}</p>\n          <p><strong>Digital Outputs:</strong> ${data.summary.total_digital_outputs}</p>\n          <p><strong>Analog Inputs:</strong> ${data.summary.total_analog_inputs}</p>\n          <p><strong>Analog Outputs:</strong> ${data.summary.total_analog_outputs}</p>\n          <p><strong>Modbus Digital:</strong> ${data.summary.total_modbus_digital}</p>\n          <p><strong>Modbus Analog:</strong> ${data.summary.total_modbus_analog}</p>\n          <p><em>Click \"Generate I/O Tables\" to populate the forms.</em></p>\n        `;\n\n        alert(previewContent.replace(/<[^>]*>/g, '')); // Simple text preview\n        showGenerationStatus('Preview generated successfully', 'success');\n      } else {\n        showGenerationStatus(`Error: ${data.error}`, 'error');\n      }\n    } catch (error) {\n      console.error('Preview error:', error);\n      showGenerationStatus('Error generating preview', 'error');\n    }\n  }\n\n  function populateIOTables(tables) {\n    console.log('Populating I/O tables with data:', tables);\n\n    // Populate Digital Input Signals table\n    if (tables.digital_inputs && tables.digital_inputs.length > 0) {\n      console.log('Populating digital inputs:', tables.digital_inputs.length, 'signals');\n      populateTableFromData('digital-signals-body', tables.digital_inputs, 'tmpl-digital-signal');\n    }\n\n    // Populate Digital Output Signals table\n    if (tables.digital_outputs && tables.digital_outputs.length > 0) {\n      console.log('Populating digital outputs:', tables.digital_outputs.length, 'signals');\n      populateTableFromData('digital-outputs-body', tables.digital_outputs, 'tmpl-digital-output');\n    }\n\n    // Populate Analogue Input Signals table  \n    if (tables.analog_inputs && tables.analog_inputs.length > 0) {\n      console.log('Populating analog inputs:', tables.analog_inputs.length, 'signals');\n      populateTableFromData('analogue-inputs-body', tables.analog_inputs, 'tmpl-analogue-input');\n    }\n\n    // Populate Analogue Output Signals table  \n    if (tables.analog_outputs && tables.analog_outputs.length > 0) {\n      console.log('Populating analog outputs:', tables.analog_outputs.length, 'signals');\n      populateTableFromData('analogue-outputs-body', tables.analog_outputs, 'tmpl-analogue-output');\n    }\n\n    // Populate Modbus Digital table\n    if (tables.modbus_digital && tables.modbus_digital.length > 0) {\n      console.log('Populating modbus digital:', tables.modbus_digital.length, 'signals');\n      populateTableFromData('modbus-digital-body', tables.modbus_digital, 'tmpl-modbus-digital');\n    }\n\n    // Populate Modbus Analogue table\n    if (tables.modbus_analog && tables.modbus_analog.length > 0) {\n      console.log('Populating modbus analog:', tables.modbus_analog.length, 'signals');\n      populateTableFromData('modbus-analogue-body', tables.modbus_analog, 'tmpl-modbus-analogue');\n    }\n\n    console.log('I/O table population completed');\n  }\n\n  function populateTableFromData(tbodyId, data, templateId) {\n    const tbody = document.getElementById(tbodyId);\n    if (!tbody || !data || data.length === 0) {\n      console.log(`No data to populate for ${tbodyId}:`, data);\n      return;\n    }\n\n    console.log(`Populating ${tbodyId} with ${data.length} rows:`, data);\n\n    // Clear existing rows\n    tbody.innerHTML = '';\n\n    data.forEach((rowData, index) => {\n      const template = document.getElementById(templateId);\n      if (!template) {\n        console.error(`Template ${templateId} not found`);\n        return;\n      }\n\n      const clone = template.content.cloneNode(true);\n      const row = clone.querySelector('tr');\n\n      // Define direct field mappings based on actual template field names\n      const fieldMappings = {\n        'digital-signals-body': {\n          'sno': 'sno[]',\n          'rack_no': 'rack_no[]', \n          'module_position': 'module_position[]',\n          'signal_tag': 'signal_tag[]',\n          'signal_description': 'signal_description[]',\n          'result': 'result[]',\n          'punch_item': 'punch_item[]',\n          'verified_by': 'verified_by[]',\n          'comment': 'comment[]'\n        },\n        'digital-outputs-body': {\n          'sno': 'output_sno[]',\n          'rack_no': 'output_rack_no[]',\n          'module_position': 'output_module_position[]',\n          'signal_tag': 'output_signal_tag[]',\n          'signal_description': 'output_signal_description[]',\n          'result': 'output_result[]',\n          'punch_item': 'output_punch_item[]',\n          'verified_by': 'output_verified_by[]',\n          'comment': 'output_comment[]'\n        },\n        'analogue-inputs-body': {\n          'sno': 'analog_sno[]',\n          'rack_no': 'analog_rack_no[]',\n          'module_position': 'analog_module_position[]',\n          'signal_tag': 'analog_signal_tag[]',\n          'signal_description': 'analog_signal_description[]',\n          'result': 'analog_result[]',\n          'punch_item': 'analog_punch_item[]',\n          'verified_by': 'analog_verified_by[]',\n          'comment': 'analog_comment[]'\n        },\n        'analogue-outputs-body': {\n          'sno': 'analog_output_sno[]',\n          'rack_no': 'analog_output_rack_no[]',\n          'module_position': 'analog_output_module_position[]',\n          'signal_tag': 'analog_output_signal_tag[]',\n          'signal_description': 'analog_output_signal_description[]',\n          'result': 'analog_output_result[]',\n          'punch_item': 'analog_output_punch_item[]',\n          'verified_by': 'analog_output_verified_by[]',\n          'comment': 'analog_output_comment[]'\n        },\n        'modbus-digital-body': {\n          'address': 'Address[]',\n          'description': 'Description[]',\n          'remarks': 'Remarks[]',\n          'result': 'Digital_Result[]',\n          'punch_item': 'Digital_Punch Item[]',\n          'verified_by': 'Digital_Verified By[]',\n          'comment': 'Digital_Comment[]'\n        },\n        'modbus-analogue-body': {\n          'address': 'Address Analogue[]',\n          'description': 'Description Analogue[]',\n          'range': 'Range Analogue[]',\n          'result': 'Result Analogue[]',\n          'punch_item': 'Punch Item Analogue[]',\n          'verified_by': 'Verified By Analogue[]',\n          'comment': 'Comment Analogue[]'\n        }\n      };\n\n      const mapping = fieldMappings[tbodyId] || {};\n\n      // Fill in the data using direct field mapping\n      Object.entries(rowData).forEach(([serverKey, value]) => {\n        let input = null;\n\n        // First try direct mapping\n        const mappedFieldName = mapping[serverKey];\n        if (mappedFieldName) {\n          input = row.querySelector(`[name=\"${mappedFieldName}\"]`);\n          if (input) {\n            console.log(`Direct mapping: ${serverKey} -> ${mappedFieldName}`);\n          }\n        }\n\n        // If direct mapping failed, try some variations\n        if (!input) {\n          const possibleNames = [\n            `${serverKey}[]`,\n            `${serverKey.charAt(0).toUpperCase() + serverKey.slice(1)}[]`,\n            `${serverKey.toUpperCase()}[]`,\n            `${serverKey.replace(/_/g, ' ')}[]`,\n            `${serverKey.replace(/_/g, '_').charAt(0).toUpperCase() + serverKey.replace(/_/g, '_').slice(1)}[]`\n          ];\n\n          for (const name of possibleNames) {\n            input = row.querySelector(`[name=\"${name}\"]`);\n            if (input) {\n              console.log(`Found via variation: ${serverKey} -> ${name}`);\n              break;\n            }\n          }\n        }\n\n        // Set the value if input found\n        if (input) {\n          if (input.tagName === 'TEXTAREA') {\n            input.value = value || '';\n            input.textContent = value || '';\n          } else {\n            input.value = value || '';\n          }\n          console.log(`✓ Populated ${serverKey} with: \"${value}\"`);\n        } else {\n          console.warn(`✗ No input found for field: ${serverKey} in table ${tbodyId}`);\n          // Debug: list all available inputs\n          const availableInputs = Array.from(row.querySelectorAll('input, textarea, select')).map(inp => ({\n            name: inp.name,\n            placeholder: inp.placeholder\n          }));\n          console.log('Available inputs:', availableInputs);\n        }\n      });\n\n      tbody.appendChild(clone);\n    });\n\n    console.log(`Successfully populated ${data.length} rows in ${tbodyId}`);\n  }\n\n  function showGenerationStatus(message, type) {\n    const statusDiv = document.getElementById('generation_status');\n    const statusText = document.getElementById('status_text');\n\n    statusDiv.classList.remove('hidden');\n    statusText.textContent = message;\n\n    // Update styling based on type\n    statusDiv.className = `generation-status ${type}`;\n  }\n\n  // Setup Quick Actions dropdown\n  function setupQuickActionsDropdown() {\n    const quickActionsBtn = document.getElementById('quick-actions-btn');\n    const quickActionsDropdown = document.getElementById('quick-actions-dropdown');\n\n    if (quickActionsBtn && quickActionsDropdown) {\n      quickActionsBtn.addEventListener('click', function(e) {\n        e.stopPropagation();\n        quickActionsDropdown.classList.toggle('show');\n      });\n\n      // Close dropdown when clicking outside\n      document.addEventListener('click', function(e) {\n        if (!quickActionsBtn.contains(e.target) && !quickActionsDropdown.contains(e.target)) {\n          quickActionsDropdown.classList.remove('show');\n        }\n      });\n    }\n  }\n\n  // Add to global functions for I/O Builder\n  window.removeModule = removeModule;\n  window.removeModbusRange = removeModbusRange;\n  window.lookupModule = lookupModule;\n  window.addModule = addModule;\n  window.addModbusRange = addModbusRange;\n  window.generateIOTables = generateIOTables;\n  window.previewTables = previewTables;\n\n  // Initialize the form\n  window.addEventListener('DOMContentLoaded', () => {\n    loadState();\n    goToStep(1);\n    setupEventHandlers();\n    setupFileInputs();\n    improveSignaturePad();\n    setupFieldValidation(); // Added this line to initialize field validation\n    setupRealtimeValidation(); // Add real-time validation\n    setupKeyboardNavigation(); // Add keyboard navigation\n    makeProgressStepsAccessible(); // Add accessibility features\n    setupCsrfRefresh();\n    setupSaveProgressButtons();\n    initializeIOBuilder(); // Add I/O builder initialization\n    setupQuickActionsDropdown(); // Add quick actions setup\n\n    // Form submission handling is already set up in the consolidated handler above\n    // Auto-save on form changes\n    const form = document.querySelector('form');\n    if (form) {\n      const inputs = form.querySelectorAll('input, textarea, select');\n      inputs.forEach(input => {\n        input.addEventListener('change', debounce(saveFormProgress, 2000));\n      });\n    }\n\n    // Initialize email selection functionality\n    initializeEmailSelection();\n\n    // Display version information\n    displayVersionInfo();\n\n    // Initialize user dropdown\n    setupUserDropdown();\n\n    // Announce form readiness to screen readers\n    const announcement = document.createElement('div');\n    announcement.setAttribute('aria-live', 'polite');\n    announcement.setAttribute('aria-atomic', 'true');\n    announcement.style.position = 'absolute';\n    announcement.style.left = '-10000px';\n    announcement.textContent = 'SAT Report form loaded. Use Tab to navigate, Ctrl+Tab to switch between steps.';\n    document.body.appendChild(announcement);\n  });\n\n  // Setup save progress buttons\n  function setupSaveProgressButtons() {\n    document.querySelectorAll('.save-progress-btn').forEach(btn => {\n      btn.addEventListener('click', async function() {\n        const success = await saveFormProgress();\n        if (success) {\n          // Show success message\n          const notification = document.createElement('div');\n          notification.style.position = 'fixed';\n          notification.style.bottom = '20px';\n          notification.style.right = '20px';\n          notification.style.backgroundColor = '#4CAF50';\n          notification.style.color = 'white';\n          notification.style.padding = '10px 20px';\n          notification.style.borderRadius = '4px';\n          notification.style.zIndex = '9999';\n          notification.textContent = 'Progress saved successfully!';\n          document.body.appendChild(notification);\n\n          setTimeout(() => {\n            document.body.removeChild(notification);\n          }, 3000);\n        }\n      });\n    });\n  }\n\n  // Column management functions\n  window.toggleAllColumns = function(button) {\n    const table = button.closest('.table-responsive').querySelector('table');\n    const hiddenCols = table.querySelectorAll('.col-priority-low, .col-priority-medium');\n\n    hiddenCols.forEach(col => {\n      col.style.display = col.style.display === 'none' ? '' : 'none';\n    });\n\n    button.innerHTML = hiddenCols[0]?.style.display === 'none' ? \n      '<i class=\"fas fa-columns\"></i> Show All Columns' : \n      '<i class=\"fas fa-eye-slash\"></i> Hide Extra Columns';\n  };\n\n  window.toggleEssentialColumns = function(button) {\n    const table = button.closest('.table-responsive').querySelector('table');\n    const nonEssentialCols = table.querySelectorAll('.col-priority-low, .col-priority-medium');\n    const essentialCols = table.querySelectorAll('.col-priority-high');\n\n    const isShowingEssential = nonEssentialCols[0]?.style.display === 'none';\n\n    if (isShowingEssential) {\n      // Show all columns\n      nonEssentialCols.forEach(col => col.style.display = '');\n      button.innerHTML = '<i class=\"fas fa-eye\"></i> Essential Only';\n    } else {\n      // Show only essential columns\n      nonEssentialCols.forEach(col => col.style.display = 'none');\n      button.innerHTML = '<i class=\"fas fa-columns\"></i> Show All Columns';\n    }\n  };\n\n  // Utility function for debouncing\n  function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  // Expose public methods\n  window.startProcess = startProcess;\n  window.showSATForm = showSATForm;\n  window.backToWelcome = backToWelcome;\n  window.goToStep = goToStep;\n  window.addRelatedDoc = addRelatedDoc;\n  window.addPreApprovalRow = addPreApprovalRow;\n  window.addPostApprovalRow = addPostApprovalRow;\n  window.addPretestRow = addPretestRow;\n  window.addKeyComponentRow = addKeyComponentRow;\n  window.addIPRecordRow = addIPRecordRow;\n  window.addSignalListRow = addSignalListRow;\n  window.addDigitalOutputRow = addDigitalOutputRow;\n  window.addAnalogueInputRow = addAnalogueInputRow;\n  window.addAnalogueOutputRow = addAnalogueOutputRow;\n  window.addModbusDigitalRow = addModbusDigitalRow;\n  window.addModbusAnalogueRow = addModbusAnalogueRow;\n  window.addProcessTestRow = addProcessTestRow;\n  window.addScadaVerificationRow = addScadaVerificationRow;\n  window.addTrendsTestingRow = addTrendsTestingRow;\n  window.addAlarmListRow = addAlarmListRow;\n\n  // Debounce function to limit auto-save frequency\n  function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  // Initialize email selection functionality\n  function initializeEmailSelection() {\n    console.log('Initializing email selection...');\n\n    // Fetch users by role\n    fetch('/api/get-users-by-role')\n      .then(response => {\n        console.log('Response status:', response.status);\n        return response.json();\n      })\n      .then(data => {\n        console.log('Received user data:', data);\n        if (data.success) {\n          console.log('Users by role:', data.users);\n          populateEmailSelectors(data.users);\n        } else {\n          console.error('Failed to fetch users:', data.error);\n          alert('Failed to load user list. Please refresh the page.');\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching users:', error);\n        alert('Error loading user list. Please check your connection and refresh.');\n      });\n\n    // Set up event listeners for email selectors\n    document.querySelectorAll('.email-select').forEach(select => {\n      select.addEventListener('change', function() {\n        const targetInput = document.getElementById(this.dataset.target);\n        if (targetInput && this.value) {\n          targetInput.value = this.value;\n          // Trigger change event for auto-save\n          targetInput.dispatchEvent(new Event('change'));\n        }\n      });\n    });\n  }\n\n  // Populate email selector dropdowns\n  function populateEmailSelectors(users) {\n    console.log('Populating email selectors with:', users);\n\n    // Automation Manager (TM role users)\n    const techManagerSelect = document.getElementById('approver_1_select');\n    const techManagerInput = document.getElementById('approver_1_email');\n\n    if (techManagerSelect && techManagerInput) {\n      console.log('Found AM selector, TM users:', users.TM);\n      // Clear existing options except the first one\n      const firstOption = techManagerSelect.querySelector('option');\n      techManagerSelect.innerHTML = '';\n      if (firstOption) {\n        techManagerSelect.appendChild(firstOption);\n      }\n\n      if (users.TM && users.TM.length > 0) {\n        users.TM.forEach(user => {\n          const option = document.createElement('option');\n          option.value = user.email;\n          option.textContent = `${user.name} (${user.email})`;\n          techManagerSelect.appendChild(option);\n          console.log('Added AM option:', user.name, user.email);\n        });\n      } else {\n        console.log('No AM users found');\n        const option = document.createElement('option');\n        option.value = '';\n        option.textContent = 'No Automation Managers found';\n        option.disabled = true;\n        techManagerSelect.appendChild(option);\n      }\n\n      // Add event listener to update input when selection changes\n      techManagerSelect.addEventListener('change', function() {\n        if (this.value) {\n          techManagerInput.value = this.value;\n          console.log('Updated AM input to:', this.value);\n        }\n      });\n    } else {\n      console.error('Automation Manager select or input element not found');\n    }\n\n    // Project Manager (PM role users)\n    const pmSelect = document.getElementById('approver_2_select');\n    const pmInput = document.getElementById('approver_2_email');\n\n    if (pmSelect && pmInput) {\n      console.log('Found PM selector, PM users:', users.PM);\n      // Clear existing options except the first one\n      const firstOption = pmSelect.querySelector('option');\n      pmSelect.innerHTML = '';\n      if (firstOption) {\n        pmSelect.appendChild(firstOption);\n      }\n\n      if (users.PM && users.PM.length > 0) {\n        users.PM.forEach(user => {\n          const option = document.createElement('option');\n          option.value = user.email;\n          option.textContent = `${user.name} (${user.email})`;\n          pmSelect.appendChild(option);\n          console.log('Added PM option:', user.name, user.email);\n        });\n      } else {\n        console.log('No PM users found');\n        const option = document.createElement('option');\n        option.value = '';\n        option.textContent = 'No Project Managers found';\n        option.disabled = true;\n        pmSelect.appendChild(option);\n      }\n\n      // Add event listener to update input when selection changes\n      pmSelect.addEventListener('change', function() {\n        if (this.value) {\n          pmInput.value = this.value;\n          console.log('Updated PM input to:', this.value);\n        }\n      });\n    } else {\n      console.error('Project Manager select or input element not found');\n    }\n\n    // Client (All users can be clients, but primarily show admins and engineers)\n    const clientSelect = document.getElementById('approver_3_select');\n    const clientInput = document.getElementById('approver_3_email');\n\n    if (clientSelect && clientInput) {\n      // Clear existing options except the first one\n      const firstOption = clientSelect.querySelector('option');\n      clientSelect.innerHTML = '';\n      if (firstOption) {\n        clientSelect.appendChild(firstOption);\n      }\n\n      // Add all user types for client selection\n      ['Admin', 'Engineer', 'TM', 'PM'].forEach(role => {\n        if (users[role] && users[role].length > 0) {\n          const optgroup = document.createElement('optgroup');\n          optgroup.label = role === 'TM' ? 'Technical Managers' : role + 's';\n\n          users[role].forEach(user => {\n            const option = document.createElement('option');\n            option.value = user.email;\n            option.textContent = `${user.name} (${user.email})`;\n            optgroup.appendChild(option);\n          });\n\n          clientSelect.appendChild(optgroup);\n        }\n      });\n\n      // Add event listener to update input when selection changes\n      clientSelect.addEventListener('change', function() {\n        if (this.value) {\n          clientInput.value = this.value;\n          console.log('Updated Client input to:', this.value);\n        }\n      });\n    }\n  }\n\n  // Display version information\n  function displayVersionInfo() {\n    // This function can be implemented to show version information\n    console.log('SAT Report Generator v2.0');\n  }\n\n  // Setup user dropdown functionality\n  function setupUserDropdown() {\n    const userDetails = document.querySelector('.user-details');\n    const userDropdown = document.querySelector('.user-dropdown-menu');\n\n    if (userDetails && userDropdown) {\n      userDetails.addEventListener('click', function(e) {\n        e.stopPropagation();\n        userDropdown.classList.toggle('show');\n      });\n\n      // Close dropdown when clicking outside\n      document.addEventListener('click', function(e) {\n        if (!userDetails.contains(e.target)) {\n          userDropdown.classList.remove('show');\n        }\n      });\n    }\n  }\n\n  // Initialize responsive tables with mobile card layout\n  function initializeResponsiveTables() {\n    const tables = document.querySelectorAll('table');\n\n    tables.forEach(table => {\n      createMobileCardLayout(table);\n      setupColumnPriorities(table);\n      setupStickyColumns(table);\n      addHeaderTooltips(table);\n    });\n\n    // Handle window resize\n    window.addEventListener('resize', debounce(handleTableResize, 250));\n  }\n\n  function createMobileCardLayout(table) {\n    const tableContainer = table.closest('.table-responsive');\n    if (!tableContainer) return;\n\n    // Wrap existing table for desktop\n    const desktopWrapper = document.createElement('div');\n    desktopWrapper.className = 'desktop-table-wrapper';\n    table.parentNode.insertBefore(desktopWrapper, table);\n    desktopWrapper.appendChild(table);\n\n    // Create mobile cards container\n    const mobileContainer = document.createElement('div');\n    mobileContainer.className = 'mobile-table-cards';\n\n    // Add scroll hint\n    const scrollHint = document.createElement('div');\n    scrollHint.className = 'mobile-scroll-hint';\n    scrollHint.textContent = '📱 Optimized for mobile viewing';\n    mobileContainer.appendChild(scrollHint);\n\n    // Extract table data and create cards\n    const headers = Array.from(table.querySelectorAll('thead th')).map(th => ({\n      text: th.textContent.trim(),\n      priority: getColumnPriority(th),\n      index: Array.from(th.parentNode.children).indexOf(th)\n    }));\n\n    const rows = Array.from(table.querySelectorAll('tbody tr'));\n\n    rows.forEach((row, index) => {\n      const card = createMobileCard(row, headers, index);\n      mobileContainer.appendChild(card);\n    });\n\n    tableContainer.appendChild(mobileContainer);\n\n    // Watch for table changes and update mobile cards\n    const observer = new MutationObserver(() => {\n      updateMobileCards(table, mobileContainer, headers);\n    });\n\n    observer.observe(table.querySelector('tbody'), {\n      childList: true,\n      subtree: true,\n      attributes: true\n    });\n  }\n\n  function createMobileCard(row, headers, index) {\n    const card = document.createElement('div');\n    card.className = 'mobile-card';\n    card.dataset.rowIndex = index;\n\n    const cells = Array.from(row.querySelectorAll('td'));\n\n    // Card header with primary information\n    const header = document.createElement('div');\n    header.className = 'mobile-card-header';\n\n    // Get primary identifier (usually first non-empty cell or signal tag)\n    let primaryId = `Item ${index + 1}`;\n    let signalTag = '';\n\n    // Look for Signal TAG column (usually around index 3-4)\n    const signalTagCell = cells.find((cell, idx) => {\n      const headerText = headers[idx]?.text.toLowerCase() || '';\n      return headerText.includes('signal') && headerText.includes('tag');\n    });\n\n    if (signalTagCell) {\n      const input = signalTagCell.querySelector('input');\n      signalTag = input ? input.value : signalTagCell.textContent.trim();\n    }\n\n    // Use S.No if available\n    if (cells[0]) {\n      const input = cells[0].querySelector('input');\n      const sno = input ? input.value : cells[0].textContent.trim();\n      if (sno) primaryId = sno;\n    }\n\n    header.innerHTML = `\n      <span class=\"mobile-card-title\">${signalTag || 'Signal'}</span>\n      <span class=\"mobile-card-number\">#${primaryId}</span>\n    `;\n\n    card.appendChild(header);\n\n    // Card body with essential fields\n    const body = document.createElement('div');\n    body.className = 'mobile-card-body';\n\n    // Essential fields (high priority columns)\n    const essentialFields = document.createElement('div');\n    essentialFields.className = 'mobile-essential-fields';\n\n    headers.forEach((header, colIndex) => {\n      if (header.priority === 'high' && colIndex < cells.length - 1) { // Exclude actions column\n        const cell = cells[colIndex];\n        if (cell) {\n          const fieldGroup = createMobileField(header.text, cell, colIndex);\n          essentialFields.appendChild(fieldGroup);\n        }\n      }\n    });\n\n    body.appendChild(essentialFields);\n\n    // Expandable section for other fields\n    const expandable = document.createElement('div');\n    expandable.className = 'mobile-expandable';\n\n    const toggle = document.createElement('button');\n    toggle.className = 'mobile-expand-toggle';\n    toggle.innerHTML = `\n      <span>More Details</span>\n      <i class=\"fas fa-chevron-down\"></i>\n    `;\n\n    toggle.addEventListener('click', (e) => {\n      e.preventDefault();\n      expandable.classList.toggle('expanded');\n    });\n\n    const expandableContent = document.createElement('div');\n    expandableContent.className = 'mobile-expandable-content';\n\n    headers.forEach((header, colIndex) => {\n      if (header.priority !== 'high' && colIndex < cells.length - 1) { // Exclude actions column\n        const cell = cells[colIndex];\n        if (cell) {\n          const fieldGroup = createMobileField(header.text, cell, colIndex);\n          expandableContent.appendChild(fieldGroup);\n        }\n      }\n    });\n\n    expandable.appendChild(toggle);\n    expandable.appendChild(expandableContent);\n    body.appendChild(expandable);\n\n    // Actions\n    const actionsCell = cells[cells.length - 1];\n    if (actionsCell) {\n      const actions = document.createElement('div');\n      actions.className = 'mobile-card-actions';\n\n      const buttons = actionsCell.querySelectorAll('button');\n      buttons.forEach(btn => {\n        const mobileBtn = btn.cloneNode(true);\n        mobileBtn.className = `mobile-action-btn ${btn.classList.contains('remove-row-btn') ? 'delete' : 'edit'}`;\n\n        // Ensure the cloned button maintains functionality\n        if (btn.classList.contains('remove-row-btn')) {\n          mobileBtn.addEventListener('click', () => {\n            // Remove both the original row and the mobile card\n            btn.click();\n            card.remove();\n          });\n        }\n\n        actions.appendChild(mobileBtn);\n      });\n\n      body.appendChild(actions);\n    }\n\n    card.appendChild(body);\n    return card;\n  }\n\n  function createMobileField(label, cell, colIndex) {\n    const fieldGroup = document.createElement('div');\n    fieldGroup.className = 'mobile-field-group';\n\n    const fieldLabel = document.createElement('div');\n    fieldLabel.className = 'mobile-field-label';\n    fieldLabel.textContent = label;\n\n    const fieldValue = document.createElement('div');\n    fieldValue.className = 'mobile-field-value';\n\n    // Clone the input/content from the cell\n    const input = cell.querySelector('input, select, textarea');\n    if (input) {\n      const clonedInput = input.cloneNode(true);\n\n      // Sync values between original table input and mobile card input\n      clonedInput.addEventListener('input', () => {\n        input.value = clonedInput.value;\n        input.dispatchEvent(new Event('input', { bubbles: true }));\n      });\n\n      input.addEventListener('input', () => {\n        clonedInput.value = input.value;\n      });\n\n      fieldValue.appendChild(clonedInput);\n    } else {\n      fieldValue.textContent = cell.textContent.trim();\n    }\n\n    fieldGroup.appendChild(fieldLabel);\n    fieldGroup.appendChild(fieldValue);\n\n    return fieldGroup;\n  }\n\n  function setupColumnPriorities(table) {\n    const headers = table.querySelectorAll('thead th');\n    const rows = table.querySelectorAll('tbody tr');\n\n    headers.forEach((header, index) => {\n      const priority = getColumnPriority(header);\n      header.classList.add(`col-priority-${priority}`);\n\n      // Apply same class to all cells in this column\n      rows.forEach(row => {\n        const cell = row.cells[index];\n        if (cell) {\n          cell.classList.add(`col-priority-${priority}`);\n        }\n      });\n\n      // Add sticky classes for important columns\n      const text = header.textContent.toLowerCase();\n      if (text.includes('signal') && text.includes('tag')) {\n        header.classList.add('col-sticky');\n        rows.forEach(row => {\n          const cell = row.cells[index];\n          if (cell) cell.classList.add('col-sticky');\n        });\n      }\n\n      // Make actions column sticky\n      if (text.includes('action') || index === headers.length - 1) {\n        header.classList.add('col-sticky-actions');\n        rows.forEach(row => {\n          const cell = row.cells[index];\n          if (cell) cell.classList.add('col-sticky-actions');\n        });\n      }\n    });\n  }\n\n  function getColumnPriority(header) {\n    const text = header.textContent.toLowerCase();\n\n    // High priority: essential for identification and results\n    if (text.includes('signal') || text.includes('tag') || text.includes('description') || \n        text.includes('result') || text.includes('action')) {\n      return 'high';\n    }\n\n    // Medium priority: important but not critical\n    if (text.includes('rack') || text.includes('position') || text.includes('verified') || \n        text.includes('punch')) {\n      return 'medium';\n    }\n\n    // Low priority: can be hidden on smaller screens\n    return 'low';\n  }\n\n  function updateMobileCards(table, mobileContainer, headers) {\n    // Find existing cards (skip the scroll hint)\n    const cards = Array.from(mobileContainer.querySelectorAll('.mobile-card'));\n    const rows = Array.from(table.querySelectorAll('tbody tr'));\n\n    // Remove excess cards\n    if (cards.length > rows.length) {\n      for (let i = rows.length; i < cards.length; i++) {\n        if (cards[i]) cards[i].remove();\n      }\n    }\n\n    // Add new cards for new rows\n    if (rows.length > cards.length) {\n      for (let i = cards.length; i < rows.length; i++) {\n        const card = createMobileCard(rows[i], headers, i);\n        mobileContainer.appendChild(card);\n      }\n    }\n\n    // Update existing cards\n    cards.forEach((card, index) => {\n      if (rows[index]) {\n        // Update card content if needed\n        const newCard = createMobileCard(rows[index], headers, index);\n        card.replaceWith(newCard);\n      }\n    });\n  }\n\n  function handleTableResize() {\n    // Refresh mobile cards when window resizes\n    setTimeout(() => {\n      const tables = document.querySelectorAll('table');\n      tables.forEach(table => {\n        const mobileContainer = table.closest('.table-responsive')?.querySelector('.mobile-table-cards');\n        if (mobileContainer) {\n          const headers = Array.from(table.querySelectorAll('thead th')).map(th => ({\n            text: th.textContent.trim(),\n            priority: getColumnPriority(th),\n            index: Array.from(th.parentNode.children).indexOf(th)\n          }));\n          updateMobileCards(table, mobileContainer, headers);\n        }\n      });\n    }, 100);\n  }\n\n  // Setup user dropdown functionality\n  function setupUserDropdown() {\n    const userDetails = document.querySelector('.user-details');\n    const userDropdown = document.querySelector('.user-dropdown-menu');\n\n    if (userDetails && userDropdown) {\n      userDetails.addEventListener('click', function(e) {\n        e.stopPropagation();\n        userDropdown.classList.toggle('show');\n      });\n\n      // Close dropdown when clicking outside\n      document.addEventListener('click', function(e) {\n        if (!userDetails.contains(e.target)) {\n          userDropdown.classList.remove('show');\n        }\n      });\n    }\n  }\n\n  // Display version information\n  function displayVersionInfo() {\n    // This function can be implemented to show version information\n    console.log('SAT Report Generator v2.0');\n  }\n\n  // Setup user dropdown functionality\n  function setupUserDropdown() {\n    const userDetails = document.querySelector('.user-details');\n    const userDropdown = document.querySelector('.user-dropdown-menu');\n\n    if (userDetails && userDropdown) {\n      userDetails.addEventListener('click', function(e) {\n        e.stopPropagation();\n        userDropdown.classList.toggle('show');\n      });\n\n      // Close dropdown when clicking outside\n      document.addEventListener('click', function(e) {\n        if (!userDetails.contains(e.target)) {\n          userDropdown.classList.remove('show');\n        }\n      });\n    }\n  }\n\n  // Initialize responsive tables with mobile card layout\n  function initializeResponsiveTables() {\n    const tables = document.querySelectorAll('table');\n\n    tables.forEach(table => {\n      createMobileCardLayout(table);\n      setupColumnPriorities(table);\n      setupStickyColumns(table);\n      addHeaderTooltips(table);\n    });\n\n    // Handle window resize\n    window.addEventListener('resize', debounce(handleTableResize, 250));\n  }\n\n  function createMobileCardLayout(table) {\n    const tableContainer = table.closest('.table-responsive');\n    if (!tableContainer) return;\n\n    // Wrap existing table for desktop\n    const desktopWrapper = document.createElement('div');\n    desktopWrapper.className = 'desktop-table-wrapper';\n    table.parentNode.insertBefore(desktopWrapper, table);\n    desktopWrapper.appendChild(table);\n\n    // Create mobile cards container\n    const mobileContainer = document.createElement('div');\n    mobileContainer.className = 'mobile-table-cards';\n\n    // Add scroll hint\n    const scrollHint = document.createElement('div');\n    scrollHint.className = 'mobile-scroll-hint';\n    scrollHint.textContent = '📱 Optimized for mobile viewing';\n    mobileContainer.appendChild(scrollHint);\n\n    // Extract table data and create cards\n    const headers = Array.from(table.querySelectorAll('thead th')).map(th => ({\n      text: th.textContent.trim(),\n      priority: getColumnPriority(th),\n      index: Array.from(th.parentNode.children).indexOf(th)\n    }));\n\n    const rows = Array.from(table.querySelectorAll('tbody tr'));\n\n    rows.forEach((row, index) => {\n      const card = createMobileCard(row, headers, index);\n      mobileContainer.appendChild(card);\n    });\n\n    tableContainer.appendChild(mobileContainer);\n\n    // Watch for table changes and update mobile cards\n    const observer = new MutationObserver(() => {\n      updateMobileCards(table, mobileContainer, headers);\n    });\n\n    observer.observe(table.querySelector('tbody'), {\n      childList: true,\n      subtree: true,\n      attributes: true\n    });\n  }\n\n  function createMobileCard(row, headers, index) {\n    const card = document.createElement('div');\n    card.className = 'mobile-card';\n    card.dataset.rowIndex = index;\n\n    const cells = Array.from(row.querySelectorAll('td'));\n\n    // Card header with primary information\n    const header = document.createElement('div');\n    header.className = 'mobile-card-header';\n\n    // Get primary identifier (usually first non-empty cell or signal tag)\n    let primaryId = `Item ${index + 1}`;\n    let signalTag = '';\n\n    // Look for Signal TAG column (usually around index 3-4)\n    const signalTagCell = cells.find((cell, idx) => {\n      const headerText = headers[idx]?.text.toLowerCase() || '';\n      return headerText.includes('signal') && headerText.includes('tag');\n    });\n\n    if (signalTagCell) {\n      const input = signalTagCell.querySelector('input');\n      signalTag = input ? input.value : signalTagCell.textContent.trim();\n    }\n\n    // Use S.No if available\n    if (cells[0]) {\n      const input = cells[0].querySelector('input');\n      const sno = input ? input.value : cells[0].textContent.trim();\n      if (sno) primaryId = sno;\n    }\n\n    header.innerHTML = `\n      <span class=\"mobile-card-title\">${signalTag || 'Signal'}</span>\n      <span class=\"mobile-card-number\">#${primaryId}</span>\n    `;\n\n    card.appendChild(header);\n\n    // Card body with essential fields\n    const body = document.createElement('div');\n    body.className = 'mobile-card-body';\n\n    // Essential fields (high priority columns)\n    const essentialFields = document.createElement('div');\n    essentialFields.className = 'mobile-essential-fields';\n\n    headers.forEach((header, colIndex) => {\n      if (header.priority === 'high' && colIndex < cells.length - 1) { // Exclude actions column\n        const cell = cells[colIndex];\n        if (cell) {\n          const fieldGroup = createMobileField(header.text, cell, colIndex);\n          essentialFields.appendChild(fieldGroup);\n        }\n      }\n    });\n\n    body.appendChild(essentialFields);\n\n    // Expandable section for other fields\n    const expandable = document.createElement('div');\n    expandable.className = 'mobile-expandable';\n\n    const toggle = document.createElement('button');\n    toggle.className = 'mobile-expand-toggle';\n    toggle.innerHTML = `\n      <span>More Details</span>\n      <i class=\"fas fa-chevron-down\"></i>\n    `;\n\n    toggle.addEventListener('click', (e) => {\n      e.preventDefault();\n      expandable.classList.toggle('expanded');\n    });\n\n    const expandableContent = document.createElement('div');\n    expandableContent.className = 'mobile-expandable-content';\n\n    headers.forEach((header, colIndex) => {\n      if (header.priority !== 'high' && colIndex < cells.length - 1) { // Exclude actions column\n        const cell = cells[colIndex];\n        if (cell) {\n          const fieldGroup = createMobileField(header.text, cell, colIndex);\n          expandableContent.appendChild(fieldGroup);\n        }\n      }\n    });\n\n    expandable.appendChild(toggle);\n    expandable.appendChild(expandableContent);\n    body.appendChild(expandable);\n\n    // Actions\n    const actionsCell = cells[cells.length - 1];\n    if (actionsCell) {\n      const actions = document.createElement('div');\n      actions.className = 'mobile-card-actions';\n\n      const buttons = actionsCell.querySelectorAll('button');\n      buttons.forEach(btn => {\n        const mobileBtn = btn.cloneNode(true);\n        mobileBtn.className = `mobile-action-btn ${btn.classList.contains('remove-row-btn') ? 'delete' : 'edit'}`;\n\n        // Ensure the cloned button maintains functionality\n        if (btn.classList.contains('remove-row-btn')) {\n          mobileBtn.addEventListener('click', () => {\n            // Remove both the original row and the mobile card\n            btn.click();\n            card.remove();\n          });\n        }\n\n        actions.appendChild(mobileBtn);\n      });\n\n      body.appendChild(actions);\n    }\n\n    card.appendChild(body);\n    return card;\n  }\n\n  function createMobileField(label, cell, colIndex) {\n    const fieldGroup = document.createElement('div');\n    fieldGroup.className = 'mobile-field-group';\n\n    const fieldLabel = document.createElement('div');\n    fieldLabel.className = 'mobile-field-label';\n    fieldLabel.textContent = label;\n\n    const fieldValue = document.createElement('div');\n    fieldValue.className = 'mobile-field-value';\n\n    // Clone the input/content from the cell\n    const input = cell.querySelector('input, select, textarea');\n    if (input) {\n      const clonedInput = input.cloneNode(true);\n\n      // Sync values between original table input and mobile card input\n      clonedInput.addEventListener('input', () => {\n        input.value = clonedInput.value;\n        input.dispatchEvent(new Event('input', { bubbles: true }));\n      });\n\n      input.addEventListener('input', () => {\n        clonedInput.value = input.value;\n      });\n\n      fieldValue.appendChild(clonedInput);\n    } else {\n      fieldValue.textContent = cell.textContent.trim();\n    }\n\n    fieldGroup.appendChild(fieldLabel);\n    fieldGroup.appendChild(fieldValue);\n\n    return fieldGroup;\n  }\n\n  function setupColumnPriorities(table) {\n    const headers = table.querySelectorAll('thead th');\n    const rows = table.querySelectorAll('tbody tr');\n\n    headers.forEach((header, index) => {\n      const priority = getColumnPriority(header);\n      header.classList.add(`col-priority-${priority}`);\n\n      // Apply same class to all cells in this column\n      rows.forEach(row => {\n        const cell = row.cells[index];\n        if (cell) {\n          cell.classList.add(`col-priority-${priority}`);\n        }\n      });\n\n      // Add sticky classes for important columns\n      const text = header.textContent.toLowerCase();\n      if (text.includes('signal') && text.includes('tag')) {\n        header.classList.add('col-sticky');\n        rows.forEach(row => {\n          const cell = row.cells[index];\n          if (cell) cell.classList.add('col-sticky');\n        });\n      }\n\n      // Make actions column sticky\n      if (text.includes('action') || index === headers.length - 1) {\n        header.classList.add('col-sticky-actions');\n        rows.forEach(row => {\n          const cell = row.cells[index];\n          if (cell) cell.classList.add('col-sticky-actions');\n        });\n      }\n    });\n  }\n\n  function getColumnPriority(header) {\n    const text = header.textContent.toLowerCase();\n\n    // High priority: essential for identification and results\n    if (text.includes('signal') || text.includes('tag') || text.includes('description') || \n        text.includes('result') || text.includes('action')) {\n      return 'high';\n    }\n\n    // Medium priority: important but not critical\n    if (text.includes('rack') || text.includes('position') || text.includes('verified') || \n        text.includes('punch')) {\n      return 'medium';\n    }\n\n    // Low priority: can be hidden on smaller screens\n    return 'low';\n  }\n\n  function updateMobileCards(table, mobileContainer, headers) {\n    // Find existing cards (skip the scroll hint)\n    const cards = Array.from(mobileContainer.querySelectorAll('.mobile-card'));\n    const rows = Array.from(table.querySelectorAll('tbody tr'));\n\n    // Remove excess cards\n    if (cards.length > rows.length) {\n      for (let i = rows.length; i < cards.length; i++) {\n        if (cards[i]) cards[i].remove();\n      }\n    }\n\n    // Add new cards for new rows\n    if (rows.length > cards.length) {\n      for (let i = cards.length; i < rows.length; i++) {\n        const card = createMobileCard(rows[i], headers, i);\n        mobileContainer.appendChild(card);\n      }\n    }\n\n    // Update existing cards\n    cards.forEach((card, index) => {\n      if (rows[index]) {\n        // Update card content if needed\n        const newCard = createMobileCard(rows[index], headers, index);\n        card.replaceWith(newCard);\n      }\n    });\n  }\n\n  function handleTableResize() {\n    // Refresh mobile cards when window resizes\n    setTimeout(() => {\n      const tables = document.querySelectorAll('table');\n      tables.forEach(table => {\n        const mobileContainer = table.closest('.table-responsive')?.querySelector('.mobile-table-cards');\n        if (mobileContainer) {\n          const headers = Array.from(table.querySelectorAll('thead th')).map(th => ({\n            text: th.textContent.trim(),\n            priority: getColumnPriority(th),\n            index: Array.from(th.parentNode.children).indexOf(th)\n          }));\n          updateMobileCards(table, mobileContainer, headers);\n        }\n      });\n    }, 100);\n  }\n\n  // Setup user dropdown functionality\n  function setupUserDropdown() {\n    const userDetails = document.querySelector('.user-details');\n    const userDropdown = document.querySelector('.user-dropdown-menu');\n\n    if (userDetails && userDropdown) {\n      userDetails.addEventListener('click', function(e) {\n        e.stopPropagation();\n        userDropdown.classList.toggle('show');\n      });\n\n      // Close dropdown when clicking outside\n      document.addEventListener('click', function(e) {\n        if (!userDetails.contains(e.target)) {\n          userDropdown.classList.remove('show');\n        }\n      });\n    }\n  }\n\n  // Display version information\n  function displayVersionInfo() {\n    // This function can be implemented to show version information\n    console.log('SAT Report Generator v2.0');\n  }\n\n  // Setup user dropdown functionality\n  function setupUserDropdown() {\n    const userDetails = document.querySelector('.user-details');\n    const userDropdown = document.querySelector('.user-dropdown-menu');\n\n    if (userDetails && userDropdown) {\n      userDetails.addEventListener('click', function(e) {\n        e.stopPropagation();\n        userDropdown.classList.toggle('show');\n      });\n\n      // Close dropdown when clicking outside\n      document.addEventListener('click', function(e) {\n        if (!userDetails.contains(e.target)) {\n          userDropdown.classList.remove('show');\n        }\n      });\n    }\n  }\n\n  // Initialize responsive tables with mobile card layout\n  function initializeResponsiveTables() {\n    const tables = document.querySelectorAll('table');\n\n    tables.forEach(table => {\n      createMobileCardLayout(table);\n      setupColumnPriorities(table);\n      setupStickyColumns(table);\n      addHeaderTooltips(table);\n    });\n\n    // Handle window resize\n    window.addEventListener('resize', debounce(handleTableResize, 250));\n  }\n\n  function createMobileCardLayout(table) {\n    const tableContainer = table.closest('.table-responsive');\n    if (!tableContainer) return;\n\n    // Wrap existing table for desktop\n    const desktopWrapper = document.createElement('div');\n    desktopWrapper.className = 'desktop-table-wrapper';\n    table.parentNode.insertBefore(desktopWrapper, table);\n    desktopWrapper.appendChild(table);\n\n    // Create mobile cards container\n    const mobileContainer = document.createElement('div');\n    mobileContainer.className = 'mobile-table-cards';\n\n    // Add scroll hint\n    const scrollHint = document.createElement('div');\n    scrollHint.className = 'mobile-scroll-hint';\n    scrollHint.textContent = '📱 Optimized for mobile viewing';\n    mobileContainer.appendChild(scrollHint);\n\n    // Extract table data and create cards\n    const headers = Array.from(table.querySelectorAll('thead th')).map(th => ({\n      text: th.textContent.trim(),\n      priority: getColumnPriority(th),\n      index: Array.from(th.parentNode.children).indexOf(th)\n    }));\n\n    const rows = Array.from(table.querySelectorAll('tbody tr'));\n\n    rows.forEach((row, index) => {\n      const card = createMobileCard(row, headers, index);\n      mobileContainer.appendChild(card);\n    });\n\n    tableContainer.appendChild(mobileContainer);\n\n    // Watch for table changes and update mobile cards\n    const observer = new MutationObserver(() => {\n      updateMobileCards(table, mobileContainer, headers);\n    });\n\n    observer.observe(table.querySelector('tbody'), {\n      childList: true,\n      subtree: true,\n      attributes: true\n    });\n  }\n\n  function createMobileCard(row, headers, index) {\n    const card = document.createElement('div');\n    card.className = 'mobile-card';\n    card.dataset.rowIndex = index;\n\n    const cells = Array.from(row.querySelectorAll('td'));\n\n    // Card header with primary information\n    const header = document.createElement('div');\n    header.className = 'mobile-card-header';\n\n    // Get primary identifier (usually first non-empty cell or signal tag)\n    let primaryId = `Item ${index + 1}`;\n    let signalTag = '';\n\n    // Look for Signal TAG column (usually around index 3-4)\n    const signalTagCell = cells.find((cell, idx) => {\n      const headerText = headers[idx]?.text.toLowerCase() || '';\n      return headerText.includes('signal') && headerText.includes('tag');\n    });\n\n    if (signalTagCell) {\n      const input = signalTagCell.querySelector('input');\n      signalTag = input ? input.value : signalTagCell.textContent.trim();\n    }\n\n    // Use S.No if available\n    if (cells[0]) {\n      const input = cells[0].querySelector('input');\n      const sno = input ? input.value : cells[0].textContent.trim();\n      if (sno) primaryId = sno;\n    }\n\n    header.innerHTML = `\n      <span class=\"mobile-card-title\">${signalTag || 'Signal'}</span>\n      <span class=\"mobile-card-number\">#${primaryId}</span>\n    `;\n\n    card.appendChild(header);\n\n    // Card body with essential fields\n    const body = document.createElement('div');\n    body.className = 'mobile-card-body';\n\n    // Essential fields (high priority columns)\n    const essentialFields = document.createElement('div');\n    essentialFields.className = 'mobile-essential-fields';\n\n    headers.forEach((header, colIndex) => {\n      if (header.priority === 'high' && colIndex < cells.length - 1) { // Exclude actions column\n        const cell = cells[colIndex];\n        if (cell) {\n          const fieldGroup = createMobileField(header.text, cell, colIndex);\n          essentialFields.appendChild(fieldGroup);\n        }\n      }\n    });\n\n    body.appendChild(essentialFields);\n\n    // Expandable section for other fields\n    const expandable = document.createElement('div');\n    expandable.className = 'mobile-expandable';\n\n    const toggle = document.createElement('button');\n    toggle.className = 'mobile-expand-toggle';\n    toggle.innerHTML = `\n      <span>More Details</span>\n      <i class=\"fas fa-chevron-down\"></i>\n    `;\n\n    toggle.addEventListener('click', (e) => {\n      e.preventDefault();\n      expandable.classList.toggle('expanded');\n    });\n\n    const expandableContent = document.createElement('div');\n    expandableContent.className = 'mobile-expandable-content';\n\n    headers.forEach((header, colIndex) => {\n      if (header.priority !== 'high' && colIndex < cells.length - 1) { // Exclude actions column\n        const cell = cells[colIndex];\n        if (cell) {\n          const fieldGroup = createMobileField(header.text, cell, colIndex);\n          expandableContent.appendChild(fieldGroup);\n        }\n      }\n    });\n\n    expandable.appendChild(toggle);\n    expandable.appendChild(expandableContent);\n    body.appendChild(expandable);\n\n    // Actions\n    const actionsCell = cells[cells.length - 1];\n    if (actionsCell) {\n      const actions = document.createElement('div');\n      actions.className = 'mobile-card-actions';\n\n      const buttons = actionsCell.querySelectorAll('button');\n      buttons.forEach(btn => {\n        const mobileBtn = btn.cloneNode(true);\n        mobileBtn.className = `mobile-action-btn ${btn.classList.contains('remove-row-btn') ? 'delete' : 'edit'}`;\n\n        // Ensure the cloned button maintains functionality\n        if (btn.classList.contains('remove-row-btn')) {\n          mobileBtn.addEventListener('click', () => {\n            // Remove both the original row and the mobile card\n            btn.click();\n            card.remove();\n          });\n        }\n\n        actions.appendChild(mobileBtn);\n      });\n\n      body.appendChild(actions);\n    }\n\n    card.appendChild(body);\n    return card;\n  }\n\n  function createMobileField(label, cell, colIndex) {\n    const fieldGroup = document.createElement('div');\n    fieldGroup.className = 'mobile-field-group';\n\n    const fieldLabel = document.createElement('div');\n    fieldLabel.className = 'mobile-field-label';\n    fieldLabel.textContent = label;\n\n    const fieldValue = document.createElement('div');\n    fieldValue.className = 'mobile-field-value';\n\n    // Clone the input/content from the cell\n    const input = cell.querySelector('input, select, textarea');\n    if (input) {\n      const clonedInput = input.cloneNode(true);\n\n      // Sync values between original table input and mobile card input\n      clonedInput.addEventListener('input', () => {\n        input.value = clonedInput.value;\n        input.dispatchEvent(new Event('input', { bubbles: true }));\n      });\n\n      input.addEventListener('input', () => {\n        clonedInput.value = input.value;\n      });\n\n      fieldValue.appendChild(clonedInput);\n    } else {\n      fieldValue.textContent = cell.textContent.trim();\n    }\n\n    fieldGroup.appendChild(fieldLabel);\n    fieldGroup.appendChild(fieldValue);\n\n    return fieldGroup;\n  }\n\n  function setupColumnPriorities(table) {\n    const headers = table.querySelectorAll('thead th');\n    const rows = table.querySelectorAll('tbody tr');\n\n    headers.forEach((header, index) => {\n      const priority = getColumnPriority(header);\n      header.classList.add(`col-priority-${priority}`);\n\n      // Apply same class to all cells in this column\n      rows.forEach(row => {\n        const cell = row.cells[index];\n        if (cell) {\n          cell.classList.add(`col-priority-${priority}`);\n        }\n      });\n\n      // Add sticky classes for important columns\n      const text = header.textContent.toLowerCase();\n      if (text.includes('signal') && text.includes('tag')) {\n        header.classList.add('col-sticky');\n        rows.forEach(row => {\n          const cell = row.cells[index];\n          if (cell) cell.classList.add('col-sticky');\n        });\n      }\n\n      // Make actions column sticky\n      if (text.includes('action') || index === headers.length - 1) {\n        header.classList.add('col-sticky-actions');\n        rows.forEach(row => {\n          const cell = row.cells[index];\n          if (cell) cell.classList.add('col-sticky-actions');\n        });\n      }\n    });\n  }\n\n  function getColumnPriority(header) {\n    const text = header.textContent.toLowerCase();\n\n    // High priority: essential for identification and results\n    if (text.includes('signal') || text.includes('tag') || text.includes('description') || \n        text.includes('result') || text.includes('action')) {\n      return 'high';\n    }\n\n    // Medium priority: important but not critical\n    if (text.includes('rack') || text.includes('position') || text.includes('verified') || \n        text.includes('punch')) {\n      return 'medium';\n    }\n\n    // Low priority: can be hidden on smaller screens\n    return 'low';\n  }\n\n  function updateMobileCards(table, mobileContainer, headers) {\n    // Find existing cards (skip the scroll hint)\n    const cards = Array.from(mobileContainer.querySelectorAll('.mobile-card'));\n    const rows = Array.from(table.querySelectorAll('tbody tr'));\n\n    // Remove excess cards\n    if (cards.length > rows.length) {\n      for (let i = rows.length; i < cards.length; i++) {\n        if (cards[i]) cards[i].remove();\n      }\n    }\n\n    // Add new cards for new rows\n    if (rows.length > cards.length) {\n      for (let i = cards.length; i < rows.length; i++) {\n        const card = createMobileCard(rows[i], headers, i);\n        mobileContainer.appendChild(card);\n      }\n    }\n\n    // Update existing cards\n    cards.forEach((card, index) => {\n      if (rows[index]) {\n        // Update card content if needed\n        const newCard = createMobileCard(rows[index], headers, index);\n        card.replaceWith(newCard);\n      }\n    });\n  }\n\n  function handleTableResize() {\n    // Refresh mobile cards when window resizes\n    setTimeout(() => {\n      const tables = document.querySelectorAll('table');\n      tables.forEach(table => {\n        const mobileContainer = table.closest('.table-responsive')?.querySelector('.mobile-table-cards');\n        if (mobileContainer) {\n          const headers = Array.from(table.querySelectorAll('thead th')).map(th => ({\n            text: th.textContent.trim(),\n            priority: getColumnPriority(th),\n            index: Array.from(th.parentNode.children).indexOf(th)\n          }));\n          updateMobileCards(table, mobileContainer, headers);\n        }\n      });\n    }, 100);\n  }\n})();","size_bytes":141014},"static/js/notifications.js":{"content":"\nclass NotificationSystem {\n    constructor() {\n        this.pollInterval = 30000; // Poll every 30 seconds\n        this.isPolling = false;\n        this.notificationContainer = null;\n        this.init();\n    }\n\n    init() {\n        this.createNotificationElements();\n        this.loadInitialNotifications();\n        this.startPolling();\n        this.bindEvents();\n    }\n\n    createNotificationElements() {\n        // Create notification bell icon if it doesn't exist\n        const nav = document.querySelector('.nav-links') || document.querySelector('nav');\n        if (nav && !document.getElementById('notification-bell')) {\n            const bellHtml = `\n                <div class=\"notification-wrapper\">\n                    <button id=\"notification-bell\" class=\"notification-bell\" title=\"Notifications\">\n                        <i class=\"fas fa-bell\"></i>\n                        <span id=\"notification-badge\" class=\"notification-badge\" style=\"display: none;\">0</span>\n                    </button>\n                    <div id=\"notification-dropdown\" class=\"notification-dropdown\" style=\"display: none;\">\n                        <div class=\"notification-header\">\n                            <h3>Notifications</h3>\n                            <button id=\"mark-all-read\" class=\"mark-all-read\">Mark all read</button>\n                        </div>\n                        <div id=\"notification-list\" class=\"notification-list\">\n                            <div class=\"loading\">Loading notifications...</div>\n                        </div>\n                        <div class=\"notification-footer\">\n                            <a href=\"/notifications\" class=\"view-all\">View All Notifications</a>\n                        </div>\n                    </div>\n                </div>\n            `;\n            nav.insertAdjacentHTML('beforeend', bellHtml);\n        }\n    }\n\n    bindEvents() {\n        const bell = document.getElementById('notification-bell');\n        const dropdown = document.getElementById('notification-dropdown');\n        const markAllRead = document.getElementById('mark-all-read');\n\n        if (bell) {\n            bell.addEventListener('click', (e) => {\n                e.stopPropagation();\n                this.toggleDropdown();\n            });\n        }\n\n        if (markAllRead) {\n            markAllRead.addEventListener('click', () => {\n                this.markAllAsRead();\n            });\n        }\n\n        // Close dropdown when clicking outside\n        document.addEventListener('click', (e) => {\n            if (dropdown && !dropdown.contains(e.target) && !bell.contains(e.target)) {\n                dropdown.style.display = 'none';\n            }\n        });\n    }\n\n    async loadInitialNotifications() {\n        try {\n            const response = await fetch('/notifications/api/notifications');\n            const data = await response.json();\n            \n            if (data.success) {\n                this.updateNotificationBadge(data.unread_count);\n                this.renderNotifications(data.notifications);\n            }\n        } catch (error) {\n            console.error('Error loading notifications:', error);\n        }\n    }\n\n    async startPolling() {\n        if (this.isPolling) return;\n        this.isPolling = true;\n\n        const poll = async () => {\n            try {\n                const response = await fetch('/notifications/api/notifications/unread-count');\n                const data = await response.json();\n                \n                if (data.success) {\n                    this.updateNotificationBadge(data.count);\n                }\n            } catch (error) {\n                console.error('Error polling notifications:', error);\n            }\n            \n            if (this.isPolling) {\n                setTimeout(poll, this.pollInterval);\n            }\n        };\n\n        poll();\n    }\n\n    stopPolling() {\n        this.isPolling = false;\n    }\n\n    updateNotificationBadge(count) {\n        const badge = document.getElementById('notification-badge');\n        if (badge) {\n            if (count > 0) {\n                badge.textContent = count > 99 ? '99+' : count;\n                badge.style.display = 'block';\n            } else {\n                badge.style.display = 'none';\n            }\n        }\n    }\n\n    async toggleDropdown() {\n        const dropdown = document.getElementById('notification-dropdown');\n        if (!dropdown) return;\n\n        if (dropdown.style.display === 'none' || !dropdown.style.display) {\n            // Load fresh notifications when opening\n            await this.loadNotifications();\n            dropdown.style.display = 'block';\n        } else {\n            dropdown.style.display = 'none';\n        }\n    }\n\n    async loadNotifications() {\n        const list = document.getElementById('notification-list');\n        if (!list) return;\n\n        list.innerHTML = '<div class=\"loading\">Loading notifications...</div>';\n\n        try {\n            const response = await fetch('/notifications/api/notifications');\n            const data = await response.json();\n            \n            if (data.success) {\n                this.renderNotifications(data.notifications);\n                this.updateNotificationBadge(data.unread_count);\n            } else {\n                list.innerHTML = '<div class=\"error\">Error loading notifications</div>';\n            }\n        } catch (error) {\n            console.error('Error loading notifications:', error);\n            list.innerHTML = '<div class=\"error\">Error loading notifications</div>';\n        }\n    }\n\n    renderNotifications(notifications) {\n        const list = document.getElementById('notification-list');\n        if (!list) return;\n\n        if (notifications.length === 0) {\n            list.innerHTML = '<div class=\"no-notifications\">No notifications</div>';\n            return;\n        }\n\n        const html = notifications.map(notification => {\n            const timeAgo = this.getTimeAgo(new Date(notification.created_at));\n            const readClass = notification.read ? 'read' : 'unread';\n            const actionButton = notification.action_url ? \n                `<button class=\"notification-action\" onclick=\"window.open('${notification.action_url}', '_blank')\">View</button>` : '';\n\n            return `\n                <div class=\"notification-item ${readClass}\" data-id=\"${notification.id}\">\n                    <div class=\"notification-content\">\n                        <h4>${notification.title}</h4>\n                        <p>${notification.message}</p>\n                        <small class=\"notification-time\">${timeAgo}</small>\n                    </div>\n                    <div class=\"notification-actions\">\n                        ${actionButton}\n                        ${!notification.read ? '<button class=\"mark-read\" onclick=\"notificationSystem.markAsRead(' + notification.id + ')\">Mark read</button>' : ''}\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        list.innerHTML = html;\n    }\n\n    async markAsRead(notificationId) {\n        try {\n            const response = await fetch(`/notifications/api/notifications/${notificationId}/mark-read`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': document.querySelector('meta[name=csrf-token]')?.getAttribute('content') || ''\n                }\n            });\n\n            const data = await response.json();\n            if (data.success) {\n                // Update UI\n                const item = document.querySelector(`[data-id=\"${notificationId}\"]`);\n                if (item) {\n                    item.classList.remove('unread');\n                    item.classList.add('read');\n                    const markReadBtn = item.querySelector('.mark-read');\n                    if (markReadBtn) markReadBtn.remove();\n                }\n                \n                // Refresh count\n                await this.loadInitialNotifications();\n            }\n        } catch (error) {\n            console.error('Error marking notification as read:', error);\n        }\n    }\n\n    async markAllAsRead() {\n        try {\n            const response = await fetch('/notifications/api/notifications/mark-all-read', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': document.querySelector('meta[name=csrf-token]')?.getAttribute('content') || ''\n                }\n            });\n\n            const data = await response.json();\n            if (data.success) {\n                // Refresh notifications\n                await this.loadNotifications();\n            }\n        } catch (error) {\n            console.error('Error marking all notifications as read:', error);\n        }\n    }\n\n    getTimeAgo(date) {\n        const now = new Date();\n        const diffMs = now - date;\n        const diffMins = Math.floor(diffMs / 60000);\n        const diffHours = Math.floor(diffMs / 3600000);\n        const diffDays = Math.floor(diffMs / 86400000);\n\n        if (diffMins < 1) return 'Just now';\n        if (diffMins < 60) return `${diffMins}m ago`;\n        if (diffHours < 24) return `${diffHours}h ago`;\n        if (diffDays < 7) return `${diffDays}d ago`;\n        return date.toLocaleDateString();\n    }\n\n    // Public method to create notifications from other parts of the app\n    static showToast(title, message, type = 'info') {\n        const toast = document.createElement('div');\n        toast.className = `notification-toast notification-${type}`;\n        toast.innerHTML = `\n            <div class=\"toast-content\">\n                <h4>${title}</h4>\n                <p>${message}</p>\n            </div>\n            <button class=\"toast-close\">&times;</button>\n        `;\n\n        document.body.appendChild(toast);\n\n        // Auto remove after 5 seconds\n        setTimeout(() => {\n            if (toast.parentNode) {\n                toast.parentNode.removeChild(toast);\n            }\n        }, 5000);\n\n        // Close button\n        toast.querySelector('.toast-close').addEventListener('click', () => {\n            if (toast.parentNode) {\n                toast.parentNode.removeChild(toast);\n            }\n        });\n    }\n}\n\n// Initialize notification system when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.notificationSystem = new NotificationSystem();\n});\n\n// Expose toast method globally\nwindow.showNotificationToast = NotificationSystem.showToast;\n","size_bytes":10558}},"version":1}